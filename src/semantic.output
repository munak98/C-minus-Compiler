Grammar

    0 $accept: begin $end

    1 begin: program

    2 program: program declaration
    3        | %empty

    4 declaration: varDecl
    5            | funcDecl

    6 varDecl: TYPE varList ';'
    7        | TYPE error ';'

    8 varList: varList ',' new_id
    9        | new_id

   10 new_id: ID

   11 funcDecl: TYPE new_id '(' arguments ')' '{' funcBody '}'
   12         | TYPE new_id '(' error ')' '{'

   13 arguments: %empty
   14          | argsList

   15 argsList: argsList ',' arg
   16         | arg

   17 arg: TYPE ID

   18 funcBody: %empty
   19         | funcBody varDecl
   20         | funcBody funcDecl
   21         | funcBody stmt

   22 stmt: exprStmt
   23     | returnStmt
   24     | iterStmt
   25     | condStmt

   26 iterStmt: FOR '(' exprStmt exprStmt ')' body
   27         | FOR '(' exprStmt exprStmt expression ')' body
   28         | FORALL '(' pertExpr ')' body
   29         | FORALL '(' error ')'
   30         | FOR '(' error ')'

   31 body: '{' funcBody '}'
   32     | stmt
   33     | varDecl
   34     | funcDecl

   35 condStmt: IF '(' expression ')' body
   36         | IF '(' expression ')' body ELSE body

   37 returnStmt: RETURN exprStmt

   38 exprStmt: expression ';'
   39         | ';'
   40         | error ';'

   41 expression: assign
   42           | inExpr
   43           | outExpr
   44           | simpleExpr
   45           | setExpr

   46 assign: var '=' simpleExpr

   47 var: ID

   48 inExpr: READ '(' var ')'

   49 outExpr: WRITE '(' output ')'
   50        | WRITELN '(' output ')'

   51 output: ID
   52       | CHAR
   53       | STRING

   54 simpleExpr: simpleExpr DISJ disjExpr
   55           | disjExpr

   56 disjExpr: disjExpr CONJ negExpr
   57         | negExpr

   58 negExpr: NEG negExpr
   59        | relExpr

   60 relExpr: relExpr RELOP artExpr1
   61        | artExpr1

   62 artExpr1: artExpr1 ARTOP1 artExpr2
   63         | artExpr2

   64 artExpr2: artExpr2 ARTOP2 factor
   65         | factor

   66 factor: ID
   67       | '(' simpleExpr ')'
   68       | constant
   69       | call
   70       | IS_SET '(' var ')'
   71       | pertExpr

   72 constant: INTEGER
   73         | FLOAT
   74         | EMPTY

   75 call: var '(' params ')'

   76 params: %empty
   77       | paramList

   78 paramList: paramList ',' simpleExpr
   79          | simpleExpr

   80 pertExpr: elem IN set

   81 setExpr: SETOP '(' pertExpr ')'
   82        | EXISTS '(' pertExpr ')'

   83 elem: ID
   84     | '(' setExpr ')'
   85     | call
   86     | '(' simpleExpr ')'
   87     | constant

   88 set: ID
   89    | SETOP '(' pertExpr ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 11 12 26 27 28 29 30 35 36 48 49 50 67 70 75 81 82 84 86 89
    ')' (41) 11 12 26 27 28 29 30 35 36 48 49 50 67 70 75 81 82 84 86 89
    ',' (44) 8 15 78
    ';' (59) 6 7 38 39 40
    '=' (61) 46
    '{' (123) 11 12 31
    '}' (125) 11 31
    error (256) 7 12 29 30 40
    TYPE <ival> (258) 6 7 11 12 17
    RELOP <ival> (259) 60
    SETOP <ival> (260) 81 89
    ARTOP1 <ival> (261) 62
    ARTOP2 <ival> (262) 64
    ID <sval> (263) 10 17 47 51 66 83 88
    IF (264) 35 36
    ELSE (265) 36
    FOR (266) 26 27 30
    RETURN (267) 37
    FORALL (268) 28 29
    IN (269) 80
    IS_SET (270) 70
    EXISTS (271) 82
    DISJ (272) 54
    CONJ (273) 56
    NEG (274) 58
    READ (275) 48
    WRITE (276) 49
    WRITELN (277) 50
    INTEGER <ival> (278) 72
    FLOAT <fval> (279) 73
    CHAR <cval> (280) 52
    STRING <sval> (281) 53
    EMPTY (282) 74
    THEN (283)


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    begin (37)
        on left: 1
        on right: 0
    program <tnode> (38)
        on left: 2 3
        on right: 1 2
    declaration <tnode> (39)
        on left: 4 5
        on right: 2
    varDecl <tnode> (40)
        on left: 6 7
        on right: 4 19 33
    varList <tnode> (41)
        on left: 8 9
        on right: 6 8
    new_id <tnode> (42)
        on left: 10
        on right: 8 9 11 12
    funcDecl <tnode> (43)
        on left: 11 12
        on right: 5 20 34
    arguments <tnode> (44)
        on left: 13 14
        on right: 11
    argsList <tnode> (45)
        on left: 15 16
        on right: 14 15
    arg <tnode> (46)
        on left: 17
        on right: 15 16
    funcBody <tnode> (47)
        on left: 18 19 20 21
        on right: 11 19 20 21 31
    stmt <tnode> (48)
        on left: 22 23 24 25
        on right: 21 32
    iterStmt <tnode> (49)
        on left: 26 27 28 29 30
        on right: 24
    body <tnode> (50)
        on left: 31 32 33 34
        on right: 26 27 28 35 36
    condStmt <tnode> (51)
        on left: 35 36
        on right: 25
    returnStmt <tnode> (52)
        on left: 37
        on right: 23
    exprStmt <tnode> (53)
        on left: 38 39 40
        on right: 22 26 27 37
    expression <tnode> (54)
        on left: 41 42 43 44 45
        on right: 27 35 36 38
    assign <tnode> (55)
        on left: 46
        on right: 41
    var <tnode> (56)
        on left: 47
        on right: 46 48 70 75
    inExpr <tnode> (57)
        on left: 48
        on right: 42
    outExpr <tnode> (58)
        on left: 49 50
        on right: 43
    output <tnode> (59)
        on left: 51 52 53
        on right: 49 50
    simpleExpr <tnode> (60)
        on left: 54 55
        on right: 44 46 54 67 78 79 86
    disjExpr <tnode> (61)
        on left: 56 57
        on right: 54 55 56
    negExpr <tnode> (62)
        on left: 58 59
        on right: 56 57 58
    relExpr <tnode> (63)
        on left: 60 61
        on right: 59 60
    artExpr1 <tnode> (64)
        on left: 62 63
        on right: 60 61 62
    artExpr2 <tnode> (65)
        on left: 64 65
        on right: 62 63 64
    factor <tnode> (66)
        on left: 66 67 68 69 70 71
        on right: 64 65
    constant <tnode> (67)
        on left: 72 73 74
        on right: 68 87
    call <tnode> (68)
        on left: 75
        on right: 69 85
    params <tnode> (69)
        on left: 76 77
        on right: 75
    paramList <tnode> (70)
        on left: 78 79
        on right: 77 78
    pertExpr <tnode> (71)
        on left: 80
        on right: 28 71 81 82 89
    setExpr <tnode> (72)
        on left: 81 82
        on right: 45 84
    elem <tnode> (73)
        on left: 83 84 85 86 87
        on right: 80
    set <tnode> (74)
        on left: 88 89
        on right: 80


State 0

    0 $accept: . begin $end

    $end  reduce using rule 3 (program)
    TYPE  reduce using rule 3 (program)

    begin    go to state 1
    program  go to state 2


State 1

    0 $accept: begin . $end

    $end  shift, and go to state 3


State 2

    1 begin: program .
    2 program: program . declaration

    TYPE  shift, and go to state 4

    $end  reduce using rule 1 (begin)

    declaration  go to state 5
    varDecl      go to state 6
    funcDecl     go to state 7


State 3

    0 $accept: begin $end .

    $default  accept


State 4

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error ';'
   11 funcDecl: TYPE . new_id '(' arguments ')' '{' funcBody '}'
   12         | TYPE . new_id '(' error ')' '{'

    error  shift, and go to state 8
    ID     shift, and go to state 9

    varList  go to state 10
    new_id   go to state 11


State 5

    2 program: program declaration .

    $end  reduce using rule 2 (program)
    TYPE  reduce using rule 2 (program)


State 6

    4 declaration: varDecl .

    $end  reduce using rule 4 (declaration)
    TYPE  reduce using rule 4 (declaration)


State 7

    5 declaration: funcDecl .

    $end  reduce using rule 5 (declaration)
    TYPE  reduce using rule 5 (declaration)


State 8

    7 varDecl: TYPE error . ';'

    ';'  shift, and go to state 12


State 9

   10 new_id: ID .

    ';'  reduce using rule 10 (new_id)
    ','  reduce using rule 10 (new_id)
    '('  reduce using rule 10 (new_id)


State 10

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 13
    ','  shift, and go to state 14


State 11

    9 varList: new_id .
   11 funcDecl: TYPE new_id . '(' arguments ')' '{' funcBody '}'
   12         | TYPE new_id . '(' error ')' '{'

    '('  shift, and go to state 15

    ';'  reduce using rule 9 (varList)
    ','  reduce using rule 9 (varList)


State 12

    7 varDecl: TYPE error ';' .

    $end  reduce using rule 7 (varDecl)
    TYPE  reduce using rule 7 (varDecl)


State 13

    6 varDecl: TYPE varList ';' .

    $end  reduce using rule 6 (varDecl)
    TYPE  reduce using rule 6 (varDecl)


State 14

    8 varList: varList ',' . new_id

    ID  shift, and go to state 164

    new_id  go to state 16


State 15

   11 funcDecl: TYPE new_id '(' . arguments ')' '{' funcBody '}'
   12         | TYPE new_id '(' . error ')' '{'

    error  shift, and go to state 17
    TYPE   shift, and go to state 18

    ')'  reduce using rule 13 (arguments)

    arguments  go to state 19
    argsList   go to state 20
    arg        go to state 21


State 16

    8 varList: varList ',' new_id .

    ';'  reduce using rule 8 (varList)
    ','  reduce using rule 8 (varList)


State 17

   12 funcDecl: TYPE new_id '(' error . ')' '{'

    ')'  shift, and go to state 22


State 18

   17 arg: TYPE . ID

    ID  shift, and go to state 23


State 19

   11 funcDecl: TYPE new_id '(' arguments . ')' '{' funcBody '}'

    ')'  shift, and go to state 24


State 20

   14 arguments: argsList .
   15 argsList: argsList . ',' arg

    ','  shift, and go to state 25

    ')'  reduce using rule 14 (arguments)


State 21

   16 argsList: arg .

    ','  reduce using rule 16 (argsList)
    ')'  reduce using rule 16 (argsList)


State 22

   12 funcDecl: TYPE new_id '(' error ')' . '{'

    '{'  shift, and go to state 26


State 23

   17 arg: TYPE ID .

    ','  reduce using rule 17 (arg)
    ')'  reduce using rule 17 (arg)


State 24

   11 funcDecl: TYPE new_id '(' arguments ')' . '{' funcBody '}'

    '{'  shift, and go to state 27


State 25

   15 argsList: argsList ',' . arg

    TYPE  shift, and go to state 18

    arg  go to state 28


State 26

   12 funcDecl: TYPE new_id '(' error ')' '{' .

    $end  reduce using rule 12 (funcDecl)
    TYPE  reduce using rule 12 (funcDecl)


State 27

   11 funcDecl: TYPE new_id '(' arguments ')' '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)

    funcBody  go to state 29


State 28

   15 argsList: argsList ',' arg .

    ','  reduce using rule 15 (argsList)
    ')'  reduce using rule 15 (argsList)


State 29

   11 funcDecl: TYPE new_id '(' arguments ')' '{' funcBody . '}'
   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt

    error    shift, and go to state 30
    TYPE     shift, and go to state 165
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 33
    FOR      shift, and go to state 34
    RETURN   shift, and go to state 35
    FORALL   shift, and go to state 36
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 46
    '('      shift, and go to state 47
    '}'      shift, and go to state 48

    varDecl     go to state 49
    funcDecl    go to state 50
    stmt        go to state 51
    iterStmt    go to state 52
    condStmt    go to state 53
    returnStmt  go to state 54
    exprStmt    go to state 55
    expression  go to state 56
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 30

   40 exprStmt: error . ';'

    ';'  shift, and go to state 73


State 31

   81 setExpr: SETOP . '(' pertExpr ')'

    '('  shift, and go to state 74


State 32

   47 var: ID .
   66 factor: ID .
   83 elem: ID .

    RELOP   reduce using rule 66 (factor)
    ARTOP1  reduce using rule 66 (factor)
    ARTOP2  reduce using rule 66 (factor)
    IN      reduce using rule 83 (elem)
    DISJ    reduce using rule 66 (factor)
    CONJ    reduce using rule 66 (factor)
    ';'     reduce using rule 66 (factor)
    '('     reduce using rule 47 (var)
    '='     reduce using rule 47 (var)


State 33

   35 condStmt: IF . '(' expression ')' body
   36         | IF . '(' expression ')' body ELSE body

    '('  shift, and go to state 75


State 34

   26 iterStmt: FOR . '(' exprStmt exprStmt ')' body
   27         | FOR . '(' exprStmt exprStmt expression ')' body
   30         | FOR . '(' error ')'

    '('  shift, and go to state 76


State 35

   37 returnStmt: RETURN . exprStmt

    error    shift, and go to state 30
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 46
    '('      shift, and go to state 47

    exprStmt    go to state 77
    expression  go to state 56
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 36

   28 iterStmt: FORALL . '(' pertExpr ')' body
   29         | FORALL . '(' error ')'

    '('  shift, and go to state 78


State 37

   70 factor: IS_SET . '(' var ')'

    '('  shift, and go to state 79


State 38

   82 setExpr: EXISTS . '(' pertExpr ')'

    '('  shift, and go to state 80


State 39

   58 negExpr: NEG . negExpr

    ID       shift, and go to state 166
    IS_SET   shift, and go to state 37
    NEG      shift, and go to state 39
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    '('      shift, and go to state 47

    var       go to state 81
    negExpr   go to state 82
    relExpr   go to state 64
    artExpr1  go to state 65
    artExpr2  go to state 66
    factor    go to state 67
    constant  go to state 68
    call      go to state 69
    pertExpr  go to state 70
    elem      go to state 72


State 40

   48 inExpr: READ . '(' var ')'

    '('  shift, and go to state 83


State 41

   49 outExpr: WRITE . '(' output ')'

    '('  shift, and go to state 84


State 42

   50 outExpr: WRITELN . '(' output ')'

    '('  shift, and go to state 85


State 43

   72 constant: INTEGER .

    RELOP   reduce using rule 72 (constant)
    ARTOP1  reduce using rule 72 (constant)
    ARTOP2  reduce using rule 72 (constant)
    IN      reduce using rule 72 (constant)
    DISJ    reduce using rule 72 (constant)
    CONJ    reduce using rule 72 (constant)
    ';'     reduce using rule 72 (constant)


State 44

   73 constant: FLOAT .

    RELOP   reduce using rule 73 (constant)
    ARTOP1  reduce using rule 73 (constant)
    ARTOP2  reduce using rule 73 (constant)
    IN      reduce using rule 73 (constant)
    DISJ    reduce using rule 73 (constant)
    CONJ    reduce using rule 73 (constant)
    ';'     reduce using rule 73 (constant)


State 45

   74 constant: EMPTY .

    RELOP   reduce using rule 74 (constant)
    ARTOP1  reduce using rule 74 (constant)
    ARTOP2  reduce using rule 74 (constant)
    IN      reduce using rule 74 (constant)
    DISJ    reduce using rule 74 (constant)
    CONJ    reduce using rule 74 (constant)
    ';'     reduce using rule 74 (constant)


State 46

   39 exprStmt: ';' .

    error    reduce using rule 39 (exprStmt)
    TYPE     reduce using rule 39 (exprStmt)
    SETOP    reduce using rule 39 (exprStmt)
    ID       reduce using rule 39 (exprStmt)
    IF       reduce using rule 39 (exprStmt)
    FOR      reduce using rule 39 (exprStmt)
    RETURN   reduce using rule 39 (exprStmt)
    FORALL   reduce using rule 39 (exprStmt)
    IS_SET   reduce using rule 39 (exprStmt)
    EXISTS   reduce using rule 39 (exprStmt)
    NEG      reduce using rule 39 (exprStmt)
    READ     reduce using rule 39 (exprStmt)
    WRITE    reduce using rule 39 (exprStmt)
    WRITELN  reduce using rule 39 (exprStmt)
    INTEGER  reduce using rule 39 (exprStmt)
    FLOAT    reduce using rule 39 (exprStmt)
    EMPTY    reduce using rule 39 (exprStmt)
    ';'      reduce using rule 39 (exprStmt)
    '('      reduce using rule 39 (exprStmt)
    '}'      reduce using rule 39 (exprStmt)


State 47

   67 factor: '(' . simpleExpr ')'
   84 elem: '(' . setExpr ')'
   86     | '(' . simpleExpr ')'

    SETOP    shift, and go to state 167
    ID       shift, and go to state 168
    IS_SET   shift, and go to state 169
    EXISTS   shift, and go to state 170
    NEG      shift, and go to state 171
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175

    var         go to state 176
    simpleExpr  go to state 86
    disjExpr    go to state 177
    negExpr     go to state 178
    relExpr     go to state 179
    artExpr1    go to state 180
    artExpr2    go to state 181
    factor      go to state 182
    constant    go to state 183
    call        go to state 184
    pertExpr    go to state 185
    setExpr     go to state 87
    elem        go to state 186


State 48

   11 funcDecl: TYPE new_id '(' arguments ')' '{' funcBody '}' .

    $end  reduce using rule 11 (funcDecl)
    TYPE  reduce using rule 11 (funcDecl)


State 49

   19 funcBody: funcBody varDecl .

    error    reduce using rule 19 (funcBody)
    TYPE     reduce using rule 19 (funcBody)
    SETOP    reduce using rule 19 (funcBody)
    ID       reduce using rule 19 (funcBody)
    IF       reduce using rule 19 (funcBody)
    FOR      reduce using rule 19 (funcBody)
    RETURN   reduce using rule 19 (funcBody)
    FORALL   reduce using rule 19 (funcBody)
    IS_SET   reduce using rule 19 (funcBody)
    EXISTS   reduce using rule 19 (funcBody)
    NEG      reduce using rule 19 (funcBody)
    READ     reduce using rule 19 (funcBody)
    WRITE    reduce using rule 19 (funcBody)
    WRITELN  reduce using rule 19 (funcBody)
    INTEGER  reduce using rule 19 (funcBody)
    FLOAT    reduce using rule 19 (funcBody)
    EMPTY    reduce using rule 19 (funcBody)
    ';'      reduce using rule 19 (funcBody)
    '('      reduce using rule 19 (funcBody)
    '}'      reduce using rule 19 (funcBody)


State 50

   20 funcBody: funcBody funcDecl .

    error    reduce using rule 20 (funcBody)
    TYPE     reduce using rule 20 (funcBody)
    SETOP    reduce using rule 20 (funcBody)
    ID       reduce using rule 20 (funcBody)
    IF       reduce using rule 20 (funcBody)
    FOR      reduce using rule 20 (funcBody)
    RETURN   reduce using rule 20 (funcBody)
    FORALL   reduce using rule 20 (funcBody)
    IS_SET   reduce using rule 20 (funcBody)
    EXISTS   reduce using rule 20 (funcBody)
    NEG      reduce using rule 20 (funcBody)
    READ     reduce using rule 20 (funcBody)
    WRITE    reduce using rule 20 (funcBody)
    WRITELN  reduce using rule 20 (funcBody)
    INTEGER  reduce using rule 20 (funcBody)
    FLOAT    reduce using rule 20 (funcBody)
    EMPTY    reduce using rule 20 (funcBody)
    ';'      reduce using rule 20 (funcBody)
    '('      reduce using rule 20 (funcBody)
    '}'      reduce using rule 20 (funcBody)


State 51

   21 funcBody: funcBody stmt .

    error    reduce using rule 21 (funcBody)
    TYPE     reduce using rule 21 (funcBody)
    SETOP    reduce using rule 21 (funcBody)
    ID       reduce using rule 21 (funcBody)
    IF       reduce using rule 21 (funcBody)
    FOR      reduce using rule 21 (funcBody)
    RETURN   reduce using rule 21 (funcBody)
    FORALL   reduce using rule 21 (funcBody)
    IS_SET   reduce using rule 21 (funcBody)
    EXISTS   reduce using rule 21 (funcBody)
    NEG      reduce using rule 21 (funcBody)
    READ     reduce using rule 21 (funcBody)
    WRITE    reduce using rule 21 (funcBody)
    WRITELN  reduce using rule 21 (funcBody)
    INTEGER  reduce using rule 21 (funcBody)
    FLOAT    reduce using rule 21 (funcBody)
    EMPTY    reduce using rule 21 (funcBody)
    ';'      reduce using rule 21 (funcBody)
    '('      reduce using rule 21 (funcBody)
    '}'      reduce using rule 21 (funcBody)


State 52

   24 stmt: iterStmt .

    error    reduce using rule 24 (stmt)
    TYPE     reduce using rule 24 (stmt)
    SETOP    reduce using rule 24 (stmt)
    ID       reduce using rule 24 (stmt)
    IF       reduce using rule 24 (stmt)
    FOR      reduce using rule 24 (stmt)
    RETURN   reduce using rule 24 (stmt)
    FORALL   reduce using rule 24 (stmt)
    IS_SET   reduce using rule 24 (stmt)
    EXISTS   reduce using rule 24 (stmt)
    NEG      reduce using rule 24 (stmt)
    READ     reduce using rule 24 (stmt)
    WRITE    reduce using rule 24 (stmt)
    WRITELN  reduce using rule 24 (stmt)
    INTEGER  reduce using rule 24 (stmt)
    FLOAT    reduce using rule 24 (stmt)
    EMPTY    reduce using rule 24 (stmt)
    ';'      reduce using rule 24 (stmt)
    '('      reduce using rule 24 (stmt)
    '}'      reduce using rule 24 (stmt)


State 53

   25 stmt: condStmt .

    error    reduce using rule 25 (stmt)
    TYPE     reduce using rule 25 (stmt)
    SETOP    reduce using rule 25 (stmt)
    ID       reduce using rule 25 (stmt)
    IF       reduce using rule 25 (stmt)
    FOR      reduce using rule 25 (stmt)
    RETURN   reduce using rule 25 (stmt)
    FORALL   reduce using rule 25 (stmt)
    IS_SET   reduce using rule 25 (stmt)
    EXISTS   reduce using rule 25 (stmt)
    NEG      reduce using rule 25 (stmt)
    READ     reduce using rule 25 (stmt)
    WRITE    reduce using rule 25 (stmt)
    WRITELN  reduce using rule 25 (stmt)
    INTEGER  reduce using rule 25 (stmt)
    FLOAT    reduce using rule 25 (stmt)
    EMPTY    reduce using rule 25 (stmt)
    ';'      reduce using rule 25 (stmt)
    '('      reduce using rule 25 (stmt)
    '}'      reduce using rule 25 (stmt)


State 54

   23 stmt: returnStmt .

    error    reduce using rule 23 (stmt)
    TYPE     reduce using rule 23 (stmt)
    SETOP    reduce using rule 23 (stmt)
    ID       reduce using rule 23 (stmt)
    IF       reduce using rule 23 (stmt)
    FOR      reduce using rule 23 (stmt)
    RETURN   reduce using rule 23 (stmt)
    FORALL   reduce using rule 23 (stmt)
    IS_SET   reduce using rule 23 (stmt)
    EXISTS   reduce using rule 23 (stmt)
    NEG      reduce using rule 23 (stmt)
    READ     reduce using rule 23 (stmt)
    WRITE    reduce using rule 23 (stmt)
    WRITELN  reduce using rule 23 (stmt)
    INTEGER  reduce using rule 23 (stmt)
    FLOAT    reduce using rule 23 (stmt)
    EMPTY    reduce using rule 23 (stmt)
    ';'      reduce using rule 23 (stmt)
    '('      reduce using rule 23 (stmt)
    '}'      reduce using rule 23 (stmt)


State 55

   22 stmt: exprStmt .

    error    reduce using rule 22 (stmt)
    TYPE     reduce using rule 22 (stmt)
    SETOP    reduce using rule 22 (stmt)
    ID       reduce using rule 22 (stmt)
    IF       reduce using rule 22 (stmt)
    FOR      reduce using rule 22 (stmt)
    RETURN   reduce using rule 22 (stmt)
    FORALL   reduce using rule 22 (stmt)
    IS_SET   reduce using rule 22 (stmt)
    EXISTS   reduce using rule 22 (stmt)
    NEG      reduce using rule 22 (stmt)
    READ     reduce using rule 22 (stmt)
    WRITE    reduce using rule 22 (stmt)
    WRITELN  reduce using rule 22 (stmt)
    INTEGER  reduce using rule 22 (stmt)
    FLOAT    reduce using rule 22 (stmt)
    EMPTY    reduce using rule 22 (stmt)
    ';'      reduce using rule 22 (stmt)
    '('      reduce using rule 22 (stmt)
    '}'      reduce using rule 22 (stmt)


State 56

   38 exprStmt: expression . ';'

    ';'  shift, and go to state 88


State 57

   41 expression: assign .

    ';'  reduce using rule 41 (expression)


State 58

   46 assign: var . '=' simpleExpr
   75 call: var . '(' params ')'

    '('  shift, and go to state 89
    '='  shift, and go to state 90


State 59

   42 expression: inExpr .

    ';'  reduce using rule 42 (expression)


State 60

   43 expression: outExpr .

    ';'  reduce using rule 43 (expression)


State 61

   44 expression: simpleExpr .
   54 simpleExpr: simpleExpr . DISJ disjExpr

    DISJ  shift, and go to state 91

    ';'  reduce using rule 44 (expression)


State 62

   55 simpleExpr: disjExpr .
   56 disjExpr: disjExpr . CONJ negExpr

    CONJ  shift, and go to state 92

    DISJ  reduce using rule 55 (simpleExpr)
    ';'   reduce using rule 55 (simpleExpr)


State 63

   57 disjExpr: negExpr .

    DISJ  reduce using rule 57 (disjExpr)
    CONJ  reduce using rule 57 (disjExpr)
    ';'   reduce using rule 57 (disjExpr)


State 64

   59 negExpr: relExpr .
   60 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 93

    DISJ  reduce using rule 59 (negExpr)
    CONJ  reduce using rule 59 (negExpr)
    ';'   reduce using rule 59 (negExpr)


State 65

   61 relExpr: artExpr1 .
   62 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 94

    RELOP  reduce using rule 61 (relExpr)
    DISJ   reduce using rule 61 (relExpr)
    CONJ   reduce using rule 61 (relExpr)
    ';'    reduce using rule 61 (relExpr)


State 66

   63 artExpr1: artExpr2 .
   64 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 95

    RELOP   reduce using rule 63 (artExpr1)
    ARTOP1  reduce using rule 63 (artExpr1)
    DISJ    reduce using rule 63 (artExpr1)
    CONJ    reduce using rule 63 (artExpr1)
    ';'     reduce using rule 63 (artExpr1)


State 67

   65 artExpr2: factor .

    RELOP   reduce using rule 65 (artExpr2)
    ARTOP1  reduce using rule 65 (artExpr2)
    ARTOP2  reduce using rule 65 (artExpr2)
    DISJ    reduce using rule 65 (artExpr2)
    CONJ    reduce using rule 65 (artExpr2)
    ';'     reduce using rule 65 (artExpr2)


State 68

   68 factor: constant .
   87 elem: constant .

    RELOP   reduce using rule 68 (factor)
    ARTOP1  reduce using rule 68 (factor)
    ARTOP2  reduce using rule 68 (factor)
    IN      reduce using rule 87 (elem)
    DISJ    reduce using rule 68 (factor)
    CONJ    reduce using rule 68 (factor)
    ';'     reduce using rule 68 (factor)


State 69

   69 factor: call .
   85 elem: call .

    RELOP   reduce using rule 69 (factor)
    ARTOP1  reduce using rule 69 (factor)
    ARTOP2  reduce using rule 69 (factor)
    IN      reduce using rule 85 (elem)
    DISJ    reduce using rule 69 (factor)
    CONJ    reduce using rule 69 (factor)
    ';'     reduce using rule 69 (factor)


State 70

   71 factor: pertExpr .

    RELOP   reduce using rule 71 (factor)
    ARTOP1  reduce using rule 71 (factor)
    ARTOP2  reduce using rule 71 (factor)
    DISJ    reduce using rule 71 (factor)
    CONJ    reduce using rule 71 (factor)
    ';'     reduce using rule 71 (factor)


State 71

   45 expression: setExpr .

    ';'  reduce using rule 45 (expression)


State 72

   80 pertExpr: elem . IN set

    IN  shift, and go to state 96


State 73

   40 exprStmt: error ';' .

    error    reduce using rule 40 (exprStmt)
    TYPE     reduce using rule 40 (exprStmt)
    SETOP    reduce using rule 40 (exprStmt)
    ID       reduce using rule 40 (exprStmt)
    IF       reduce using rule 40 (exprStmt)
    FOR      reduce using rule 40 (exprStmt)
    RETURN   reduce using rule 40 (exprStmt)
    FORALL   reduce using rule 40 (exprStmt)
    IS_SET   reduce using rule 40 (exprStmt)
    EXISTS   reduce using rule 40 (exprStmt)
    NEG      reduce using rule 40 (exprStmt)
    READ     reduce using rule 40 (exprStmt)
    WRITE    reduce using rule 40 (exprStmt)
    WRITELN  reduce using rule 40 (exprStmt)
    INTEGER  reduce using rule 40 (exprStmt)
    FLOAT    reduce using rule 40 (exprStmt)
    EMPTY    reduce using rule 40 (exprStmt)
    ';'      reduce using rule 40 (exprStmt)
    '('      reduce using rule 40 (exprStmt)
    '}'      reduce using rule 40 (exprStmt)


State 74

   81 setExpr: SETOP '(' . pertExpr ')'

    ID       shift, and go to state 97
    INTEGER  shift, and go to state 187
    FLOAT    shift, and go to state 188
    EMPTY    shift, and go to state 189
    '('      shift, and go to state 98

    var       go to state 190
    constant  go to state 99
    call      go to state 100
    pertExpr  go to state 101
    elem      go to state 191


State 75

   35 condStmt: IF '(' . expression ')' body
   36         | IF '(' . expression ')' body ELSE body

    SETOP    shift, and go to state 167
    ID       shift, and go to state 192
    IS_SET   shift, and go to state 169
    EXISTS   shift, and go to state 170
    NEG      shift, and go to state 171
    READ     shift, and go to state 193
    WRITE    shift, and go to state 194
    WRITELN  shift, and go to state 195
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175

    expression  go to state 102
    assign      go to state 196
    var         go to state 197
    inExpr      go to state 198
    outExpr     go to state 199
    simpleExpr  go to state 200
    disjExpr    go to state 177
    negExpr     go to state 178
    relExpr     go to state 179
    artExpr1    go to state 180
    artExpr2    go to state 181
    factor      go to state 182
    constant    go to state 183
    call        go to state 184
    pertExpr    go to state 185
    setExpr     go to state 201
    elem        go to state 186


State 76

   26 iterStmt: FOR '(' . exprStmt exprStmt ')' body
   27         | FOR '(' . exprStmt exprStmt expression ')' body
   30         | FOR '(' . error ')'

    error    shift, and go to state 103
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 202
    '('      shift, and go to state 47

    exprStmt    go to state 104
    expression  go to state 203
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 77

   37 returnStmt: RETURN exprStmt .

    error    reduce using rule 37 (returnStmt)
    TYPE     reduce using rule 37 (returnStmt)
    SETOP    reduce using rule 37 (returnStmt)
    ID       reduce using rule 37 (returnStmt)
    IF       reduce using rule 37 (returnStmt)
    FOR      reduce using rule 37 (returnStmt)
    RETURN   reduce using rule 37 (returnStmt)
    FORALL   reduce using rule 37 (returnStmt)
    IS_SET   reduce using rule 37 (returnStmt)
    EXISTS   reduce using rule 37 (returnStmt)
    NEG      reduce using rule 37 (returnStmt)
    READ     reduce using rule 37 (returnStmt)
    WRITE    reduce using rule 37 (returnStmt)
    WRITELN  reduce using rule 37 (returnStmt)
    INTEGER  reduce using rule 37 (returnStmt)
    FLOAT    reduce using rule 37 (returnStmt)
    EMPTY    reduce using rule 37 (returnStmt)
    ';'      reduce using rule 37 (returnStmt)
    '('      reduce using rule 37 (returnStmt)
    '}'      reduce using rule 37 (returnStmt)


State 78

   28 iterStmt: FORALL '(' . pertExpr ')' body
   29         | FORALL '(' . error ')'

    error    shift, and go to state 105
    ID       shift, and go to state 97
    INTEGER  shift, and go to state 187
    FLOAT    shift, and go to state 188
    EMPTY    shift, and go to state 189
    '('      shift, and go to state 98

    var       go to state 190
    constant  go to state 99
    call      go to state 100
    pertExpr  go to state 106
    elem      go to state 191


State 79

   70 factor: IS_SET '(' . var ')'

    ID  shift, and go to state 107

    var  go to state 108


State 80

   82 setExpr: EXISTS '(' . pertExpr ')'

    ID       shift, and go to state 97
    INTEGER  shift, and go to state 187
    FLOAT    shift, and go to state 188
    EMPTY    shift, and go to state 189
    '('      shift, and go to state 98

    var       go to state 190
    constant  go to state 99
    call      go to state 100
    pertExpr  go to state 109
    elem      go to state 191


State 81

   75 call: var . '(' params ')'

    '('  shift, and go to state 89


State 82

   58 negExpr: NEG negExpr .

    DISJ  reduce using rule 58 (negExpr)
    CONJ  reduce using rule 58 (negExpr)
    ';'   reduce using rule 58 (negExpr)


State 83

   48 inExpr: READ '(' . var ')'

    ID  shift, and go to state 107

    var  go to state 110


State 84

   49 outExpr: WRITE '(' . output ')'

    ID      shift, and go to state 111
    CHAR    shift, and go to state 112
    STRING  shift, and go to state 113

    output  go to state 114


State 85

   50 outExpr: WRITELN '(' . output ')'

    ID      shift, and go to state 111
    CHAR    shift, and go to state 112
    STRING  shift, and go to state 113

    output  go to state 115


State 86

   54 simpleExpr: simpleExpr . DISJ disjExpr
   67 factor: '(' simpleExpr . ')'
   86 elem: '(' simpleExpr . ')'

    DISJ  shift, and go to state 204
    ')'   shift, and go to state 116


State 87

   84 elem: '(' setExpr . ')'

    ')'  shift, and go to state 117


State 88

   38 exprStmt: expression ';' .

    error    reduce using rule 38 (exprStmt)
    TYPE     reduce using rule 38 (exprStmt)
    SETOP    reduce using rule 38 (exprStmt)
    ID       reduce using rule 38 (exprStmt)
    IF       reduce using rule 38 (exprStmt)
    FOR      reduce using rule 38 (exprStmt)
    RETURN   reduce using rule 38 (exprStmt)
    FORALL   reduce using rule 38 (exprStmt)
    IS_SET   reduce using rule 38 (exprStmt)
    EXISTS   reduce using rule 38 (exprStmt)
    NEG      reduce using rule 38 (exprStmt)
    READ     reduce using rule 38 (exprStmt)
    WRITE    reduce using rule 38 (exprStmt)
    WRITELN  reduce using rule 38 (exprStmt)
    INTEGER  reduce using rule 38 (exprStmt)
    FLOAT    reduce using rule 38 (exprStmt)
    EMPTY    reduce using rule 38 (exprStmt)
    ';'      reduce using rule 38 (exprStmt)
    '('      reduce using rule 38 (exprStmt)
    '}'      reduce using rule 38 (exprStmt)


State 89

   75 call: var '(' . params ')'

    ID       shift, and go to state 205
    IS_SET   shift, and go to state 206
    NEG      shift, and go to state 207
    INTEGER  shift, and go to state 208
    FLOAT    shift, and go to state 209
    EMPTY    shift, and go to state 210
    '('      shift, and go to state 211

    ')'  reduce using rule 76 (params)

    var         go to state 212
    simpleExpr  go to state 118
    disjExpr    go to state 213
    negExpr     go to state 214
    relExpr     go to state 215
    artExpr1    go to state 216
    artExpr2    go to state 217
    factor      go to state 218
    constant    go to state 219
    call        go to state 220
    params      go to state 119
    paramList   go to state 120
    pertExpr    go to state 221
    elem        go to state 222


State 90

   46 assign: var '=' . simpleExpr

    ID       shift, and go to state 166
    IS_SET   shift, and go to state 37
    NEG      shift, and go to state 39
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    '('      shift, and go to state 47

    var         go to state 81
    simpleExpr  go to state 121
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    elem        go to state 72


State 91

   54 simpleExpr: simpleExpr DISJ . disjExpr

    ID       shift, and go to state 166
    IS_SET   shift, and go to state 37
    NEG      shift, and go to state 39
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    '('      shift, and go to state 47

    var       go to state 81
    disjExpr  go to state 122
    negExpr   go to state 63
    relExpr   go to state 64
    artExpr1  go to state 65
    artExpr2  go to state 66
    factor    go to state 67
    constant  go to state 68
    call      go to state 69
    pertExpr  go to state 70
    elem      go to state 72


State 92

   56 disjExpr: disjExpr CONJ . negExpr

    ID       shift, and go to state 166
    IS_SET   shift, and go to state 37
    NEG      shift, and go to state 39
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    '('      shift, and go to state 47

    var       go to state 81
    negExpr   go to state 123
    relExpr   go to state 64
    artExpr1  go to state 65
    artExpr2  go to state 66
    factor    go to state 67
    constant  go to state 68
    call      go to state 69
    pertExpr  go to state 70
    elem      go to state 72


State 93

   60 relExpr: relExpr RELOP . artExpr1

    ID       shift, and go to state 166
    IS_SET   shift, and go to state 37
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    '('      shift, and go to state 47

    var       go to state 81
    artExpr1  go to state 124
    artExpr2  go to state 66
    factor    go to state 67
    constant  go to state 68
    call      go to state 69
    pertExpr  go to state 70
    elem      go to state 72


State 94

   62 artExpr1: artExpr1 ARTOP1 . artExpr2

    ID       shift, and go to state 166
    IS_SET   shift, and go to state 37
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    '('      shift, and go to state 47

    var       go to state 81
    artExpr2  go to state 125
    factor    go to state 67
    constant  go to state 68
    call      go to state 69
    pertExpr  go to state 70
    elem      go to state 72


State 95

   64 artExpr2: artExpr2 ARTOP2 . factor

    ID       shift, and go to state 166
    IS_SET   shift, and go to state 37
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    '('      shift, and go to state 47

    var       go to state 81
    factor    go to state 126
    constant  go to state 68
    call      go to state 69
    pertExpr  go to state 70
    elem      go to state 72


State 96

   80 pertExpr: elem IN . set

    SETOP  shift, and go to state 127
    ID     shift, and go to state 128

    set  go to state 129


State 97

   47 var: ID .
   83 elem: ID .

    IN   reduce using rule 83 (elem)
    '('  reduce using rule 47 (var)


State 98

   84 elem: '(' . setExpr ')'
   86     | '(' . simpleExpr ')'

    SETOP    shift, and go to state 167
    ID       shift, and go to state 168
    IS_SET   shift, and go to state 169
    EXISTS   shift, and go to state 170
    NEG      shift, and go to state 171
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175

    var         go to state 176
    simpleExpr  go to state 130
    disjExpr    go to state 177
    negExpr     go to state 178
    relExpr     go to state 179
    artExpr1    go to state 180
    artExpr2    go to state 181
    factor      go to state 182
    constant    go to state 183
    call        go to state 184
    pertExpr    go to state 185
    setExpr     go to state 87
    elem        go to state 186


State 99

   87 elem: constant .

    IN  reduce using rule 87 (elem)


State 100

   85 elem: call .

    IN  reduce using rule 85 (elem)


State 101

   81 setExpr: SETOP '(' pertExpr . ')'

    ')'  shift, and go to state 131


State 102

   35 condStmt: IF '(' expression . ')' body
   36         | IF '(' expression . ')' body ELSE body

    ')'  shift, and go to state 132


State 103

   30 iterStmt: FOR '(' error . ')'
   40 exprStmt: error . ';'

    ';'  shift, and go to state 223
    ')'  shift, and go to state 133


State 104

   26 iterStmt: FOR '(' exprStmt . exprStmt ')' body
   27         | FOR '(' exprStmt . exprStmt expression ')' body

    error    shift, and go to state 224
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 225
    '('      shift, and go to state 47

    exprStmt    go to state 134
    expression  go to state 226
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 105

   29 iterStmt: FORALL '(' error . ')'

    ')'  shift, and go to state 135


State 106

   28 iterStmt: FORALL '(' pertExpr . ')' body

    ')'  shift, and go to state 136


State 107

   47 var: ID .

    ')'  reduce using rule 47 (var)


State 108

   70 factor: IS_SET '(' var . ')'

    ')'  shift, and go to state 137


State 109

   82 setExpr: EXISTS '(' pertExpr . ')'

    ')'  shift, and go to state 138


State 110

   48 inExpr: READ '(' var . ')'

    ')'  shift, and go to state 139


State 111

   51 output: ID .

    ')'  reduce using rule 51 (output)


State 112

   52 output: CHAR .

    ')'  reduce using rule 52 (output)


State 113

   53 output: STRING .

    ')'  reduce using rule 53 (output)


State 114

   49 outExpr: WRITE '(' output . ')'

    ')'  shift, and go to state 140


State 115

   50 outExpr: WRITELN '(' output . ')'

    ')'  shift, and go to state 141


State 116

   67 factor: '(' simpleExpr ')' .
   86 elem: '(' simpleExpr ')' .

    RELOP   reduce using rule 67 (factor)
    ARTOP1  reduce using rule 67 (factor)
    ARTOP2  reduce using rule 67 (factor)
    IN      reduce using rule 86 (elem)
    DISJ    reduce using rule 67 (factor)
    CONJ    reduce using rule 67 (factor)
    ';'     reduce using rule 67 (factor)


State 117

   84 elem: '(' setExpr ')' .

    IN  reduce using rule 84 (elem)


State 118

   54 simpleExpr: simpleExpr . DISJ disjExpr
   79 paramList: simpleExpr .

    DISJ  shift, and go to state 227

    ','  reduce using rule 79 (paramList)
    ')'  reduce using rule 79 (paramList)


State 119

   75 call: var '(' params . ')'

    ')'  shift, and go to state 142


State 120

   77 params: paramList .
   78 paramList: paramList . ',' simpleExpr

    ','  shift, and go to state 143

    ')'  reduce using rule 77 (params)


State 121

   46 assign: var '=' simpleExpr .
   54 simpleExpr: simpleExpr . DISJ disjExpr

    DISJ  shift, and go to state 91

    ';'  reduce using rule 46 (assign)


State 122

   54 simpleExpr: simpleExpr DISJ disjExpr .
   56 disjExpr: disjExpr . CONJ negExpr

    CONJ  shift, and go to state 92

    DISJ  reduce using rule 54 (simpleExpr)
    ';'   reduce using rule 54 (simpleExpr)


State 123

   56 disjExpr: disjExpr CONJ negExpr .

    DISJ  reduce using rule 56 (disjExpr)
    CONJ  reduce using rule 56 (disjExpr)
    ';'   reduce using rule 56 (disjExpr)


State 124

   60 relExpr: relExpr RELOP artExpr1 .
   62 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 94

    RELOP  reduce using rule 60 (relExpr)
    DISJ   reduce using rule 60 (relExpr)
    CONJ   reduce using rule 60 (relExpr)
    ';'    reduce using rule 60 (relExpr)


State 125

   62 artExpr1: artExpr1 ARTOP1 artExpr2 .
   64 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 95

    RELOP   reduce using rule 62 (artExpr1)
    ARTOP1  reduce using rule 62 (artExpr1)
    DISJ    reduce using rule 62 (artExpr1)
    CONJ    reduce using rule 62 (artExpr1)
    ';'     reduce using rule 62 (artExpr1)


State 126

   64 artExpr2: artExpr2 ARTOP2 factor .

    RELOP   reduce using rule 64 (artExpr2)
    ARTOP1  reduce using rule 64 (artExpr2)
    ARTOP2  reduce using rule 64 (artExpr2)
    DISJ    reduce using rule 64 (artExpr2)
    CONJ    reduce using rule 64 (artExpr2)
    ';'     reduce using rule 64 (artExpr2)


State 127

   89 set: SETOP . '(' pertExpr ')'

    '('  shift, and go to state 144


State 128

   88 set: ID .

    RELOP   reduce using rule 88 (set)
    ARTOP1  reduce using rule 88 (set)
    ARTOP2  reduce using rule 88 (set)
    DISJ    reduce using rule 88 (set)
    CONJ    reduce using rule 88 (set)
    ';'     reduce using rule 88 (set)


State 129

   80 pertExpr: elem IN set .

    RELOP   reduce using rule 80 (pertExpr)
    ARTOP1  reduce using rule 80 (pertExpr)
    ARTOP2  reduce using rule 80 (pertExpr)
    DISJ    reduce using rule 80 (pertExpr)
    CONJ    reduce using rule 80 (pertExpr)
    ';'     reduce using rule 80 (pertExpr)


State 130

   54 simpleExpr: simpleExpr . DISJ disjExpr
   86 elem: '(' simpleExpr . ')'

    DISJ  shift, and go to state 204
    ')'   shift, and go to state 145


State 131

   81 setExpr: SETOP '(' pertExpr ')' .

    ';'  reduce using rule 81 (setExpr)


State 132

   35 condStmt: IF '(' expression ')' . body
   36         | IF '(' expression ')' . body ELSE body

    error    shift, and go to state 228
    TYPE     shift, and go to state 229
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 230
    FOR      shift, and go to state 231
    RETURN   shift, and go to state 232
    FORALL   shift, and go to state 233
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 234
    '('      shift, and go to state 47
    '{'      shift, and go to state 146

    varDecl     go to state 147
    funcDecl    go to state 148
    stmt        go to state 149
    iterStmt    go to state 235
    body        go to state 150
    condStmt    go to state 236
    returnStmt  go to state 237
    exprStmt    go to state 238
    expression  go to state 239
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 133

   30 iterStmt: FOR '(' error ')' .

    error    reduce using rule 30 (iterStmt)
    TYPE     reduce using rule 30 (iterStmt)
    SETOP    reduce using rule 30 (iterStmt)
    ID       reduce using rule 30 (iterStmt)
    IF       reduce using rule 30 (iterStmt)
    FOR      reduce using rule 30 (iterStmt)
    RETURN   reduce using rule 30 (iterStmt)
    FORALL   reduce using rule 30 (iterStmt)
    IS_SET   reduce using rule 30 (iterStmt)
    EXISTS   reduce using rule 30 (iterStmt)
    NEG      reduce using rule 30 (iterStmt)
    READ     reduce using rule 30 (iterStmt)
    WRITE    reduce using rule 30 (iterStmt)
    WRITELN  reduce using rule 30 (iterStmt)
    INTEGER  reduce using rule 30 (iterStmt)
    FLOAT    reduce using rule 30 (iterStmt)
    EMPTY    reduce using rule 30 (iterStmt)
    ';'      reduce using rule 30 (iterStmt)
    '('      reduce using rule 30 (iterStmt)
    '}'      reduce using rule 30 (iterStmt)


State 134

   26 iterStmt: FOR '(' exprStmt exprStmt . ')' body
   27         | FOR '(' exprStmt exprStmt . expression ')' body

    SETOP    shift, and go to state 167
    ID       shift, and go to state 192
    IS_SET   shift, and go to state 169
    EXISTS   shift, and go to state 170
    NEG      shift, and go to state 171
    READ     shift, and go to state 193
    WRITE    shift, and go to state 194
    WRITELN  shift, and go to state 195
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175
    ')'      shift, and go to state 151

    expression  go to state 152
    assign      go to state 196
    var         go to state 197
    inExpr      go to state 198
    outExpr     go to state 199
    simpleExpr  go to state 200
    disjExpr    go to state 177
    negExpr     go to state 178
    relExpr     go to state 179
    artExpr1    go to state 180
    artExpr2    go to state 181
    factor      go to state 182
    constant    go to state 183
    call        go to state 184
    pertExpr    go to state 185
    setExpr     go to state 201
    elem        go to state 186


State 135

   29 iterStmt: FORALL '(' error ')' .

    error    reduce using rule 29 (iterStmt)
    TYPE     reduce using rule 29 (iterStmt)
    SETOP    reduce using rule 29 (iterStmt)
    ID       reduce using rule 29 (iterStmt)
    IF       reduce using rule 29 (iterStmt)
    FOR      reduce using rule 29 (iterStmt)
    RETURN   reduce using rule 29 (iterStmt)
    FORALL   reduce using rule 29 (iterStmt)
    IS_SET   reduce using rule 29 (iterStmt)
    EXISTS   reduce using rule 29 (iterStmt)
    NEG      reduce using rule 29 (iterStmt)
    READ     reduce using rule 29 (iterStmt)
    WRITE    reduce using rule 29 (iterStmt)
    WRITELN  reduce using rule 29 (iterStmt)
    INTEGER  reduce using rule 29 (iterStmt)
    FLOAT    reduce using rule 29 (iterStmt)
    EMPTY    reduce using rule 29 (iterStmt)
    ';'      reduce using rule 29 (iterStmt)
    '('      reduce using rule 29 (iterStmt)
    '}'      reduce using rule 29 (iterStmt)


State 136

   28 iterStmt: FORALL '(' pertExpr ')' . body

    error    shift, and go to state 30
    TYPE     shift, and go to state 165
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 33
    FOR      shift, and go to state 34
    RETURN   shift, and go to state 35
    FORALL   shift, and go to state 36
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 46
    '('      shift, and go to state 47
    '{'      shift, and go to state 240

    varDecl     go to state 241
    funcDecl    go to state 242
    stmt        go to state 243
    iterStmt    go to state 52
    body        go to state 153
    condStmt    go to state 53
    returnStmt  go to state 54
    exprStmt    go to state 55
    expression  go to state 56
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 137

   70 factor: IS_SET '(' var ')' .

    RELOP   reduce using rule 70 (factor)
    ARTOP1  reduce using rule 70 (factor)
    ARTOP2  reduce using rule 70 (factor)
    DISJ    reduce using rule 70 (factor)
    CONJ    reduce using rule 70 (factor)
    ';'     reduce using rule 70 (factor)


State 138

   82 setExpr: EXISTS '(' pertExpr ')' .

    ';'  reduce using rule 82 (setExpr)


State 139

   48 inExpr: READ '(' var ')' .

    ';'  reduce using rule 48 (inExpr)


State 140

   49 outExpr: WRITE '(' output ')' .

    ';'  reduce using rule 49 (outExpr)


State 141

   50 outExpr: WRITELN '(' output ')' .

    ';'  reduce using rule 50 (outExpr)


State 142

   75 call: var '(' params ')' .

    RELOP   reduce using rule 75 (call)
    ARTOP1  reduce using rule 75 (call)
    ARTOP2  reduce using rule 75 (call)
    IN      reduce using rule 75 (call)
    DISJ    reduce using rule 75 (call)
    CONJ    reduce using rule 75 (call)
    ';'     reduce using rule 75 (call)


State 143

   78 paramList: paramList ',' . simpleExpr

    ID       shift, and go to state 205
    IS_SET   shift, and go to state 206
    NEG      shift, and go to state 207
    INTEGER  shift, and go to state 208
    FLOAT    shift, and go to state 209
    EMPTY    shift, and go to state 210
    '('      shift, and go to state 211

    var         go to state 212
    simpleExpr  go to state 154
    disjExpr    go to state 213
    negExpr     go to state 214
    relExpr     go to state 215
    artExpr1    go to state 216
    artExpr2    go to state 217
    factor      go to state 218
    constant    go to state 219
    call        go to state 220
    pertExpr    go to state 221
    elem        go to state 222


State 144

   89 set: SETOP '(' . pertExpr ')'

    ID       shift, and go to state 97
    INTEGER  shift, and go to state 187
    FLOAT    shift, and go to state 188
    EMPTY    shift, and go to state 189
    '('      shift, and go to state 98

    var       go to state 190
    constant  go to state 99
    call      go to state 100
    pertExpr  go to state 155
    elem      go to state 191


State 145

   86 elem: '(' simpleExpr ')' .

    IN  reduce using rule 86 (elem)


State 146

   31 body: '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)

    funcBody  go to state 156


State 147

   33 body: varDecl .

    error    reduce using rule 33 (body)
    TYPE     reduce using rule 33 (body)
    SETOP    reduce using rule 33 (body)
    ID       reduce using rule 33 (body)
    IF       reduce using rule 33 (body)
    ELSE     reduce using rule 33 (body)
    FOR      reduce using rule 33 (body)
    RETURN   reduce using rule 33 (body)
    FORALL   reduce using rule 33 (body)
    IS_SET   reduce using rule 33 (body)
    EXISTS   reduce using rule 33 (body)
    NEG      reduce using rule 33 (body)
    READ     reduce using rule 33 (body)
    WRITE    reduce using rule 33 (body)
    WRITELN  reduce using rule 33 (body)
    INTEGER  reduce using rule 33 (body)
    FLOAT    reduce using rule 33 (body)
    EMPTY    reduce using rule 33 (body)
    ';'      reduce using rule 33 (body)
    '('      reduce using rule 33 (body)
    '}'      reduce using rule 33 (body)


State 148

   34 body: funcDecl .

    error    reduce using rule 34 (body)
    TYPE     reduce using rule 34 (body)
    SETOP    reduce using rule 34 (body)
    ID       reduce using rule 34 (body)
    IF       reduce using rule 34 (body)
    ELSE     reduce using rule 34 (body)
    FOR      reduce using rule 34 (body)
    RETURN   reduce using rule 34 (body)
    FORALL   reduce using rule 34 (body)
    IS_SET   reduce using rule 34 (body)
    EXISTS   reduce using rule 34 (body)
    NEG      reduce using rule 34 (body)
    READ     reduce using rule 34 (body)
    WRITE    reduce using rule 34 (body)
    WRITELN  reduce using rule 34 (body)
    INTEGER  reduce using rule 34 (body)
    FLOAT    reduce using rule 34 (body)
    EMPTY    reduce using rule 34 (body)
    ';'      reduce using rule 34 (body)
    '('      reduce using rule 34 (body)
    '}'      reduce using rule 34 (body)


State 149

   32 body: stmt .

    error    reduce using rule 32 (body)
    TYPE     reduce using rule 32 (body)
    SETOP    reduce using rule 32 (body)
    ID       reduce using rule 32 (body)
    IF       reduce using rule 32 (body)
    ELSE     reduce using rule 32 (body)
    FOR      reduce using rule 32 (body)
    RETURN   reduce using rule 32 (body)
    FORALL   reduce using rule 32 (body)
    IS_SET   reduce using rule 32 (body)
    EXISTS   reduce using rule 32 (body)
    NEG      reduce using rule 32 (body)
    READ     reduce using rule 32 (body)
    WRITE    reduce using rule 32 (body)
    WRITELN  reduce using rule 32 (body)
    INTEGER  reduce using rule 32 (body)
    FLOAT    reduce using rule 32 (body)
    EMPTY    reduce using rule 32 (body)
    ';'      reduce using rule 32 (body)
    '('      reduce using rule 32 (body)
    '}'      reduce using rule 32 (body)


State 150

   35 condStmt: IF '(' expression ')' body .
   36         | IF '(' expression ')' body . ELSE body

    ELSE  shift, and go to state 157

    error    reduce using rule 35 (condStmt)
    TYPE     reduce using rule 35 (condStmt)
    SETOP    reduce using rule 35 (condStmt)
    ID       reduce using rule 35 (condStmt)
    IF       reduce using rule 35 (condStmt)
    FOR      reduce using rule 35 (condStmt)
    RETURN   reduce using rule 35 (condStmt)
    FORALL   reduce using rule 35 (condStmt)
    IS_SET   reduce using rule 35 (condStmt)
    EXISTS   reduce using rule 35 (condStmt)
    NEG      reduce using rule 35 (condStmt)
    READ     reduce using rule 35 (condStmt)
    WRITE    reduce using rule 35 (condStmt)
    WRITELN  reduce using rule 35 (condStmt)
    INTEGER  reduce using rule 35 (condStmt)
    FLOAT    reduce using rule 35 (condStmt)
    EMPTY    reduce using rule 35 (condStmt)
    ';'      reduce using rule 35 (condStmt)
    '('      reduce using rule 35 (condStmt)
    '}'      reduce using rule 35 (condStmt)


State 151

   26 iterStmt: FOR '(' exprStmt exprStmt ')' . body

    error    shift, and go to state 30
    TYPE     shift, and go to state 165
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 33
    FOR      shift, and go to state 34
    RETURN   shift, and go to state 35
    FORALL   shift, and go to state 36
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 46
    '('      shift, and go to state 47
    '{'      shift, and go to state 240

    varDecl     go to state 241
    funcDecl    go to state 242
    stmt        go to state 243
    iterStmt    go to state 52
    body        go to state 158
    condStmt    go to state 53
    returnStmt  go to state 54
    exprStmt    go to state 55
    expression  go to state 56
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 152

   27 iterStmt: FOR '(' exprStmt exprStmt expression . ')' body

    ')'  shift, and go to state 159


State 153

   28 iterStmt: FORALL '(' pertExpr ')' body .

    error    reduce using rule 28 (iterStmt)
    TYPE     reduce using rule 28 (iterStmt)
    SETOP    reduce using rule 28 (iterStmt)
    ID       reduce using rule 28 (iterStmt)
    IF       reduce using rule 28 (iterStmt)
    FOR      reduce using rule 28 (iterStmt)
    RETURN   reduce using rule 28 (iterStmt)
    FORALL   reduce using rule 28 (iterStmt)
    IS_SET   reduce using rule 28 (iterStmt)
    EXISTS   reduce using rule 28 (iterStmt)
    NEG      reduce using rule 28 (iterStmt)
    READ     reduce using rule 28 (iterStmt)
    WRITE    reduce using rule 28 (iterStmt)
    WRITELN  reduce using rule 28 (iterStmt)
    INTEGER  reduce using rule 28 (iterStmt)
    FLOAT    reduce using rule 28 (iterStmt)
    EMPTY    reduce using rule 28 (iterStmt)
    ';'      reduce using rule 28 (iterStmt)
    '('      reduce using rule 28 (iterStmt)
    '}'      reduce using rule 28 (iterStmt)


State 154

   54 simpleExpr: simpleExpr . DISJ disjExpr
   78 paramList: paramList ',' simpleExpr .

    DISJ  shift, and go to state 227

    ','  reduce using rule 78 (paramList)
    ')'  reduce using rule 78 (paramList)


State 155

   89 set: SETOP '(' pertExpr . ')'

    ')'  shift, and go to state 160


State 156

   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt
   31 body: '{' funcBody . '}'

    error    shift, and go to state 30
    TYPE     shift, and go to state 165
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 33
    FOR      shift, and go to state 34
    RETURN   shift, and go to state 35
    FORALL   shift, and go to state 36
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 46
    '('      shift, and go to state 47
    '}'      shift, and go to state 161

    varDecl     go to state 49
    funcDecl    go to state 50
    stmt        go to state 51
    iterStmt    go to state 52
    condStmt    go to state 53
    returnStmt  go to state 54
    exprStmt    go to state 55
    expression  go to state 56
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 157

   36 condStmt: IF '(' expression ')' body ELSE . body

    error    shift, and go to state 30
    TYPE     shift, and go to state 165
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 33
    FOR      shift, and go to state 34
    RETURN   shift, and go to state 35
    FORALL   shift, and go to state 36
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 46
    '('      shift, and go to state 47
    '{'      shift, and go to state 240

    varDecl     go to state 241
    funcDecl    go to state 242
    stmt        go to state 243
    iterStmt    go to state 52
    body        go to state 162
    condStmt    go to state 53
    returnStmt  go to state 54
    exprStmt    go to state 55
    expression  go to state 56
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 158

   26 iterStmt: FOR '(' exprStmt exprStmt ')' body .

    error    reduce using rule 26 (iterStmt)
    TYPE     reduce using rule 26 (iterStmt)
    SETOP    reduce using rule 26 (iterStmt)
    ID       reduce using rule 26 (iterStmt)
    IF       reduce using rule 26 (iterStmt)
    FOR      reduce using rule 26 (iterStmt)
    RETURN   reduce using rule 26 (iterStmt)
    FORALL   reduce using rule 26 (iterStmt)
    IS_SET   reduce using rule 26 (iterStmt)
    EXISTS   reduce using rule 26 (iterStmt)
    NEG      reduce using rule 26 (iterStmt)
    READ     reduce using rule 26 (iterStmt)
    WRITE    reduce using rule 26 (iterStmt)
    WRITELN  reduce using rule 26 (iterStmt)
    INTEGER  reduce using rule 26 (iterStmt)
    FLOAT    reduce using rule 26 (iterStmt)
    EMPTY    reduce using rule 26 (iterStmt)
    ';'      reduce using rule 26 (iterStmt)
    '('      reduce using rule 26 (iterStmt)
    '}'      reduce using rule 26 (iterStmt)


State 159

   27 iterStmt: FOR '(' exprStmt exprStmt expression ')' . body

    error    shift, and go to state 30
    TYPE     shift, and go to state 165
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 33
    FOR      shift, and go to state 34
    RETURN   shift, and go to state 35
    FORALL   shift, and go to state 36
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 46
    '('      shift, and go to state 47
    '{'      shift, and go to state 240

    varDecl     go to state 241
    funcDecl    go to state 242
    stmt        go to state 243
    iterStmt    go to state 52
    body        go to state 163
    condStmt    go to state 53
    returnStmt  go to state 54
    exprStmt    go to state 55
    expression  go to state 56
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 160

   89 set: SETOP '(' pertExpr ')' .

    RELOP   reduce using rule 89 (set)
    ARTOP1  reduce using rule 89 (set)
    ARTOP2  reduce using rule 89 (set)
    DISJ    reduce using rule 89 (set)
    CONJ    reduce using rule 89 (set)
    ';'     reduce using rule 89 (set)


State 161

   31 body: '{' funcBody '}' .

    error    reduce using rule 31 (body)
    TYPE     reduce using rule 31 (body)
    SETOP    reduce using rule 31 (body)
    ID       reduce using rule 31 (body)
    IF       reduce using rule 31 (body)
    ELSE     reduce using rule 31 (body)
    FOR      reduce using rule 31 (body)
    RETURN   reduce using rule 31 (body)
    FORALL   reduce using rule 31 (body)
    IS_SET   reduce using rule 31 (body)
    EXISTS   reduce using rule 31 (body)
    NEG      reduce using rule 31 (body)
    READ     reduce using rule 31 (body)
    WRITE    reduce using rule 31 (body)
    WRITELN  reduce using rule 31 (body)
    INTEGER  reduce using rule 31 (body)
    FLOAT    reduce using rule 31 (body)
    EMPTY    reduce using rule 31 (body)
    ';'      reduce using rule 31 (body)
    '('      reduce using rule 31 (body)
    '}'      reduce using rule 31 (body)


State 162

   36 condStmt: IF '(' expression ')' body ELSE body .

    error    reduce using rule 36 (condStmt)
    TYPE     reduce using rule 36 (condStmt)
    SETOP    reduce using rule 36 (condStmt)
    ID       reduce using rule 36 (condStmt)
    IF       reduce using rule 36 (condStmt)
    FOR      reduce using rule 36 (condStmt)
    RETURN   reduce using rule 36 (condStmt)
    FORALL   reduce using rule 36 (condStmt)
    IS_SET   reduce using rule 36 (condStmt)
    EXISTS   reduce using rule 36 (condStmt)
    NEG      reduce using rule 36 (condStmt)
    READ     reduce using rule 36 (condStmt)
    WRITE    reduce using rule 36 (condStmt)
    WRITELN  reduce using rule 36 (condStmt)
    INTEGER  reduce using rule 36 (condStmt)
    FLOAT    reduce using rule 36 (condStmt)
    EMPTY    reduce using rule 36 (condStmt)
    ';'      reduce using rule 36 (condStmt)
    '('      reduce using rule 36 (condStmt)
    '}'      reduce using rule 36 (condStmt)


State 163

   27 iterStmt: FOR '(' exprStmt exprStmt expression ')' body .

    error    reduce using rule 27 (iterStmt)
    TYPE     reduce using rule 27 (iterStmt)
    SETOP    reduce using rule 27 (iterStmt)
    ID       reduce using rule 27 (iterStmt)
    IF       reduce using rule 27 (iterStmt)
    FOR      reduce using rule 27 (iterStmt)
    RETURN   reduce using rule 27 (iterStmt)
    FORALL   reduce using rule 27 (iterStmt)
    IS_SET   reduce using rule 27 (iterStmt)
    EXISTS   reduce using rule 27 (iterStmt)
    NEG      reduce using rule 27 (iterStmt)
    READ     reduce using rule 27 (iterStmt)
    WRITE    reduce using rule 27 (iterStmt)
    WRITELN  reduce using rule 27 (iterStmt)
    INTEGER  reduce using rule 27 (iterStmt)
    FLOAT    reduce using rule 27 (iterStmt)
    EMPTY    reduce using rule 27 (iterStmt)
    ';'      reduce using rule 27 (iterStmt)
    '('      reduce using rule 27 (iterStmt)
    '}'      reduce using rule 27 (iterStmt)


State 164

   10 new_id: ID .

    ';'  reduce using rule 10 (new_id)
    ','  reduce using rule 10 (new_id)


State 165

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error ';'
   11 funcDecl: TYPE . new_id '(' arguments ')' '{' funcBody '}'
   12         | TYPE . new_id '(' error ')' '{'

    error  shift, and go to state 244
    ID     shift, and go to state 9

    varList  go to state 245
    new_id   go to state 246


State 166

   47 var: ID .
   66 factor: ID .
   83 elem: ID .

    RELOP   reduce using rule 66 (factor)
    ARTOP1  reduce using rule 66 (factor)
    ARTOP2  reduce using rule 66 (factor)
    IN      reduce using rule 83 (elem)
    DISJ    reduce using rule 66 (factor)
    CONJ    reduce using rule 66 (factor)
    ';'     reduce using rule 66 (factor)
    '('     reduce using rule 47 (var)


State 167

   81 setExpr: SETOP . '(' pertExpr ')'

    '('  shift, and go to state 247


State 168

   47 var: ID .
   66 factor: ID .
   83 elem: ID .

    RELOP   reduce using rule 66 (factor)
    ARTOP1  reduce using rule 66 (factor)
    ARTOP2  reduce using rule 66 (factor)
    IN      reduce using rule 83 (elem)
    DISJ    reduce using rule 66 (factor)
    CONJ    reduce using rule 66 (factor)
    '('     reduce using rule 47 (var)
    ')'     reduce using rule 66 (factor)


State 169

   70 factor: IS_SET . '(' var ')'

    '('  shift, and go to state 248


State 170

   82 setExpr: EXISTS . '(' pertExpr ')'

    '('  shift, and go to state 249


State 171

   58 negExpr: NEG . negExpr

    ID       shift, and go to state 168
    IS_SET   shift, and go to state 169
    NEG      shift, and go to state 171
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175

    var       go to state 176
    negExpr   go to state 250
    relExpr   go to state 179
    artExpr1  go to state 180
    artExpr2  go to state 181
    factor    go to state 182
    constant  go to state 183
    call      go to state 184
    pertExpr  go to state 185
    elem      go to state 186


State 172

   72 constant: INTEGER .

    RELOP   reduce using rule 72 (constant)
    ARTOP1  reduce using rule 72 (constant)
    ARTOP2  reduce using rule 72 (constant)
    IN      reduce using rule 72 (constant)
    DISJ    reduce using rule 72 (constant)
    CONJ    reduce using rule 72 (constant)
    ')'     reduce using rule 72 (constant)


State 173

   73 constant: FLOAT .

    RELOP   reduce using rule 73 (constant)
    ARTOP1  reduce using rule 73 (constant)
    ARTOP2  reduce using rule 73 (constant)
    IN      reduce using rule 73 (constant)
    DISJ    reduce using rule 73 (constant)
    CONJ    reduce using rule 73 (constant)
    ')'     reduce using rule 73 (constant)


State 174

   74 constant: EMPTY .

    RELOP   reduce using rule 74 (constant)
    ARTOP1  reduce using rule 74 (constant)
    ARTOP2  reduce using rule 74 (constant)
    IN      reduce using rule 74 (constant)
    DISJ    reduce using rule 74 (constant)
    CONJ    reduce using rule 74 (constant)
    ')'     reduce using rule 74 (constant)


State 175

   67 factor: '(' . simpleExpr ')'
   84 elem: '(' . setExpr ')'
   86     | '(' . simpleExpr ')'

    SETOP    shift, and go to state 167
    ID       shift, and go to state 168
    IS_SET   shift, and go to state 169
    EXISTS   shift, and go to state 170
    NEG      shift, and go to state 171
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175

    var         go to state 176
    simpleExpr  go to state 251
    disjExpr    go to state 177
    negExpr     go to state 178
    relExpr     go to state 179
    artExpr1    go to state 180
    artExpr2    go to state 181
    factor      go to state 182
    constant    go to state 183
    call        go to state 184
    pertExpr    go to state 185
    setExpr     go to state 87
    elem        go to state 186


State 176

   75 call: var . '(' params ')'

    '('  shift, and go to state 252


State 177

   55 simpleExpr: disjExpr .
   56 disjExpr: disjExpr . CONJ negExpr

    CONJ  shift, and go to state 253

    DISJ  reduce using rule 55 (simpleExpr)
    ')'   reduce using rule 55 (simpleExpr)


State 178

   57 disjExpr: negExpr .

    DISJ  reduce using rule 57 (disjExpr)
    CONJ  reduce using rule 57 (disjExpr)
    ')'   reduce using rule 57 (disjExpr)


State 179

   59 negExpr: relExpr .
   60 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 254

    DISJ  reduce using rule 59 (negExpr)
    CONJ  reduce using rule 59 (negExpr)
    ')'   reduce using rule 59 (negExpr)


State 180

   61 relExpr: artExpr1 .
   62 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 255

    RELOP  reduce using rule 61 (relExpr)
    DISJ   reduce using rule 61 (relExpr)
    CONJ   reduce using rule 61 (relExpr)
    ')'    reduce using rule 61 (relExpr)


State 181

   63 artExpr1: artExpr2 .
   64 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 256

    RELOP   reduce using rule 63 (artExpr1)
    ARTOP1  reduce using rule 63 (artExpr1)
    DISJ    reduce using rule 63 (artExpr1)
    CONJ    reduce using rule 63 (artExpr1)
    ')'     reduce using rule 63 (artExpr1)


State 182

   65 artExpr2: factor .

    RELOP   reduce using rule 65 (artExpr2)
    ARTOP1  reduce using rule 65 (artExpr2)
    ARTOP2  reduce using rule 65 (artExpr2)
    DISJ    reduce using rule 65 (artExpr2)
    CONJ    reduce using rule 65 (artExpr2)
    ')'     reduce using rule 65 (artExpr2)


State 183

   68 factor: constant .
   87 elem: constant .

    RELOP   reduce using rule 68 (factor)
    ARTOP1  reduce using rule 68 (factor)
    ARTOP2  reduce using rule 68 (factor)
    IN      reduce using rule 87 (elem)
    DISJ    reduce using rule 68 (factor)
    CONJ    reduce using rule 68 (factor)
    ')'     reduce using rule 68 (factor)


State 184

   69 factor: call .
   85 elem: call .

    RELOP   reduce using rule 69 (factor)
    ARTOP1  reduce using rule 69 (factor)
    ARTOP2  reduce using rule 69 (factor)
    IN      reduce using rule 85 (elem)
    DISJ    reduce using rule 69 (factor)
    CONJ    reduce using rule 69 (factor)
    ')'     reduce using rule 69 (factor)


State 185

   71 factor: pertExpr .

    RELOP   reduce using rule 71 (factor)
    ARTOP1  reduce using rule 71 (factor)
    ARTOP2  reduce using rule 71 (factor)
    DISJ    reduce using rule 71 (factor)
    CONJ    reduce using rule 71 (factor)
    ')'     reduce using rule 71 (factor)


State 186

   80 pertExpr: elem . IN set

    IN  shift, and go to state 257


State 187

   72 constant: INTEGER .

    IN  reduce using rule 72 (constant)


State 188

   73 constant: FLOAT .

    IN  reduce using rule 73 (constant)


State 189

   74 constant: EMPTY .

    IN  reduce using rule 74 (constant)


State 190

   75 call: var . '(' params ')'

    '('  shift, and go to state 258


State 191

   80 pertExpr: elem . IN set

    IN  shift, and go to state 259


State 192

   47 var: ID .
   66 factor: ID .
   83 elem: ID .

    RELOP   reduce using rule 66 (factor)
    ARTOP1  reduce using rule 66 (factor)
    ARTOP2  reduce using rule 66 (factor)
    IN      reduce using rule 83 (elem)
    DISJ    reduce using rule 66 (factor)
    CONJ    reduce using rule 66 (factor)
    '('     reduce using rule 47 (var)
    ')'     reduce using rule 66 (factor)
    '='     reduce using rule 47 (var)


State 193

   48 inExpr: READ . '(' var ')'

    '('  shift, and go to state 260


State 194

   49 outExpr: WRITE . '(' output ')'

    '('  shift, and go to state 261


State 195

   50 outExpr: WRITELN . '(' output ')'

    '('  shift, and go to state 262


State 196

   41 expression: assign .

    ')'  reduce using rule 41 (expression)


State 197

   46 assign: var . '=' simpleExpr
   75 call: var . '(' params ')'

    '('  shift, and go to state 252
    '='  shift, and go to state 263


State 198

   42 expression: inExpr .

    ')'  reduce using rule 42 (expression)


State 199

   43 expression: outExpr .

    ')'  reduce using rule 43 (expression)


State 200

   44 expression: simpleExpr .
   54 simpleExpr: simpleExpr . DISJ disjExpr

    DISJ  shift, and go to state 204

    ')'  reduce using rule 44 (expression)


State 201

   45 expression: setExpr .

    ')'  reduce using rule 45 (expression)


State 202

   39 exprStmt: ';' .

    error    reduce using rule 39 (exprStmt)
    SETOP    reduce using rule 39 (exprStmt)
    ID       reduce using rule 39 (exprStmt)
    IS_SET   reduce using rule 39 (exprStmt)
    EXISTS   reduce using rule 39 (exprStmt)
    NEG      reduce using rule 39 (exprStmt)
    READ     reduce using rule 39 (exprStmt)
    WRITE    reduce using rule 39 (exprStmt)
    WRITELN  reduce using rule 39 (exprStmt)
    INTEGER  reduce using rule 39 (exprStmt)
    FLOAT    reduce using rule 39 (exprStmt)
    EMPTY    reduce using rule 39 (exprStmt)
    ';'      reduce using rule 39 (exprStmt)
    '('      reduce using rule 39 (exprStmt)


State 203

   38 exprStmt: expression . ';'

    ';'  shift, and go to state 264


State 204

   54 simpleExpr: simpleExpr DISJ . disjExpr

    ID       shift, and go to state 168
    IS_SET   shift, and go to state 169
    NEG      shift, and go to state 171
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175

    var       go to state 176
    disjExpr  go to state 265
    negExpr   go to state 178
    relExpr   go to state 179
    artExpr1  go to state 180
    artExpr2  go to state 181
    factor    go to state 182
    constant  go to state 183
    call      go to state 184
    pertExpr  go to state 185
    elem      go to state 186


State 205

   47 var: ID .
   66 factor: ID .
   83 elem: ID .

    RELOP   reduce using rule 66 (factor)
    ARTOP1  reduce using rule 66 (factor)
    ARTOP2  reduce using rule 66 (factor)
    IN      reduce using rule 83 (elem)
    DISJ    reduce using rule 66 (factor)
    CONJ    reduce using rule 66 (factor)
    ','     reduce using rule 66 (factor)
    '('     reduce using rule 47 (var)
    ')'     reduce using rule 66 (factor)


State 206

   70 factor: IS_SET . '(' var ')'

    '('  shift, and go to state 266


State 207

   58 negExpr: NEG . negExpr

    ID       shift, and go to state 205
    IS_SET   shift, and go to state 206
    NEG      shift, and go to state 207
    INTEGER  shift, and go to state 208
    FLOAT    shift, and go to state 209
    EMPTY    shift, and go to state 210
    '('      shift, and go to state 211

    var       go to state 212
    negExpr   go to state 267
    relExpr   go to state 215
    artExpr1  go to state 216
    artExpr2  go to state 217
    factor    go to state 218
    constant  go to state 219
    call      go to state 220
    pertExpr  go to state 221
    elem      go to state 222


State 208

   72 constant: INTEGER .

    RELOP   reduce using rule 72 (constant)
    ARTOP1  reduce using rule 72 (constant)
    ARTOP2  reduce using rule 72 (constant)
    IN      reduce using rule 72 (constant)
    DISJ    reduce using rule 72 (constant)
    CONJ    reduce using rule 72 (constant)
    ','     reduce using rule 72 (constant)
    ')'     reduce using rule 72 (constant)


State 209

   73 constant: FLOAT .

    RELOP   reduce using rule 73 (constant)
    ARTOP1  reduce using rule 73 (constant)
    ARTOP2  reduce using rule 73 (constant)
    IN      reduce using rule 73 (constant)
    DISJ    reduce using rule 73 (constant)
    CONJ    reduce using rule 73 (constant)
    ','     reduce using rule 73 (constant)
    ')'     reduce using rule 73 (constant)


State 210

   74 constant: EMPTY .

    RELOP   reduce using rule 74 (constant)
    ARTOP1  reduce using rule 74 (constant)
    ARTOP2  reduce using rule 74 (constant)
    IN      reduce using rule 74 (constant)
    DISJ    reduce using rule 74 (constant)
    CONJ    reduce using rule 74 (constant)
    ','     reduce using rule 74 (constant)
    ')'     reduce using rule 74 (constant)


State 211

   67 factor: '(' . simpleExpr ')'
   84 elem: '(' . setExpr ')'
   86     | '(' . simpleExpr ')'

    SETOP    shift, and go to state 167
    ID       shift, and go to state 168
    IS_SET   shift, and go to state 169
    EXISTS   shift, and go to state 170
    NEG      shift, and go to state 171
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175

    var         go to state 176
    simpleExpr  go to state 268
    disjExpr    go to state 177
    negExpr     go to state 178
    relExpr     go to state 179
    artExpr1    go to state 180
    artExpr2    go to state 181
    factor      go to state 182
    constant    go to state 183
    call        go to state 184
    pertExpr    go to state 185
    setExpr     go to state 87
    elem        go to state 186


State 212

   75 call: var . '(' params ')'

    '('  shift, and go to state 269


State 213

   55 simpleExpr: disjExpr .
   56 disjExpr: disjExpr . CONJ negExpr

    CONJ  shift, and go to state 270

    DISJ  reduce using rule 55 (simpleExpr)
    ','   reduce using rule 55 (simpleExpr)
    ')'   reduce using rule 55 (simpleExpr)


State 214

   57 disjExpr: negExpr .

    DISJ  reduce using rule 57 (disjExpr)
    CONJ  reduce using rule 57 (disjExpr)
    ','   reduce using rule 57 (disjExpr)
    ')'   reduce using rule 57 (disjExpr)


State 215

   59 negExpr: relExpr .
   60 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 271

    DISJ  reduce using rule 59 (negExpr)
    CONJ  reduce using rule 59 (negExpr)
    ','   reduce using rule 59 (negExpr)
    ')'   reduce using rule 59 (negExpr)


State 216

   61 relExpr: artExpr1 .
   62 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 272

    RELOP  reduce using rule 61 (relExpr)
    DISJ   reduce using rule 61 (relExpr)
    CONJ   reduce using rule 61 (relExpr)
    ','    reduce using rule 61 (relExpr)
    ')'    reduce using rule 61 (relExpr)


State 217

   63 artExpr1: artExpr2 .
   64 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 273

    RELOP   reduce using rule 63 (artExpr1)
    ARTOP1  reduce using rule 63 (artExpr1)
    DISJ    reduce using rule 63 (artExpr1)
    CONJ    reduce using rule 63 (artExpr1)
    ','     reduce using rule 63 (artExpr1)
    ')'     reduce using rule 63 (artExpr1)


State 218

   65 artExpr2: factor .

    RELOP   reduce using rule 65 (artExpr2)
    ARTOP1  reduce using rule 65 (artExpr2)
    ARTOP2  reduce using rule 65 (artExpr2)
    DISJ    reduce using rule 65 (artExpr2)
    CONJ    reduce using rule 65 (artExpr2)
    ','     reduce using rule 65 (artExpr2)
    ')'     reduce using rule 65 (artExpr2)


State 219

   68 factor: constant .
   87 elem: constant .

    RELOP   reduce using rule 68 (factor)
    ARTOP1  reduce using rule 68 (factor)
    ARTOP2  reduce using rule 68 (factor)
    IN      reduce using rule 87 (elem)
    DISJ    reduce using rule 68 (factor)
    CONJ    reduce using rule 68 (factor)
    ','     reduce using rule 68 (factor)
    ')'     reduce using rule 68 (factor)


State 220

   69 factor: call .
   85 elem: call .

    RELOP   reduce using rule 69 (factor)
    ARTOP1  reduce using rule 69 (factor)
    ARTOP2  reduce using rule 69 (factor)
    IN      reduce using rule 85 (elem)
    DISJ    reduce using rule 69 (factor)
    CONJ    reduce using rule 69 (factor)
    ','     reduce using rule 69 (factor)
    ')'     reduce using rule 69 (factor)


State 221

   71 factor: pertExpr .

    RELOP   reduce using rule 71 (factor)
    ARTOP1  reduce using rule 71 (factor)
    ARTOP2  reduce using rule 71 (factor)
    DISJ    reduce using rule 71 (factor)
    CONJ    reduce using rule 71 (factor)
    ','     reduce using rule 71 (factor)
    ')'     reduce using rule 71 (factor)


State 222

   80 pertExpr: elem . IN set

    IN  shift, and go to state 274


State 223

   40 exprStmt: error ';' .

    error    reduce using rule 40 (exprStmt)
    SETOP    reduce using rule 40 (exprStmt)
    ID       reduce using rule 40 (exprStmt)
    IS_SET   reduce using rule 40 (exprStmt)
    EXISTS   reduce using rule 40 (exprStmt)
    NEG      reduce using rule 40 (exprStmt)
    READ     reduce using rule 40 (exprStmt)
    WRITE    reduce using rule 40 (exprStmt)
    WRITELN  reduce using rule 40 (exprStmt)
    INTEGER  reduce using rule 40 (exprStmt)
    FLOAT    reduce using rule 40 (exprStmt)
    EMPTY    reduce using rule 40 (exprStmt)
    ';'      reduce using rule 40 (exprStmt)
    '('      reduce using rule 40 (exprStmt)


State 224

   40 exprStmt: error . ';'

    ';'  shift, and go to state 275


State 225

   39 exprStmt: ';' .

    SETOP    reduce using rule 39 (exprStmt)
    ID       reduce using rule 39 (exprStmt)
    IS_SET   reduce using rule 39 (exprStmt)
    EXISTS   reduce using rule 39 (exprStmt)
    NEG      reduce using rule 39 (exprStmt)
    READ     reduce using rule 39 (exprStmt)
    WRITE    reduce using rule 39 (exprStmt)
    WRITELN  reduce using rule 39 (exprStmt)
    INTEGER  reduce using rule 39 (exprStmt)
    FLOAT    reduce using rule 39 (exprStmt)
    EMPTY    reduce using rule 39 (exprStmt)
    '('      reduce using rule 39 (exprStmt)
    ')'      reduce using rule 39 (exprStmt)


State 226

   38 exprStmt: expression . ';'

    ';'  shift, and go to state 276


State 227

   54 simpleExpr: simpleExpr DISJ . disjExpr

    ID       shift, and go to state 205
    IS_SET   shift, and go to state 206
    NEG      shift, and go to state 207
    INTEGER  shift, and go to state 208
    FLOAT    shift, and go to state 209
    EMPTY    shift, and go to state 210
    '('      shift, and go to state 211

    var       go to state 212
    disjExpr  go to state 277
    negExpr   go to state 214
    relExpr   go to state 215
    artExpr1  go to state 216
    artExpr2  go to state 217
    factor    go to state 218
    constant  go to state 219
    call      go to state 220
    pertExpr  go to state 221
    elem      go to state 222


State 228

   40 exprStmt: error . ';'

    ';'  shift, and go to state 278


State 229

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error ';'
   11 funcDecl: TYPE . new_id '(' arguments ')' '{' funcBody '}'
   12         | TYPE . new_id '(' error ')' '{'

    error  shift, and go to state 279
    ID     shift, and go to state 9

    varList  go to state 280
    new_id   go to state 281


State 230

   35 condStmt: IF . '(' expression ')' body
   36         | IF . '(' expression ')' body ELSE body

    '('  shift, and go to state 282


State 231

   26 iterStmt: FOR . '(' exprStmt exprStmt ')' body
   27         | FOR . '(' exprStmt exprStmt expression ')' body
   30         | FOR . '(' error ')'

    '('  shift, and go to state 283


State 232

   37 returnStmt: RETURN . exprStmt

    error    shift, and go to state 228
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 234
    '('      shift, and go to state 47

    exprStmt    go to state 284
    expression  go to state 239
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 233

   28 iterStmt: FORALL . '(' pertExpr ')' body
   29         | FORALL . '(' error ')'

    '('  shift, and go to state 285


State 234

   39 exprStmt: ';' .

    error    reduce using rule 39 (exprStmt)
    TYPE     reduce using rule 39 (exprStmt)
    SETOP    reduce using rule 39 (exprStmt)
    ID       reduce using rule 39 (exprStmt)
    IF       reduce using rule 39 (exprStmt)
    ELSE     reduce using rule 39 (exprStmt)
    FOR      reduce using rule 39 (exprStmt)
    RETURN   reduce using rule 39 (exprStmt)
    FORALL   reduce using rule 39 (exprStmt)
    IS_SET   reduce using rule 39 (exprStmt)
    EXISTS   reduce using rule 39 (exprStmt)
    NEG      reduce using rule 39 (exprStmt)
    READ     reduce using rule 39 (exprStmt)
    WRITE    reduce using rule 39 (exprStmt)
    WRITELN  reduce using rule 39 (exprStmt)
    INTEGER  reduce using rule 39 (exprStmt)
    FLOAT    reduce using rule 39 (exprStmt)
    EMPTY    reduce using rule 39 (exprStmt)
    ';'      reduce using rule 39 (exprStmt)
    '('      reduce using rule 39 (exprStmt)
    '}'      reduce using rule 39 (exprStmt)


State 235

   24 stmt: iterStmt .

    error    reduce using rule 24 (stmt)
    TYPE     reduce using rule 24 (stmt)
    SETOP    reduce using rule 24 (stmt)
    ID       reduce using rule 24 (stmt)
    IF       reduce using rule 24 (stmt)
    ELSE     reduce using rule 24 (stmt)
    FOR      reduce using rule 24 (stmt)
    RETURN   reduce using rule 24 (stmt)
    FORALL   reduce using rule 24 (stmt)
    IS_SET   reduce using rule 24 (stmt)
    EXISTS   reduce using rule 24 (stmt)
    NEG      reduce using rule 24 (stmt)
    READ     reduce using rule 24 (stmt)
    WRITE    reduce using rule 24 (stmt)
    WRITELN  reduce using rule 24 (stmt)
    INTEGER  reduce using rule 24 (stmt)
    FLOAT    reduce using rule 24 (stmt)
    EMPTY    reduce using rule 24 (stmt)
    ';'      reduce using rule 24 (stmt)
    '('      reduce using rule 24 (stmt)
    '}'      reduce using rule 24 (stmt)


State 236

   25 stmt: condStmt .

    error    reduce using rule 25 (stmt)
    TYPE     reduce using rule 25 (stmt)
    SETOP    reduce using rule 25 (stmt)
    ID       reduce using rule 25 (stmt)
    IF       reduce using rule 25 (stmt)
    ELSE     reduce using rule 25 (stmt)
    FOR      reduce using rule 25 (stmt)
    RETURN   reduce using rule 25 (stmt)
    FORALL   reduce using rule 25 (stmt)
    IS_SET   reduce using rule 25 (stmt)
    EXISTS   reduce using rule 25 (stmt)
    NEG      reduce using rule 25 (stmt)
    READ     reduce using rule 25 (stmt)
    WRITE    reduce using rule 25 (stmt)
    WRITELN  reduce using rule 25 (stmt)
    INTEGER  reduce using rule 25 (stmt)
    FLOAT    reduce using rule 25 (stmt)
    EMPTY    reduce using rule 25 (stmt)
    ';'      reduce using rule 25 (stmt)
    '('      reduce using rule 25 (stmt)
    '}'      reduce using rule 25 (stmt)


State 237

   23 stmt: returnStmt .

    error    reduce using rule 23 (stmt)
    TYPE     reduce using rule 23 (stmt)
    SETOP    reduce using rule 23 (stmt)
    ID       reduce using rule 23 (stmt)
    IF       reduce using rule 23 (stmt)
    ELSE     reduce using rule 23 (stmt)
    FOR      reduce using rule 23 (stmt)
    RETURN   reduce using rule 23 (stmt)
    FORALL   reduce using rule 23 (stmt)
    IS_SET   reduce using rule 23 (stmt)
    EXISTS   reduce using rule 23 (stmt)
    NEG      reduce using rule 23 (stmt)
    READ     reduce using rule 23 (stmt)
    WRITE    reduce using rule 23 (stmt)
    WRITELN  reduce using rule 23 (stmt)
    INTEGER  reduce using rule 23 (stmt)
    FLOAT    reduce using rule 23 (stmt)
    EMPTY    reduce using rule 23 (stmt)
    ';'      reduce using rule 23 (stmt)
    '('      reduce using rule 23 (stmt)
    '}'      reduce using rule 23 (stmt)


State 238

   22 stmt: exprStmt .

    error    reduce using rule 22 (stmt)
    TYPE     reduce using rule 22 (stmt)
    SETOP    reduce using rule 22 (stmt)
    ID       reduce using rule 22 (stmt)
    IF       reduce using rule 22 (stmt)
    ELSE     reduce using rule 22 (stmt)
    FOR      reduce using rule 22 (stmt)
    RETURN   reduce using rule 22 (stmt)
    FORALL   reduce using rule 22 (stmt)
    IS_SET   reduce using rule 22 (stmt)
    EXISTS   reduce using rule 22 (stmt)
    NEG      reduce using rule 22 (stmt)
    READ     reduce using rule 22 (stmt)
    WRITE    reduce using rule 22 (stmt)
    WRITELN  reduce using rule 22 (stmt)
    INTEGER  reduce using rule 22 (stmt)
    FLOAT    reduce using rule 22 (stmt)
    EMPTY    reduce using rule 22 (stmt)
    ';'      reduce using rule 22 (stmt)
    '('      reduce using rule 22 (stmt)
    '}'      reduce using rule 22 (stmt)


State 239

   38 exprStmt: expression . ';'

    ';'  shift, and go to state 286


State 240

   31 body: '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)

    funcBody  go to state 287


State 241

   33 body: varDecl .

    error    reduce using rule 33 (body)
    TYPE     reduce using rule 33 (body)
    SETOP    reduce using rule 33 (body)
    ID       reduce using rule 33 (body)
    IF       reduce using rule 33 (body)
    FOR      reduce using rule 33 (body)
    RETURN   reduce using rule 33 (body)
    FORALL   reduce using rule 33 (body)
    IS_SET   reduce using rule 33 (body)
    EXISTS   reduce using rule 33 (body)
    NEG      reduce using rule 33 (body)
    READ     reduce using rule 33 (body)
    WRITE    reduce using rule 33 (body)
    WRITELN  reduce using rule 33 (body)
    INTEGER  reduce using rule 33 (body)
    FLOAT    reduce using rule 33 (body)
    EMPTY    reduce using rule 33 (body)
    ';'      reduce using rule 33 (body)
    '('      reduce using rule 33 (body)
    '}'      reduce using rule 33 (body)


State 242

   34 body: funcDecl .

    error    reduce using rule 34 (body)
    TYPE     reduce using rule 34 (body)
    SETOP    reduce using rule 34 (body)
    ID       reduce using rule 34 (body)
    IF       reduce using rule 34 (body)
    FOR      reduce using rule 34 (body)
    RETURN   reduce using rule 34 (body)
    FORALL   reduce using rule 34 (body)
    IS_SET   reduce using rule 34 (body)
    EXISTS   reduce using rule 34 (body)
    NEG      reduce using rule 34 (body)
    READ     reduce using rule 34 (body)
    WRITE    reduce using rule 34 (body)
    WRITELN  reduce using rule 34 (body)
    INTEGER  reduce using rule 34 (body)
    FLOAT    reduce using rule 34 (body)
    EMPTY    reduce using rule 34 (body)
    ';'      reduce using rule 34 (body)
    '('      reduce using rule 34 (body)
    '}'      reduce using rule 34 (body)


State 243

   32 body: stmt .

    error    reduce using rule 32 (body)
    TYPE     reduce using rule 32 (body)
    SETOP    reduce using rule 32 (body)
    ID       reduce using rule 32 (body)
    IF       reduce using rule 32 (body)
    FOR      reduce using rule 32 (body)
    RETURN   reduce using rule 32 (body)
    FORALL   reduce using rule 32 (body)
    IS_SET   reduce using rule 32 (body)
    EXISTS   reduce using rule 32 (body)
    NEG      reduce using rule 32 (body)
    READ     reduce using rule 32 (body)
    WRITE    reduce using rule 32 (body)
    WRITELN  reduce using rule 32 (body)
    INTEGER  reduce using rule 32 (body)
    FLOAT    reduce using rule 32 (body)
    EMPTY    reduce using rule 32 (body)
    ';'      reduce using rule 32 (body)
    '('      reduce using rule 32 (body)
    '}'      reduce using rule 32 (body)


State 244

    7 varDecl: TYPE error . ';'

    ';'  shift, and go to state 288


State 245

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 289
    ','  shift, and go to state 14


State 246

    9 varList: new_id .
   11 funcDecl: TYPE new_id . '(' arguments ')' '{' funcBody '}'
   12         | TYPE new_id . '(' error ')' '{'

    '('  shift, and go to state 290

    ';'  reduce using rule 9 (varList)
    ','  reduce using rule 9 (varList)


State 247

   81 setExpr: SETOP '(' . pertExpr ')'

    ID       shift, and go to state 97
    INTEGER  shift, and go to state 187
    FLOAT    shift, and go to state 188
    EMPTY    shift, and go to state 189
    '('      shift, and go to state 98

    var       go to state 190
    constant  go to state 99
    call      go to state 100
    pertExpr  go to state 291
    elem      go to state 191


State 248

   70 factor: IS_SET '(' . var ')'

    ID  shift, and go to state 107

    var  go to state 292


State 249

   82 setExpr: EXISTS '(' . pertExpr ')'

    ID       shift, and go to state 97
    INTEGER  shift, and go to state 187
    FLOAT    shift, and go to state 188
    EMPTY    shift, and go to state 189
    '('      shift, and go to state 98

    var       go to state 190
    constant  go to state 99
    call      go to state 100
    pertExpr  go to state 293
    elem      go to state 191


State 250

   58 negExpr: NEG negExpr .

    DISJ  reduce using rule 58 (negExpr)
    CONJ  reduce using rule 58 (negExpr)
    ')'   reduce using rule 58 (negExpr)


State 251

   54 simpleExpr: simpleExpr . DISJ disjExpr
   67 factor: '(' simpleExpr . ')'
   86 elem: '(' simpleExpr . ')'

    DISJ  shift, and go to state 204
    ')'   shift, and go to state 294


State 252

   75 call: var '(' . params ')'

    ID       shift, and go to state 205
    IS_SET   shift, and go to state 206
    NEG      shift, and go to state 207
    INTEGER  shift, and go to state 208
    FLOAT    shift, and go to state 209
    EMPTY    shift, and go to state 210
    '('      shift, and go to state 211

    ')'  reduce using rule 76 (params)

    var         go to state 212
    simpleExpr  go to state 118
    disjExpr    go to state 213
    negExpr     go to state 214
    relExpr     go to state 215
    artExpr1    go to state 216
    artExpr2    go to state 217
    factor      go to state 218
    constant    go to state 219
    call        go to state 220
    params      go to state 295
    paramList   go to state 120
    pertExpr    go to state 221
    elem        go to state 222


State 253

   56 disjExpr: disjExpr CONJ . negExpr

    ID       shift, and go to state 168
    IS_SET   shift, and go to state 169
    NEG      shift, and go to state 171
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175

    var       go to state 176
    negExpr   go to state 296
    relExpr   go to state 179
    artExpr1  go to state 180
    artExpr2  go to state 181
    factor    go to state 182
    constant  go to state 183
    call      go to state 184
    pertExpr  go to state 185
    elem      go to state 186


State 254

   60 relExpr: relExpr RELOP . artExpr1

    ID       shift, and go to state 168
    IS_SET   shift, and go to state 169
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175

    var       go to state 176
    artExpr1  go to state 297
    artExpr2  go to state 181
    factor    go to state 182
    constant  go to state 183
    call      go to state 184
    pertExpr  go to state 185
    elem      go to state 186


State 255

   62 artExpr1: artExpr1 ARTOP1 . artExpr2

    ID       shift, and go to state 168
    IS_SET   shift, and go to state 169
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175

    var       go to state 176
    artExpr2  go to state 298
    factor    go to state 182
    constant  go to state 183
    call      go to state 184
    pertExpr  go to state 185
    elem      go to state 186


State 256

   64 artExpr2: artExpr2 ARTOP2 . factor

    ID       shift, and go to state 168
    IS_SET   shift, and go to state 169
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175

    var       go to state 176
    factor    go to state 299
    constant  go to state 183
    call      go to state 184
    pertExpr  go to state 185
    elem      go to state 186


State 257

   80 pertExpr: elem IN . set

    SETOP  shift, and go to state 300
    ID     shift, and go to state 301

    set  go to state 302


State 258

   75 call: var '(' . params ')'

    ID       shift, and go to state 205
    IS_SET   shift, and go to state 206
    NEG      shift, and go to state 207
    INTEGER  shift, and go to state 208
    FLOAT    shift, and go to state 209
    EMPTY    shift, and go to state 210
    '('      shift, and go to state 211

    ')'  reduce using rule 76 (params)

    var         go to state 212
    simpleExpr  go to state 118
    disjExpr    go to state 213
    negExpr     go to state 214
    relExpr     go to state 215
    artExpr1    go to state 216
    artExpr2    go to state 217
    factor      go to state 218
    constant    go to state 219
    call        go to state 220
    params      go to state 303
    paramList   go to state 120
    pertExpr    go to state 221
    elem        go to state 222


State 259

   80 pertExpr: elem IN . set

    SETOP  shift, and go to state 304
    ID     shift, and go to state 305

    set  go to state 306


State 260

   48 inExpr: READ '(' . var ')'

    ID  shift, and go to state 107

    var  go to state 307


State 261

   49 outExpr: WRITE '(' . output ')'

    ID      shift, and go to state 111
    CHAR    shift, and go to state 112
    STRING  shift, and go to state 113

    output  go to state 308


State 262

   50 outExpr: WRITELN '(' . output ')'

    ID      shift, and go to state 111
    CHAR    shift, and go to state 112
    STRING  shift, and go to state 113

    output  go to state 309


State 263

   46 assign: var '=' . simpleExpr

    ID       shift, and go to state 168
    IS_SET   shift, and go to state 169
    NEG      shift, and go to state 171
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175

    var         go to state 176
    simpleExpr  go to state 310
    disjExpr    go to state 177
    negExpr     go to state 178
    relExpr     go to state 179
    artExpr1    go to state 180
    artExpr2    go to state 181
    factor      go to state 182
    constant    go to state 183
    call        go to state 184
    pertExpr    go to state 185
    elem        go to state 186


State 264

   38 exprStmt: expression ';' .

    error    reduce using rule 38 (exprStmt)
    SETOP    reduce using rule 38 (exprStmt)
    ID       reduce using rule 38 (exprStmt)
    IS_SET   reduce using rule 38 (exprStmt)
    EXISTS   reduce using rule 38 (exprStmt)
    NEG      reduce using rule 38 (exprStmt)
    READ     reduce using rule 38 (exprStmt)
    WRITE    reduce using rule 38 (exprStmt)
    WRITELN  reduce using rule 38 (exprStmt)
    INTEGER  reduce using rule 38 (exprStmt)
    FLOAT    reduce using rule 38 (exprStmt)
    EMPTY    reduce using rule 38 (exprStmt)
    ';'      reduce using rule 38 (exprStmt)
    '('      reduce using rule 38 (exprStmt)


State 265

   54 simpleExpr: simpleExpr DISJ disjExpr .
   56 disjExpr: disjExpr . CONJ negExpr

    CONJ  shift, and go to state 253

    DISJ  reduce using rule 54 (simpleExpr)
    ')'   reduce using rule 54 (simpleExpr)


State 266

   70 factor: IS_SET '(' . var ')'

    ID  shift, and go to state 107

    var  go to state 311


State 267

   58 negExpr: NEG negExpr .

    DISJ  reduce using rule 58 (negExpr)
    CONJ  reduce using rule 58 (negExpr)
    ','   reduce using rule 58 (negExpr)
    ')'   reduce using rule 58 (negExpr)


State 268

   54 simpleExpr: simpleExpr . DISJ disjExpr
   67 factor: '(' simpleExpr . ')'
   86 elem: '(' simpleExpr . ')'

    DISJ  shift, and go to state 204
    ')'   shift, and go to state 312


State 269

   75 call: var '(' . params ')'

    ID       shift, and go to state 205
    IS_SET   shift, and go to state 206
    NEG      shift, and go to state 207
    INTEGER  shift, and go to state 208
    FLOAT    shift, and go to state 209
    EMPTY    shift, and go to state 210
    '('      shift, and go to state 211

    ')'  reduce using rule 76 (params)

    var         go to state 212
    simpleExpr  go to state 118
    disjExpr    go to state 213
    negExpr     go to state 214
    relExpr     go to state 215
    artExpr1    go to state 216
    artExpr2    go to state 217
    factor      go to state 218
    constant    go to state 219
    call        go to state 220
    params      go to state 313
    paramList   go to state 120
    pertExpr    go to state 221
    elem        go to state 222


State 270

   56 disjExpr: disjExpr CONJ . negExpr

    ID       shift, and go to state 205
    IS_SET   shift, and go to state 206
    NEG      shift, and go to state 207
    INTEGER  shift, and go to state 208
    FLOAT    shift, and go to state 209
    EMPTY    shift, and go to state 210
    '('      shift, and go to state 211

    var       go to state 212
    negExpr   go to state 314
    relExpr   go to state 215
    artExpr1  go to state 216
    artExpr2  go to state 217
    factor    go to state 218
    constant  go to state 219
    call      go to state 220
    pertExpr  go to state 221
    elem      go to state 222


State 271

   60 relExpr: relExpr RELOP . artExpr1

    ID       shift, and go to state 205
    IS_SET   shift, and go to state 206
    INTEGER  shift, and go to state 208
    FLOAT    shift, and go to state 209
    EMPTY    shift, and go to state 210
    '('      shift, and go to state 211

    var       go to state 212
    artExpr1  go to state 315
    artExpr2  go to state 217
    factor    go to state 218
    constant  go to state 219
    call      go to state 220
    pertExpr  go to state 221
    elem      go to state 222


State 272

   62 artExpr1: artExpr1 ARTOP1 . artExpr2

    ID       shift, and go to state 205
    IS_SET   shift, and go to state 206
    INTEGER  shift, and go to state 208
    FLOAT    shift, and go to state 209
    EMPTY    shift, and go to state 210
    '('      shift, and go to state 211

    var       go to state 212
    artExpr2  go to state 316
    factor    go to state 218
    constant  go to state 219
    call      go to state 220
    pertExpr  go to state 221
    elem      go to state 222


State 273

   64 artExpr2: artExpr2 ARTOP2 . factor

    ID       shift, and go to state 205
    IS_SET   shift, and go to state 206
    INTEGER  shift, and go to state 208
    FLOAT    shift, and go to state 209
    EMPTY    shift, and go to state 210
    '('      shift, and go to state 211

    var       go to state 212
    factor    go to state 317
    constant  go to state 219
    call      go to state 220
    pertExpr  go to state 221
    elem      go to state 222


State 274

   80 pertExpr: elem IN . set

    SETOP  shift, and go to state 318
    ID     shift, and go to state 319

    set  go to state 320


State 275

   40 exprStmt: error ';' .

    SETOP    reduce using rule 40 (exprStmt)
    ID       reduce using rule 40 (exprStmt)
    IS_SET   reduce using rule 40 (exprStmt)
    EXISTS   reduce using rule 40 (exprStmt)
    NEG      reduce using rule 40 (exprStmt)
    READ     reduce using rule 40 (exprStmt)
    WRITE    reduce using rule 40 (exprStmt)
    WRITELN  reduce using rule 40 (exprStmt)
    INTEGER  reduce using rule 40 (exprStmt)
    FLOAT    reduce using rule 40 (exprStmt)
    EMPTY    reduce using rule 40 (exprStmt)
    '('      reduce using rule 40 (exprStmt)
    ')'      reduce using rule 40 (exprStmt)


State 276

   38 exprStmt: expression ';' .

    SETOP    reduce using rule 38 (exprStmt)
    ID       reduce using rule 38 (exprStmt)
    IS_SET   reduce using rule 38 (exprStmt)
    EXISTS   reduce using rule 38 (exprStmt)
    NEG      reduce using rule 38 (exprStmt)
    READ     reduce using rule 38 (exprStmt)
    WRITE    reduce using rule 38 (exprStmt)
    WRITELN  reduce using rule 38 (exprStmt)
    INTEGER  reduce using rule 38 (exprStmt)
    FLOAT    reduce using rule 38 (exprStmt)
    EMPTY    reduce using rule 38 (exprStmt)
    '('      reduce using rule 38 (exprStmt)
    ')'      reduce using rule 38 (exprStmt)


State 277

   54 simpleExpr: simpleExpr DISJ disjExpr .
   56 disjExpr: disjExpr . CONJ negExpr

    CONJ  shift, and go to state 270

    DISJ  reduce using rule 54 (simpleExpr)
    ','   reduce using rule 54 (simpleExpr)
    ')'   reduce using rule 54 (simpleExpr)


State 278

   40 exprStmt: error ';' .

    error    reduce using rule 40 (exprStmt)
    TYPE     reduce using rule 40 (exprStmt)
    SETOP    reduce using rule 40 (exprStmt)
    ID       reduce using rule 40 (exprStmt)
    IF       reduce using rule 40 (exprStmt)
    ELSE     reduce using rule 40 (exprStmt)
    FOR      reduce using rule 40 (exprStmt)
    RETURN   reduce using rule 40 (exprStmt)
    FORALL   reduce using rule 40 (exprStmt)
    IS_SET   reduce using rule 40 (exprStmt)
    EXISTS   reduce using rule 40 (exprStmt)
    NEG      reduce using rule 40 (exprStmt)
    READ     reduce using rule 40 (exprStmt)
    WRITE    reduce using rule 40 (exprStmt)
    WRITELN  reduce using rule 40 (exprStmt)
    INTEGER  reduce using rule 40 (exprStmt)
    FLOAT    reduce using rule 40 (exprStmt)
    EMPTY    reduce using rule 40 (exprStmt)
    ';'      reduce using rule 40 (exprStmt)
    '('      reduce using rule 40 (exprStmt)
    '}'      reduce using rule 40 (exprStmt)


State 279

    7 varDecl: TYPE error . ';'

    ';'  shift, and go to state 321


State 280

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 322
    ','  shift, and go to state 14


State 281

    9 varList: new_id .
   11 funcDecl: TYPE new_id . '(' arguments ')' '{' funcBody '}'
   12         | TYPE new_id . '(' error ')' '{'

    '('  shift, and go to state 323

    ';'  reduce using rule 9 (varList)
    ','  reduce using rule 9 (varList)


State 282

   35 condStmt: IF '(' . expression ')' body
   36         | IF '(' . expression ')' body ELSE body

    SETOP    shift, and go to state 167
    ID       shift, and go to state 192
    IS_SET   shift, and go to state 169
    EXISTS   shift, and go to state 170
    NEG      shift, and go to state 171
    READ     shift, and go to state 193
    WRITE    shift, and go to state 194
    WRITELN  shift, and go to state 195
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175

    expression  go to state 324
    assign      go to state 196
    var         go to state 197
    inExpr      go to state 198
    outExpr     go to state 199
    simpleExpr  go to state 200
    disjExpr    go to state 177
    negExpr     go to state 178
    relExpr     go to state 179
    artExpr1    go to state 180
    artExpr2    go to state 181
    factor      go to state 182
    constant    go to state 183
    call        go to state 184
    pertExpr    go to state 185
    setExpr     go to state 201
    elem        go to state 186


State 283

   26 iterStmt: FOR '(' . exprStmt exprStmt ')' body
   27         | FOR '(' . exprStmt exprStmt expression ')' body
   30         | FOR '(' . error ')'

    error    shift, and go to state 325
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 202
    '('      shift, and go to state 47

    exprStmt    go to state 326
    expression  go to state 203
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 284

   37 returnStmt: RETURN exprStmt .

    error    reduce using rule 37 (returnStmt)
    TYPE     reduce using rule 37 (returnStmt)
    SETOP    reduce using rule 37 (returnStmt)
    ID       reduce using rule 37 (returnStmt)
    IF       reduce using rule 37 (returnStmt)
    ELSE     reduce using rule 37 (returnStmt)
    FOR      reduce using rule 37 (returnStmt)
    RETURN   reduce using rule 37 (returnStmt)
    FORALL   reduce using rule 37 (returnStmt)
    IS_SET   reduce using rule 37 (returnStmt)
    EXISTS   reduce using rule 37 (returnStmt)
    NEG      reduce using rule 37 (returnStmt)
    READ     reduce using rule 37 (returnStmt)
    WRITE    reduce using rule 37 (returnStmt)
    WRITELN  reduce using rule 37 (returnStmt)
    INTEGER  reduce using rule 37 (returnStmt)
    FLOAT    reduce using rule 37 (returnStmt)
    EMPTY    reduce using rule 37 (returnStmt)
    ';'      reduce using rule 37 (returnStmt)
    '('      reduce using rule 37 (returnStmt)
    '}'      reduce using rule 37 (returnStmt)


State 285

   28 iterStmt: FORALL '(' . pertExpr ')' body
   29         | FORALL '(' . error ')'

    error    shift, and go to state 327
    ID       shift, and go to state 97
    INTEGER  shift, and go to state 187
    FLOAT    shift, and go to state 188
    EMPTY    shift, and go to state 189
    '('      shift, and go to state 98

    var       go to state 190
    constant  go to state 99
    call      go to state 100
    pertExpr  go to state 328
    elem      go to state 191


State 286

   38 exprStmt: expression ';' .

    error    reduce using rule 38 (exprStmt)
    TYPE     reduce using rule 38 (exprStmt)
    SETOP    reduce using rule 38 (exprStmt)
    ID       reduce using rule 38 (exprStmt)
    IF       reduce using rule 38 (exprStmt)
    ELSE     reduce using rule 38 (exprStmt)
    FOR      reduce using rule 38 (exprStmt)
    RETURN   reduce using rule 38 (exprStmt)
    FORALL   reduce using rule 38 (exprStmt)
    IS_SET   reduce using rule 38 (exprStmt)
    EXISTS   reduce using rule 38 (exprStmt)
    NEG      reduce using rule 38 (exprStmt)
    READ     reduce using rule 38 (exprStmt)
    WRITE    reduce using rule 38 (exprStmt)
    WRITELN  reduce using rule 38 (exprStmt)
    INTEGER  reduce using rule 38 (exprStmt)
    FLOAT    reduce using rule 38 (exprStmt)
    EMPTY    reduce using rule 38 (exprStmt)
    ';'      reduce using rule 38 (exprStmt)
    '('      reduce using rule 38 (exprStmt)
    '}'      reduce using rule 38 (exprStmt)


State 287

   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt
   31 body: '{' funcBody . '}'

    error    shift, and go to state 30
    TYPE     shift, and go to state 165
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 33
    FOR      shift, and go to state 34
    RETURN   shift, and go to state 35
    FORALL   shift, and go to state 36
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 46
    '('      shift, and go to state 47
    '}'      shift, and go to state 329

    varDecl     go to state 49
    funcDecl    go to state 50
    stmt        go to state 51
    iterStmt    go to state 52
    condStmt    go to state 53
    returnStmt  go to state 54
    exprStmt    go to state 55
    expression  go to state 56
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 288

    7 varDecl: TYPE error ';' .

    error    reduce using rule 7 (varDecl)
    TYPE     reduce using rule 7 (varDecl)
    SETOP    reduce using rule 7 (varDecl)
    ID       reduce using rule 7 (varDecl)
    IF       reduce using rule 7 (varDecl)
    FOR      reduce using rule 7 (varDecl)
    RETURN   reduce using rule 7 (varDecl)
    FORALL   reduce using rule 7 (varDecl)
    IS_SET   reduce using rule 7 (varDecl)
    EXISTS   reduce using rule 7 (varDecl)
    NEG      reduce using rule 7 (varDecl)
    READ     reduce using rule 7 (varDecl)
    WRITE    reduce using rule 7 (varDecl)
    WRITELN  reduce using rule 7 (varDecl)
    INTEGER  reduce using rule 7 (varDecl)
    FLOAT    reduce using rule 7 (varDecl)
    EMPTY    reduce using rule 7 (varDecl)
    ';'      reduce using rule 7 (varDecl)
    '('      reduce using rule 7 (varDecl)
    '}'      reduce using rule 7 (varDecl)


State 289

    6 varDecl: TYPE varList ';' .

    error    reduce using rule 6 (varDecl)
    TYPE     reduce using rule 6 (varDecl)
    SETOP    reduce using rule 6 (varDecl)
    ID       reduce using rule 6 (varDecl)
    IF       reduce using rule 6 (varDecl)
    FOR      reduce using rule 6 (varDecl)
    RETURN   reduce using rule 6 (varDecl)
    FORALL   reduce using rule 6 (varDecl)
    IS_SET   reduce using rule 6 (varDecl)
    EXISTS   reduce using rule 6 (varDecl)
    NEG      reduce using rule 6 (varDecl)
    READ     reduce using rule 6 (varDecl)
    WRITE    reduce using rule 6 (varDecl)
    WRITELN  reduce using rule 6 (varDecl)
    INTEGER  reduce using rule 6 (varDecl)
    FLOAT    reduce using rule 6 (varDecl)
    EMPTY    reduce using rule 6 (varDecl)
    ';'      reduce using rule 6 (varDecl)
    '('      reduce using rule 6 (varDecl)
    '}'      reduce using rule 6 (varDecl)


State 290

   11 funcDecl: TYPE new_id '(' . arguments ')' '{' funcBody '}'
   12         | TYPE new_id '(' . error ')' '{'

    error  shift, and go to state 330
    TYPE   shift, and go to state 18

    ')'  reduce using rule 13 (arguments)

    arguments  go to state 331
    argsList   go to state 20
    arg        go to state 21


State 291

   81 setExpr: SETOP '(' pertExpr . ')'

    ')'  shift, and go to state 332


State 292

   70 factor: IS_SET '(' var . ')'

    ')'  shift, and go to state 333


State 293

   82 setExpr: EXISTS '(' pertExpr . ')'

    ')'  shift, and go to state 334


State 294

   67 factor: '(' simpleExpr ')' .
   86 elem: '(' simpleExpr ')' .

    RELOP   reduce using rule 67 (factor)
    ARTOP1  reduce using rule 67 (factor)
    ARTOP2  reduce using rule 67 (factor)
    IN      reduce using rule 86 (elem)
    DISJ    reduce using rule 67 (factor)
    CONJ    reduce using rule 67 (factor)
    ')'     reduce using rule 67 (factor)


State 295

   75 call: var '(' params . ')'

    ')'  shift, and go to state 335


State 296

   56 disjExpr: disjExpr CONJ negExpr .

    DISJ  reduce using rule 56 (disjExpr)
    CONJ  reduce using rule 56 (disjExpr)
    ')'   reduce using rule 56 (disjExpr)


State 297

   60 relExpr: relExpr RELOP artExpr1 .
   62 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 255

    RELOP  reduce using rule 60 (relExpr)
    DISJ   reduce using rule 60 (relExpr)
    CONJ   reduce using rule 60 (relExpr)
    ')'    reduce using rule 60 (relExpr)


State 298

   62 artExpr1: artExpr1 ARTOP1 artExpr2 .
   64 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 256

    RELOP   reduce using rule 62 (artExpr1)
    ARTOP1  reduce using rule 62 (artExpr1)
    DISJ    reduce using rule 62 (artExpr1)
    CONJ    reduce using rule 62 (artExpr1)
    ')'     reduce using rule 62 (artExpr1)


State 299

   64 artExpr2: artExpr2 ARTOP2 factor .

    RELOP   reduce using rule 64 (artExpr2)
    ARTOP1  reduce using rule 64 (artExpr2)
    ARTOP2  reduce using rule 64 (artExpr2)
    DISJ    reduce using rule 64 (artExpr2)
    CONJ    reduce using rule 64 (artExpr2)
    ')'     reduce using rule 64 (artExpr2)


State 300

   89 set: SETOP . '(' pertExpr ')'

    '('  shift, and go to state 336


State 301

   88 set: ID .

    RELOP   reduce using rule 88 (set)
    ARTOP1  reduce using rule 88 (set)
    ARTOP2  reduce using rule 88 (set)
    DISJ    reduce using rule 88 (set)
    CONJ    reduce using rule 88 (set)
    ')'     reduce using rule 88 (set)


State 302

   80 pertExpr: elem IN set .

    RELOP   reduce using rule 80 (pertExpr)
    ARTOP1  reduce using rule 80 (pertExpr)
    ARTOP2  reduce using rule 80 (pertExpr)
    DISJ    reduce using rule 80 (pertExpr)
    CONJ    reduce using rule 80 (pertExpr)
    ')'     reduce using rule 80 (pertExpr)


State 303

   75 call: var '(' params . ')'

    ')'  shift, and go to state 337


State 304

   89 set: SETOP . '(' pertExpr ')'

    '('  shift, and go to state 338


State 305

   88 set: ID .

    ')'  reduce using rule 88 (set)


State 306

   80 pertExpr: elem IN set .

    ')'  reduce using rule 80 (pertExpr)


State 307

   48 inExpr: READ '(' var . ')'

    ')'  shift, and go to state 339


State 308

   49 outExpr: WRITE '(' output . ')'

    ')'  shift, and go to state 340


State 309

   50 outExpr: WRITELN '(' output . ')'

    ')'  shift, and go to state 341


State 310

   46 assign: var '=' simpleExpr .
   54 simpleExpr: simpleExpr . DISJ disjExpr

    DISJ  shift, and go to state 204

    ')'  reduce using rule 46 (assign)


State 311

   70 factor: IS_SET '(' var . ')'

    ')'  shift, and go to state 342


State 312

   67 factor: '(' simpleExpr ')' .
   86 elem: '(' simpleExpr ')' .

    RELOP   reduce using rule 67 (factor)
    ARTOP1  reduce using rule 67 (factor)
    ARTOP2  reduce using rule 67 (factor)
    IN      reduce using rule 86 (elem)
    DISJ    reduce using rule 67 (factor)
    CONJ    reduce using rule 67 (factor)
    ','     reduce using rule 67 (factor)
    ')'     reduce using rule 67 (factor)


State 313

   75 call: var '(' params . ')'

    ')'  shift, and go to state 343


State 314

   56 disjExpr: disjExpr CONJ negExpr .

    DISJ  reduce using rule 56 (disjExpr)
    CONJ  reduce using rule 56 (disjExpr)
    ','   reduce using rule 56 (disjExpr)
    ')'   reduce using rule 56 (disjExpr)


State 315

   60 relExpr: relExpr RELOP artExpr1 .
   62 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 272

    RELOP  reduce using rule 60 (relExpr)
    DISJ   reduce using rule 60 (relExpr)
    CONJ   reduce using rule 60 (relExpr)
    ','    reduce using rule 60 (relExpr)
    ')'    reduce using rule 60 (relExpr)


State 316

   62 artExpr1: artExpr1 ARTOP1 artExpr2 .
   64 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 273

    RELOP   reduce using rule 62 (artExpr1)
    ARTOP1  reduce using rule 62 (artExpr1)
    DISJ    reduce using rule 62 (artExpr1)
    CONJ    reduce using rule 62 (artExpr1)
    ','     reduce using rule 62 (artExpr1)
    ')'     reduce using rule 62 (artExpr1)


State 317

   64 artExpr2: artExpr2 ARTOP2 factor .

    RELOP   reduce using rule 64 (artExpr2)
    ARTOP1  reduce using rule 64 (artExpr2)
    ARTOP2  reduce using rule 64 (artExpr2)
    DISJ    reduce using rule 64 (artExpr2)
    CONJ    reduce using rule 64 (artExpr2)
    ','     reduce using rule 64 (artExpr2)
    ')'     reduce using rule 64 (artExpr2)


State 318

   89 set: SETOP . '(' pertExpr ')'

    '('  shift, and go to state 344


State 319

   88 set: ID .

    RELOP   reduce using rule 88 (set)
    ARTOP1  reduce using rule 88 (set)
    ARTOP2  reduce using rule 88 (set)
    DISJ    reduce using rule 88 (set)
    CONJ    reduce using rule 88 (set)
    ','     reduce using rule 88 (set)
    ')'     reduce using rule 88 (set)


State 320

   80 pertExpr: elem IN set .

    RELOP   reduce using rule 80 (pertExpr)
    ARTOP1  reduce using rule 80 (pertExpr)
    ARTOP2  reduce using rule 80 (pertExpr)
    DISJ    reduce using rule 80 (pertExpr)
    CONJ    reduce using rule 80 (pertExpr)
    ','     reduce using rule 80 (pertExpr)
    ')'     reduce using rule 80 (pertExpr)


State 321

    7 varDecl: TYPE error ';' .

    error    reduce using rule 7 (varDecl)
    TYPE     reduce using rule 7 (varDecl)
    SETOP    reduce using rule 7 (varDecl)
    ID       reduce using rule 7 (varDecl)
    IF       reduce using rule 7 (varDecl)
    ELSE     reduce using rule 7 (varDecl)
    FOR      reduce using rule 7 (varDecl)
    RETURN   reduce using rule 7 (varDecl)
    FORALL   reduce using rule 7 (varDecl)
    IS_SET   reduce using rule 7 (varDecl)
    EXISTS   reduce using rule 7 (varDecl)
    NEG      reduce using rule 7 (varDecl)
    READ     reduce using rule 7 (varDecl)
    WRITE    reduce using rule 7 (varDecl)
    WRITELN  reduce using rule 7 (varDecl)
    INTEGER  reduce using rule 7 (varDecl)
    FLOAT    reduce using rule 7 (varDecl)
    EMPTY    reduce using rule 7 (varDecl)
    ';'      reduce using rule 7 (varDecl)
    '('      reduce using rule 7 (varDecl)
    '}'      reduce using rule 7 (varDecl)


State 322

    6 varDecl: TYPE varList ';' .

    error    reduce using rule 6 (varDecl)
    TYPE     reduce using rule 6 (varDecl)
    SETOP    reduce using rule 6 (varDecl)
    ID       reduce using rule 6 (varDecl)
    IF       reduce using rule 6 (varDecl)
    ELSE     reduce using rule 6 (varDecl)
    FOR      reduce using rule 6 (varDecl)
    RETURN   reduce using rule 6 (varDecl)
    FORALL   reduce using rule 6 (varDecl)
    IS_SET   reduce using rule 6 (varDecl)
    EXISTS   reduce using rule 6 (varDecl)
    NEG      reduce using rule 6 (varDecl)
    READ     reduce using rule 6 (varDecl)
    WRITE    reduce using rule 6 (varDecl)
    WRITELN  reduce using rule 6 (varDecl)
    INTEGER  reduce using rule 6 (varDecl)
    FLOAT    reduce using rule 6 (varDecl)
    EMPTY    reduce using rule 6 (varDecl)
    ';'      reduce using rule 6 (varDecl)
    '('      reduce using rule 6 (varDecl)
    '}'      reduce using rule 6 (varDecl)


State 323

   11 funcDecl: TYPE new_id '(' . arguments ')' '{' funcBody '}'
   12         | TYPE new_id '(' . error ')' '{'

    error  shift, and go to state 345
    TYPE   shift, and go to state 18

    ')'  reduce using rule 13 (arguments)

    arguments  go to state 346
    argsList   go to state 20
    arg        go to state 21


State 324

   35 condStmt: IF '(' expression . ')' body
   36         | IF '(' expression . ')' body ELSE body

    ')'  shift, and go to state 347


State 325

   30 iterStmt: FOR '(' error . ')'
   40 exprStmt: error . ';'

    ';'  shift, and go to state 223
    ')'  shift, and go to state 348


State 326

   26 iterStmt: FOR '(' exprStmt . exprStmt ')' body
   27         | FOR '(' exprStmt . exprStmt expression ')' body

    error    shift, and go to state 224
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 225
    '('      shift, and go to state 47

    exprStmt    go to state 349
    expression  go to state 226
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 327

   29 iterStmt: FORALL '(' error . ')'

    ')'  shift, and go to state 350


State 328

   28 iterStmt: FORALL '(' pertExpr . ')' body

    ')'  shift, and go to state 351


State 329

   31 body: '{' funcBody '}' .

    error    reduce using rule 31 (body)
    TYPE     reduce using rule 31 (body)
    SETOP    reduce using rule 31 (body)
    ID       reduce using rule 31 (body)
    IF       reduce using rule 31 (body)
    FOR      reduce using rule 31 (body)
    RETURN   reduce using rule 31 (body)
    FORALL   reduce using rule 31 (body)
    IS_SET   reduce using rule 31 (body)
    EXISTS   reduce using rule 31 (body)
    NEG      reduce using rule 31 (body)
    READ     reduce using rule 31 (body)
    WRITE    reduce using rule 31 (body)
    WRITELN  reduce using rule 31 (body)
    INTEGER  reduce using rule 31 (body)
    FLOAT    reduce using rule 31 (body)
    EMPTY    reduce using rule 31 (body)
    ';'      reduce using rule 31 (body)
    '('      reduce using rule 31 (body)
    '}'      reduce using rule 31 (body)


State 330

   12 funcDecl: TYPE new_id '(' error . ')' '{'

    ')'  shift, and go to state 352


State 331

   11 funcDecl: TYPE new_id '(' arguments . ')' '{' funcBody '}'

    ')'  shift, and go to state 353


State 332

   81 setExpr: SETOP '(' pertExpr ')' .

    ')'  reduce using rule 81 (setExpr)


State 333

   70 factor: IS_SET '(' var ')' .

    RELOP   reduce using rule 70 (factor)
    ARTOP1  reduce using rule 70 (factor)
    ARTOP2  reduce using rule 70 (factor)
    DISJ    reduce using rule 70 (factor)
    CONJ    reduce using rule 70 (factor)
    ')'     reduce using rule 70 (factor)


State 334

   82 setExpr: EXISTS '(' pertExpr ')' .

    ')'  reduce using rule 82 (setExpr)


State 335

   75 call: var '(' params ')' .

    RELOP   reduce using rule 75 (call)
    ARTOP1  reduce using rule 75 (call)
    ARTOP2  reduce using rule 75 (call)
    IN      reduce using rule 75 (call)
    DISJ    reduce using rule 75 (call)
    CONJ    reduce using rule 75 (call)
    ')'     reduce using rule 75 (call)


State 336

   89 set: SETOP '(' . pertExpr ')'

    ID       shift, and go to state 97
    INTEGER  shift, and go to state 187
    FLOAT    shift, and go to state 188
    EMPTY    shift, and go to state 189
    '('      shift, and go to state 98

    var       go to state 190
    constant  go to state 99
    call      go to state 100
    pertExpr  go to state 354
    elem      go to state 191


State 337

   75 call: var '(' params ')' .

    IN  reduce using rule 75 (call)


State 338

   89 set: SETOP '(' . pertExpr ')'

    ID       shift, and go to state 97
    INTEGER  shift, and go to state 187
    FLOAT    shift, and go to state 188
    EMPTY    shift, and go to state 189
    '('      shift, and go to state 98

    var       go to state 190
    constant  go to state 99
    call      go to state 100
    pertExpr  go to state 355
    elem      go to state 191


State 339

   48 inExpr: READ '(' var ')' .

    ')'  reduce using rule 48 (inExpr)


State 340

   49 outExpr: WRITE '(' output ')' .

    ')'  reduce using rule 49 (outExpr)


State 341

   50 outExpr: WRITELN '(' output ')' .

    ')'  reduce using rule 50 (outExpr)


State 342

   70 factor: IS_SET '(' var ')' .

    RELOP   reduce using rule 70 (factor)
    ARTOP1  reduce using rule 70 (factor)
    ARTOP2  reduce using rule 70 (factor)
    DISJ    reduce using rule 70 (factor)
    CONJ    reduce using rule 70 (factor)
    ','     reduce using rule 70 (factor)
    ')'     reduce using rule 70 (factor)


State 343

   75 call: var '(' params ')' .

    RELOP   reduce using rule 75 (call)
    ARTOP1  reduce using rule 75 (call)
    ARTOP2  reduce using rule 75 (call)
    IN      reduce using rule 75 (call)
    DISJ    reduce using rule 75 (call)
    CONJ    reduce using rule 75 (call)
    ','     reduce using rule 75 (call)
    ')'     reduce using rule 75 (call)


State 344

   89 set: SETOP '(' . pertExpr ')'

    ID       shift, and go to state 97
    INTEGER  shift, and go to state 187
    FLOAT    shift, and go to state 188
    EMPTY    shift, and go to state 189
    '('      shift, and go to state 98

    var       go to state 190
    constant  go to state 99
    call      go to state 100
    pertExpr  go to state 356
    elem      go to state 191


State 345

   12 funcDecl: TYPE new_id '(' error . ')' '{'

    ')'  shift, and go to state 357


State 346

   11 funcDecl: TYPE new_id '(' arguments . ')' '{' funcBody '}'

    ')'  shift, and go to state 358


State 347

   35 condStmt: IF '(' expression ')' . body
   36         | IF '(' expression ')' . body ELSE body

    error    shift, and go to state 228
    TYPE     shift, and go to state 229
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 230
    FOR      shift, and go to state 231
    RETURN   shift, and go to state 232
    FORALL   shift, and go to state 233
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 234
    '('      shift, and go to state 47
    '{'      shift, and go to state 146

    varDecl     go to state 147
    funcDecl    go to state 148
    stmt        go to state 149
    iterStmt    go to state 235
    body        go to state 359
    condStmt    go to state 236
    returnStmt  go to state 237
    exprStmt    go to state 238
    expression  go to state 239
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 348

   30 iterStmt: FOR '(' error ')' .

    error    reduce using rule 30 (iterStmt)
    TYPE     reduce using rule 30 (iterStmt)
    SETOP    reduce using rule 30 (iterStmt)
    ID       reduce using rule 30 (iterStmt)
    IF       reduce using rule 30 (iterStmt)
    ELSE     reduce using rule 30 (iterStmt)
    FOR      reduce using rule 30 (iterStmt)
    RETURN   reduce using rule 30 (iterStmt)
    FORALL   reduce using rule 30 (iterStmt)
    IS_SET   reduce using rule 30 (iterStmt)
    EXISTS   reduce using rule 30 (iterStmt)
    NEG      reduce using rule 30 (iterStmt)
    READ     reduce using rule 30 (iterStmt)
    WRITE    reduce using rule 30 (iterStmt)
    WRITELN  reduce using rule 30 (iterStmt)
    INTEGER  reduce using rule 30 (iterStmt)
    FLOAT    reduce using rule 30 (iterStmt)
    EMPTY    reduce using rule 30 (iterStmt)
    ';'      reduce using rule 30 (iterStmt)
    '('      reduce using rule 30 (iterStmt)
    '}'      reduce using rule 30 (iterStmt)


State 349

   26 iterStmt: FOR '(' exprStmt exprStmt . ')' body
   27         | FOR '(' exprStmt exprStmt . expression ')' body

    SETOP    shift, and go to state 167
    ID       shift, and go to state 192
    IS_SET   shift, and go to state 169
    EXISTS   shift, and go to state 170
    NEG      shift, and go to state 171
    READ     shift, and go to state 193
    WRITE    shift, and go to state 194
    WRITELN  shift, and go to state 195
    INTEGER  shift, and go to state 172
    FLOAT    shift, and go to state 173
    EMPTY    shift, and go to state 174
    '('      shift, and go to state 175
    ')'      shift, and go to state 360

    expression  go to state 361
    assign      go to state 196
    var         go to state 197
    inExpr      go to state 198
    outExpr     go to state 199
    simpleExpr  go to state 200
    disjExpr    go to state 177
    negExpr     go to state 178
    relExpr     go to state 179
    artExpr1    go to state 180
    artExpr2    go to state 181
    factor      go to state 182
    constant    go to state 183
    call        go to state 184
    pertExpr    go to state 185
    setExpr     go to state 201
    elem        go to state 186


State 350

   29 iterStmt: FORALL '(' error ')' .

    error    reduce using rule 29 (iterStmt)
    TYPE     reduce using rule 29 (iterStmt)
    SETOP    reduce using rule 29 (iterStmt)
    ID       reduce using rule 29 (iterStmt)
    IF       reduce using rule 29 (iterStmt)
    ELSE     reduce using rule 29 (iterStmt)
    FOR      reduce using rule 29 (iterStmt)
    RETURN   reduce using rule 29 (iterStmt)
    FORALL   reduce using rule 29 (iterStmt)
    IS_SET   reduce using rule 29 (iterStmt)
    EXISTS   reduce using rule 29 (iterStmt)
    NEG      reduce using rule 29 (iterStmt)
    READ     reduce using rule 29 (iterStmt)
    WRITE    reduce using rule 29 (iterStmt)
    WRITELN  reduce using rule 29 (iterStmt)
    INTEGER  reduce using rule 29 (iterStmt)
    FLOAT    reduce using rule 29 (iterStmt)
    EMPTY    reduce using rule 29 (iterStmt)
    ';'      reduce using rule 29 (iterStmt)
    '('      reduce using rule 29 (iterStmt)
    '}'      reduce using rule 29 (iterStmt)


State 351

   28 iterStmt: FORALL '(' pertExpr ')' . body

    error    shift, and go to state 228
    TYPE     shift, and go to state 229
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 230
    FOR      shift, and go to state 231
    RETURN   shift, and go to state 232
    FORALL   shift, and go to state 233
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 234
    '('      shift, and go to state 47
    '{'      shift, and go to state 146

    varDecl     go to state 147
    funcDecl    go to state 148
    stmt        go to state 149
    iterStmt    go to state 235
    body        go to state 362
    condStmt    go to state 236
    returnStmt  go to state 237
    exprStmt    go to state 238
    expression  go to state 239
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 352

   12 funcDecl: TYPE new_id '(' error ')' . '{'

    '{'  shift, and go to state 363


State 353

   11 funcDecl: TYPE new_id '(' arguments ')' . '{' funcBody '}'

    '{'  shift, and go to state 364


State 354

   89 set: SETOP '(' pertExpr . ')'

    ')'  shift, and go to state 365


State 355

   89 set: SETOP '(' pertExpr . ')'

    ')'  shift, and go to state 366


State 356

   89 set: SETOP '(' pertExpr . ')'

    ')'  shift, and go to state 367


State 357

   12 funcDecl: TYPE new_id '(' error ')' . '{'

    '{'  shift, and go to state 368


State 358

   11 funcDecl: TYPE new_id '(' arguments ')' . '{' funcBody '}'

    '{'  shift, and go to state 369


State 359

   35 condStmt: IF '(' expression ')' body .
   36         | IF '(' expression ')' body . ELSE body

    ELSE  shift, and go to state 370

    error    reduce using rule 35 (condStmt)
    TYPE     reduce using rule 35 (condStmt)
    SETOP    reduce using rule 35 (condStmt)
    ID       reduce using rule 35 (condStmt)
    IF       reduce using rule 35 (condStmt)
    FOR      reduce using rule 35 (condStmt)
    RETURN   reduce using rule 35 (condStmt)
    FORALL   reduce using rule 35 (condStmt)
    IS_SET   reduce using rule 35 (condStmt)
    EXISTS   reduce using rule 35 (condStmt)
    NEG      reduce using rule 35 (condStmt)
    READ     reduce using rule 35 (condStmt)
    WRITE    reduce using rule 35 (condStmt)
    WRITELN  reduce using rule 35 (condStmt)
    INTEGER  reduce using rule 35 (condStmt)
    FLOAT    reduce using rule 35 (condStmt)
    EMPTY    reduce using rule 35 (condStmt)
    ';'      reduce using rule 35 (condStmt)
    '('      reduce using rule 35 (condStmt)
    '}'      reduce using rule 35 (condStmt)


State 360

   26 iterStmt: FOR '(' exprStmt exprStmt ')' . body

    error    shift, and go to state 228
    TYPE     shift, and go to state 229
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 230
    FOR      shift, and go to state 231
    RETURN   shift, and go to state 232
    FORALL   shift, and go to state 233
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 234
    '('      shift, and go to state 47
    '{'      shift, and go to state 146

    varDecl     go to state 147
    funcDecl    go to state 148
    stmt        go to state 149
    iterStmt    go to state 235
    body        go to state 371
    condStmt    go to state 236
    returnStmt  go to state 237
    exprStmt    go to state 238
    expression  go to state 239
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 361

   27 iterStmt: FOR '(' exprStmt exprStmt expression . ')' body

    ')'  shift, and go to state 372


State 362

   28 iterStmt: FORALL '(' pertExpr ')' body .

    error    reduce using rule 28 (iterStmt)
    TYPE     reduce using rule 28 (iterStmt)
    SETOP    reduce using rule 28 (iterStmt)
    ID       reduce using rule 28 (iterStmt)
    IF       reduce using rule 28 (iterStmt)
    ELSE     reduce using rule 28 (iterStmt)
    FOR      reduce using rule 28 (iterStmt)
    RETURN   reduce using rule 28 (iterStmt)
    FORALL   reduce using rule 28 (iterStmt)
    IS_SET   reduce using rule 28 (iterStmt)
    EXISTS   reduce using rule 28 (iterStmt)
    NEG      reduce using rule 28 (iterStmt)
    READ     reduce using rule 28 (iterStmt)
    WRITE    reduce using rule 28 (iterStmt)
    WRITELN  reduce using rule 28 (iterStmt)
    INTEGER  reduce using rule 28 (iterStmt)
    FLOAT    reduce using rule 28 (iterStmt)
    EMPTY    reduce using rule 28 (iterStmt)
    ';'      reduce using rule 28 (iterStmt)
    '('      reduce using rule 28 (iterStmt)
    '}'      reduce using rule 28 (iterStmt)


State 363

   12 funcDecl: TYPE new_id '(' error ')' '{' .

    error    reduce using rule 12 (funcDecl)
    TYPE     reduce using rule 12 (funcDecl)
    SETOP    reduce using rule 12 (funcDecl)
    ID       reduce using rule 12 (funcDecl)
    IF       reduce using rule 12 (funcDecl)
    FOR      reduce using rule 12 (funcDecl)
    RETURN   reduce using rule 12 (funcDecl)
    FORALL   reduce using rule 12 (funcDecl)
    IS_SET   reduce using rule 12 (funcDecl)
    EXISTS   reduce using rule 12 (funcDecl)
    NEG      reduce using rule 12 (funcDecl)
    READ     reduce using rule 12 (funcDecl)
    WRITE    reduce using rule 12 (funcDecl)
    WRITELN  reduce using rule 12 (funcDecl)
    INTEGER  reduce using rule 12 (funcDecl)
    FLOAT    reduce using rule 12 (funcDecl)
    EMPTY    reduce using rule 12 (funcDecl)
    ';'      reduce using rule 12 (funcDecl)
    '('      reduce using rule 12 (funcDecl)
    '}'      reduce using rule 12 (funcDecl)


State 364

   11 funcDecl: TYPE new_id '(' arguments ')' '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)

    funcBody  go to state 373


State 365

   89 set: SETOP '(' pertExpr ')' .

    RELOP   reduce using rule 89 (set)
    ARTOP1  reduce using rule 89 (set)
    ARTOP2  reduce using rule 89 (set)
    DISJ    reduce using rule 89 (set)
    CONJ    reduce using rule 89 (set)
    ')'     reduce using rule 89 (set)


State 366

   89 set: SETOP '(' pertExpr ')' .

    ')'  reduce using rule 89 (set)


State 367

   89 set: SETOP '(' pertExpr ')' .

    RELOP   reduce using rule 89 (set)
    ARTOP1  reduce using rule 89 (set)
    ARTOP2  reduce using rule 89 (set)
    DISJ    reduce using rule 89 (set)
    CONJ    reduce using rule 89 (set)
    ','     reduce using rule 89 (set)
    ')'     reduce using rule 89 (set)


State 368

   12 funcDecl: TYPE new_id '(' error ')' '{' .

    error    reduce using rule 12 (funcDecl)
    TYPE     reduce using rule 12 (funcDecl)
    SETOP    reduce using rule 12 (funcDecl)
    ID       reduce using rule 12 (funcDecl)
    IF       reduce using rule 12 (funcDecl)
    ELSE     reduce using rule 12 (funcDecl)
    FOR      reduce using rule 12 (funcDecl)
    RETURN   reduce using rule 12 (funcDecl)
    FORALL   reduce using rule 12 (funcDecl)
    IS_SET   reduce using rule 12 (funcDecl)
    EXISTS   reduce using rule 12 (funcDecl)
    NEG      reduce using rule 12 (funcDecl)
    READ     reduce using rule 12 (funcDecl)
    WRITE    reduce using rule 12 (funcDecl)
    WRITELN  reduce using rule 12 (funcDecl)
    INTEGER  reduce using rule 12 (funcDecl)
    FLOAT    reduce using rule 12 (funcDecl)
    EMPTY    reduce using rule 12 (funcDecl)
    ';'      reduce using rule 12 (funcDecl)
    '('      reduce using rule 12 (funcDecl)
    '}'      reduce using rule 12 (funcDecl)


State 369

   11 funcDecl: TYPE new_id '(' arguments ')' '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)

    funcBody  go to state 374


State 370

   36 condStmt: IF '(' expression ')' body ELSE . body

    error    shift, and go to state 228
    TYPE     shift, and go to state 229
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 230
    FOR      shift, and go to state 231
    RETURN   shift, and go to state 232
    FORALL   shift, and go to state 233
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 234
    '('      shift, and go to state 47
    '{'      shift, and go to state 146

    varDecl     go to state 147
    funcDecl    go to state 148
    stmt        go to state 149
    iterStmt    go to state 235
    body        go to state 375
    condStmt    go to state 236
    returnStmt  go to state 237
    exprStmt    go to state 238
    expression  go to state 239
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 371

   26 iterStmt: FOR '(' exprStmt exprStmt ')' body .

    error    reduce using rule 26 (iterStmt)
    TYPE     reduce using rule 26 (iterStmt)
    SETOP    reduce using rule 26 (iterStmt)
    ID       reduce using rule 26 (iterStmt)
    IF       reduce using rule 26 (iterStmt)
    ELSE     reduce using rule 26 (iterStmt)
    FOR      reduce using rule 26 (iterStmt)
    RETURN   reduce using rule 26 (iterStmt)
    FORALL   reduce using rule 26 (iterStmt)
    IS_SET   reduce using rule 26 (iterStmt)
    EXISTS   reduce using rule 26 (iterStmt)
    NEG      reduce using rule 26 (iterStmt)
    READ     reduce using rule 26 (iterStmt)
    WRITE    reduce using rule 26 (iterStmt)
    WRITELN  reduce using rule 26 (iterStmt)
    INTEGER  reduce using rule 26 (iterStmt)
    FLOAT    reduce using rule 26 (iterStmt)
    EMPTY    reduce using rule 26 (iterStmt)
    ';'      reduce using rule 26 (iterStmt)
    '('      reduce using rule 26 (iterStmt)
    '}'      reduce using rule 26 (iterStmt)


State 372

   27 iterStmt: FOR '(' exprStmt exprStmt expression ')' . body

    error    shift, and go to state 228
    TYPE     shift, and go to state 229
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 230
    FOR      shift, and go to state 231
    RETURN   shift, and go to state 232
    FORALL   shift, and go to state 233
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 234
    '('      shift, and go to state 47
    '{'      shift, and go to state 146

    varDecl     go to state 147
    funcDecl    go to state 148
    stmt        go to state 149
    iterStmt    go to state 235
    body        go to state 376
    condStmt    go to state 236
    returnStmt  go to state 237
    exprStmt    go to state 238
    expression  go to state 239
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 373

   11 funcDecl: TYPE new_id '(' arguments ')' '{' funcBody . '}'
   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt

    error    shift, and go to state 30
    TYPE     shift, and go to state 165
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 33
    FOR      shift, and go to state 34
    RETURN   shift, and go to state 35
    FORALL   shift, and go to state 36
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 46
    '('      shift, and go to state 47
    '}'      shift, and go to state 377

    varDecl     go to state 49
    funcDecl    go to state 50
    stmt        go to state 51
    iterStmt    go to state 52
    condStmt    go to state 53
    returnStmt  go to state 54
    exprStmt    go to state 55
    expression  go to state 56
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 374

   11 funcDecl: TYPE new_id '(' arguments ')' '{' funcBody . '}'
   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt

    error    shift, and go to state 30
    TYPE     shift, and go to state 165
    SETOP    shift, and go to state 31
    ID       shift, and go to state 32
    IF       shift, and go to state 33
    FOR      shift, and go to state 34
    RETURN   shift, and go to state 35
    FORALL   shift, and go to state 36
    IS_SET   shift, and go to state 37
    EXISTS   shift, and go to state 38
    NEG      shift, and go to state 39
    READ     shift, and go to state 40
    WRITE    shift, and go to state 41
    WRITELN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    FLOAT    shift, and go to state 44
    EMPTY    shift, and go to state 45
    ';'      shift, and go to state 46
    '('      shift, and go to state 47
    '}'      shift, and go to state 378

    varDecl     go to state 49
    funcDecl    go to state 50
    stmt        go to state 51
    iterStmt    go to state 52
    condStmt    go to state 53
    returnStmt  go to state 54
    exprStmt    go to state 55
    expression  go to state 56
    assign      go to state 57
    var         go to state 58
    inExpr      go to state 59
    outExpr     go to state 60
    simpleExpr  go to state 61
    disjExpr    go to state 62
    negExpr     go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69
    pertExpr    go to state 70
    setExpr     go to state 71
    elem        go to state 72


State 375

   36 condStmt: IF '(' expression ')' body ELSE body .

    error    reduce using rule 36 (condStmt)
    TYPE     reduce using rule 36 (condStmt)
    SETOP    reduce using rule 36 (condStmt)
    ID       reduce using rule 36 (condStmt)
    IF       reduce using rule 36 (condStmt)
    ELSE     reduce using rule 36 (condStmt)
    FOR      reduce using rule 36 (condStmt)
    RETURN   reduce using rule 36 (condStmt)
    FORALL   reduce using rule 36 (condStmt)
    IS_SET   reduce using rule 36 (condStmt)
    EXISTS   reduce using rule 36 (condStmt)
    NEG      reduce using rule 36 (condStmt)
    READ     reduce using rule 36 (condStmt)
    WRITE    reduce using rule 36 (condStmt)
    WRITELN  reduce using rule 36 (condStmt)
    INTEGER  reduce using rule 36 (condStmt)
    FLOAT    reduce using rule 36 (condStmt)
    EMPTY    reduce using rule 36 (condStmt)
    ';'      reduce using rule 36 (condStmt)
    '('      reduce using rule 36 (condStmt)
    '}'      reduce using rule 36 (condStmt)


State 376

   27 iterStmt: FOR '(' exprStmt exprStmt expression ')' body .

    error    reduce using rule 27 (iterStmt)
    TYPE     reduce using rule 27 (iterStmt)
    SETOP    reduce using rule 27 (iterStmt)
    ID       reduce using rule 27 (iterStmt)
    IF       reduce using rule 27 (iterStmt)
    ELSE     reduce using rule 27 (iterStmt)
    FOR      reduce using rule 27 (iterStmt)
    RETURN   reduce using rule 27 (iterStmt)
    FORALL   reduce using rule 27 (iterStmt)
    IS_SET   reduce using rule 27 (iterStmt)
    EXISTS   reduce using rule 27 (iterStmt)
    NEG      reduce using rule 27 (iterStmt)
    READ     reduce using rule 27 (iterStmt)
    WRITE    reduce using rule 27 (iterStmt)
    WRITELN  reduce using rule 27 (iterStmt)
    INTEGER  reduce using rule 27 (iterStmt)
    FLOAT    reduce using rule 27 (iterStmt)
    EMPTY    reduce using rule 27 (iterStmt)
    ';'      reduce using rule 27 (iterStmt)
    '('      reduce using rule 27 (iterStmt)
    '}'      reduce using rule 27 (iterStmt)


State 377

   11 funcDecl: TYPE new_id '(' arguments ')' '{' funcBody '}' .

    error    reduce using rule 11 (funcDecl)
    TYPE     reduce using rule 11 (funcDecl)
    SETOP    reduce using rule 11 (funcDecl)
    ID       reduce using rule 11 (funcDecl)
    IF       reduce using rule 11 (funcDecl)
    FOR      reduce using rule 11 (funcDecl)
    RETURN   reduce using rule 11 (funcDecl)
    FORALL   reduce using rule 11 (funcDecl)
    IS_SET   reduce using rule 11 (funcDecl)
    EXISTS   reduce using rule 11 (funcDecl)
    NEG      reduce using rule 11 (funcDecl)
    READ     reduce using rule 11 (funcDecl)
    WRITE    reduce using rule 11 (funcDecl)
    WRITELN  reduce using rule 11 (funcDecl)
    INTEGER  reduce using rule 11 (funcDecl)
    FLOAT    reduce using rule 11 (funcDecl)
    EMPTY    reduce using rule 11 (funcDecl)
    ';'      reduce using rule 11 (funcDecl)
    '('      reduce using rule 11 (funcDecl)
    '}'      reduce using rule 11 (funcDecl)


State 378

   11 funcDecl: TYPE new_id '(' arguments ')' '{' funcBody '}' .

    error    reduce using rule 11 (funcDecl)
    TYPE     reduce using rule 11 (funcDecl)
    SETOP    reduce using rule 11 (funcDecl)
    ID       reduce using rule 11 (funcDecl)
    IF       reduce using rule 11 (funcDecl)
    ELSE     reduce using rule 11 (funcDecl)
    FOR      reduce using rule 11 (funcDecl)
    RETURN   reduce using rule 11 (funcDecl)
    FORALL   reduce using rule 11 (funcDecl)
    IS_SET   reduce using rule 11 (funcDecl)
    EXISTS   reduce using rule 11 (funcDecl)
    NEG      reduce using rule 11 (funcDecl)
    READ     reduce using rule 11 (funcDecl)
    WRITE    reduce using rule 11 (funcDecl)
    WRITELN  reduce using rule 11 (funcDecl)
    INTEGER  reduce using rule 11 (funcDecl)
    FLOAT    reduce using rule 11 (funcDecl)
    EMPTY    reduce using rule 11 (funcDecl)
    ';'      reduce using rule 11 (funcDecl)
    '('      reduce using rule 11 (funcDecl)
    '}'      reduce using rule 11 (funcDecl)
