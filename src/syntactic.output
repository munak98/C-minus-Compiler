Grammar

    0 $accept: begin $end

    1 begin: program

    2 program: program declaration
    3        | %empty

    4 declaration: varDecl
    5            | funcDecl

    6 varDecl: TYPE varList ';'
    7        | TYPE error

    8 varList: varList ',' new_id
    9        | new_id

   10 new_id: ID

   11 $@1: %empty

   12 $@2: %empty

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody '}'

   14 arguments: '(' ')'
   15          | '(' argsList ')'
   16          | '(' error ')'

   17 argsList: argsList ',' arg
   18         | arg

   19 arg: TYPE ID

   20 funcBody: %empty
   21         | funcBody varDecl
   22         | funcBody funcDecl
   23         | funcBody stmt

   24 stmt: exprStmt
   25     | returnStmt
   26     | iterStmt
   27     | condStmt

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope body
   29         | FOR '(' exprStmt exprStmt expression ')' prepareScope body
   30         | FORALL '(' simpleExpr ')' prepareScope body
   31         | FORALL '(' error ')' prepareScope body
   32         | FOR '(' error ')' prepareScope body

   33 body: '{' funcBody '}'
   34     | stmt
   35     | varDecl
   36     | funcDecl

   37 condStmt: IF cond prepareScope body

   38 $@3: %empty

   39 condStmt: IF cond prepareScope body ELSE $@3 body

   40 prepareScope: %empty

   41 cond: '(' expression ')'
   42     | '(' error ')'

   43 returnStmt: RETURN exprStmt

   44 exprStmt: expression ';'
   45         | error
   46         | ';'

   47 expression: assign
   48           | inExpr
   49           | outExpr
   50           | simpleExpr

   51 assign: var '=' simpleExpr

   52 var: ID

   53 inExpr: READ '(' var ')'

   54 outExpr: WRITE '(' output ')'
   55        | WRITELN '(' output ')'

   56 output: var
   57       | CHAR
   58       | STRING

   59 simpleExpr: simpleExpr IN negExpr
   60           | negExpr

   61 negExpr: NEG negExpr
   62        | disjExpr

   63 disjExpr: disjExpr DISJ conjExpr
   64         | conjExpr

   65 conjExpr: conjExpr CONJ relExpr
   66         | relExpr

   67 relExpr: relExpr RELOP artExpr1
   68        | artExpr1

   69 artExpr1: artExpr1 ARTOP1 artExpr2
   70         | artExpr2

   71 artExpr2: artExpr2 ARTOP2 factor
   72         | factor

   73 factor: ID
   74       | '(' simpleExpr ')'
   75       | constant
   76       | call
   77       | IS_SET '(' factor ')'
   78       | EXISTS '(' simpleExpr ')'
   79       | SETOP '(' simpleExpr ')'

   80 constant: INTEGER
   81         | FLOAT
   82         | EMPTY

   83 call: var '(' params ')'

   84 params: %empty
   85       | paramList

   86 paramList: paramList ',' simpleExpr
   87          | simpleExpr


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 14 15 16 28 29 30 31 32 41 42 53 54 55 74 77 78 79 83
    ')' (41) 14 15 16 28 29 30 31 32 41 42 53 54 55 74 77 78 79 83
    ',' (44) 8 17 86
    ';' (59) 6 44 46
    '=' (61) 51
    '{' (123) 13 33
    '}' (125) 13 33
    error (256) 7 16 31 32 42 45
    TYPE <ival> (258) 6 7 13 19
    RELOP <ival> (259) 67
    SETOP <ival> (260) 79
    ARTOP1 <ival> (261) 69
    ARTOP2 <ival> (262) 71
    ID <sval> (263) 10 13 19 52 73
    IF (264) 37 39
    ELSE (265) 39
    FOR (266) 28 29 32
    RETURN (267) 43
    FORALL (268) 30 31
    IN (269) 59
    IS_SET (270) 77
    EXISTS (271) 78
    DISJ (272) 63
    CONJ (273) 65
    NEG (274) 61
    READ (275) 53
    WRITE (276) 54
    WRITELN (277) 55
    INTEGER <ival> (278) 80
    FLOAT <fval> (279) 81
    CHAR <cval> (280) 57
    STRING <sval> (281) 58
    EMPTY (282) 82
    THEN (283)


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    begin (37)
        on left: 1
        on right: 0
    program <tnode> (38)
        on left: 2 3
        on right: 1 2
    declaration <tnode> (39)
        on left: 4 5
        on right: 2
    varDecl <tnode> (40)
        on left: 6 7
        on right: 4 21 35
    varList <tnode> (41)
        on left: 8 9
        on right: 6 8
    new_id <tnode> (42)
        on left: 10
        on right: 8 9
    funcDecl <tnode> (43)
        on left: 13
        on right: 5 22 36
    $@1 (44)
        on left: 11
        on right: 13
    $@2 (45)
        on left: 12
        on right: 13
    arguments <tnode> (46)
        on left: 14 15 16
        on right: 13
    argsList <tnode> (47)
        on left: 17 18
        on right: 15 17
    arg <tnode> (48)
        on left: 19
        on right: 17 18
    funcBody <tnode> (49)
        on left: 20 21 22 23
        on right: 13 21 22 23 33
    stmt <tnode> (50)
        on left: 24 25 26 27
        on right: 23 34
    iterStmt <tnode> (51)
        on left: 28 29 30 31 32
        on right: 26
    body <tnode> (52)
        on left: 33 34 35 36
        on right: 28 29 30 31 32 37 39
    condStmt <tnode> (53)
        on left: 37 39
        on right: 27
    $@3 (54)
        on left: 38
        on right: 39
    prepareScope (55)
        on left: 40
        on right: 28 29 30 31 32 37 39
    cond <tnode> (56)
        on left: 41 42
        on right: 37 39
    returnStmt <tnode> (57)
        on left: 43
        on right: 25
    exprStmt <tnode> (58)
        on left: 44 45 46
        on right: 24 28 29 43
    expression <tnode> (59)
        on left: 47 48 49 50
        on right: 29 41 44
    assign <tnode> (60)
        on left: 51
        on right: 47
    var <tnode> (61)
        on left: 52
        on right: 51 53 56 83
    inExpr <tnode> (62)
        on left: 53
        on right: 48
    outExpr <tnode> (63)
        on left: 54 55
        on right: 49
    output <tnode> (64)
        on left: 56 57 58
        on right: 54 55
    simpleExpr <tnode> (65)
        on left: 59 60
        on right: 30 50 51 59 74 78 79 86 87
    negExpr <tnode> (66)
        on left: 61 62
        on right: 59 60 61
    disjExpr <tnode> (67)
        on left: 63 64
        on right: 62 63
    conjExpr <tnode> (68)
        on left: 65 66
        on right: 63 64 65
    relExpr <tnode> (69)
        on left: 67 68
        on right: 65 66 67
    artExpr1 <tnode> (70)
        on left: 69 70
        on right: 67 68 69
    artExpr2 <tnode> (71)
        on left: 71 72
        on right: 69 70 71
    factor <tnode> (72)
        on left: 73 74 75 76 77 78 79
        on right: 71 72 77
    constant <tnode> (73)
        on left: 80 81 82
        on right: 75
    call <tnode> (74)
        on left: 83
        on right: 76
    params <tnode> (75)
        on left: 84 85
        on right: 83
    paramList <tnode> (76)
        on left: 86 87
        on right: 85 86


State 0

    0 $accept: . begin $end

    $end  reduce using rule 3 (program)
    TYPE  reduce using rule 3 (program)

    begin    go to state 1
    program  go to state 2


State 1

    0 $accept: begin . $end

    $end  shift, and go to state 3


State 2

    1 begin: program .
    2 program: program . declaration

    TYPE  shift, and go to state 4

    $end  reduce using rule 1 (begin)

    declaration  go to state 5
    varDecl      go to state 6
    funcDecl     go to state 7


State 3

    0 $accept: begin $end .

    $default  accept


State 4

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error
   13 funcDecl: TYPE . ID $@1 arguments $@2 '{' funcBody '}'

    error  shift, and go to state 8
    ID     shift, and go to state 9

    varList  go to state 10
    new_id   go to state 11


State 5

    2 program: program declaration .

    $end  reduce using rule 2 (program)
    TYPE  reduce using rule 2 (program)


State 6

    4 declaration: varDecl .

    $end  reduce using rule 4 (declaration)
    TYPE  reduce using rule 4 (declaration)


State 7

    5 declaration: funcDecl .

    $end  reduce using rule 5 (declaration)
    TYPE  reduce using rule 5 (declaration)


State 8

    7 varDecl: TYPE error .

    $end  reduce using rule 7 (varDecl)
    TYPE  reduce using rule 7 (varDecl)


State 9

   10 new_id: ID .
   13 funcDecl: TYPE ID . $@1 arguments $@2 '{' funcBody '}'

    ';'  reduce using rule 10 (new_id)
    ','  reduce using rule 10 (new_id)
    '('  reduce using rule 11 ($@1)

    $@1  go to state 12


State 10

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 13
    ','  shift, and go to state 14


State 11

    9 varList: new_id .

    ';'  reduce using rule 9 (varList)
    ','  reduce using rule 9 (varList)


State 12

   13 funcDecl: TYPE ID $@1 . arguments $@2 '{' funcBody '}'

    '('  shift, and go to state 15

    arguments  go to state 16


State 13

    6 varDecl: TYPE varList ';' .

    $end  reduce using rule 6 (varDecl)
    TYPE  reduce using rule 6 (varDecl)


State 14

    8 varList: varList ',' . new_id

    ID  shift, and go to state 17

    new_id  go to state 18


State 15

   14 arguments: '(' . ')'
   15          | '(' . argsList ')'
   16          | '(' . error ')'

    error  shift, and go to state 19
    TYPE   shift, and go to state 20
    ')'    shift, and go to state 21

    argsList  go to state 22
    arg       go to state 23


State 16

   13 funcDecl: TYPE ID $@1 arguments . $@2 '{' funcBody '}'

    '{'  reduce using rule 12 ($@2)

    $@2  go to state 24


State 17

   10 new_id: ID .

    ';'  reduce using rule 10 (new_id)
    ','  reduce using rule 10 (new_id)


State 18

    8 varList: varList ',' new_id .

    ';'  reduce using rule 8 (varList)
    ','  reduce using rule 8 (varList)


State 19

   16 arguments: '(' error . ')'

    ')'  shift, and go to state 25


State 20

   19 arg: TYPE . ID

    ID  shift, and go to state 26


State 21

   14 arguments: '(' ')' .

    '{'  reduce using rule 14 (arguments)


State 22

   15 arguments: '(' argsList . ')'
   17 argsList: argsList . ',' arg

    ','  shift, and go to state 27
    ')'  shift, and go to state 28


State 23

   18 argsList: arg .

    ','  reduce using rule 18 (argsList)
    ')'  reduce using rule 18 (argsList)


State 24

   13 funcDecl: TYPE ID $@1 arguments $@2 . '{' funcBody '}'

    '{'  shift, and go to state 29


State 25

   16 arguments: '(' error ')' .

    '{'  reduce using rule 16 (arguments)


State 26

   19 arg: TYPE ID .

    ','  reduce using rule 19 (arg)
    ')'  reduce using rule 19 (arg)


State 27

   17 argsList: argsList ',' . arg

    TYPE  shift, and go to state 20

    arg  go to state 30


State 28

   15 arguments: '(' argsList ')' .

    '{'  reduce using rule 15 (arguments)


State 29

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' . funcBody '}'

    error    reduce using rule 20 (funcBody)
    TYPE     reduce using rule 20 (funcBody)
    SETOP    reduce using rule 20 (funcBody)
    ID       reduce using rule 20 (funcBody)
    IF       reduce using rule 20 (funcBody)
    FOR      reduce using rule 20 (funcBody)
    RETURN   reduce using rule 20 (funcBody)
    FORALL   reduce using rule 20 (funcBody)
    IS_SET   reduce using rule 20 (funcBody)
    EXISTS   reduce using rule 20 (funcBody)
    NEG      reduce using rule 20 (funcBody)
    READ     reduce using rule 20 (funcBody)
    WRITE    reduce using rule 20 (funcBody)
    WRITELN  reduce using rule 20 (funcBody)
    INTEGER  reduce using rule 20 (funcBody)
    FLOAT    reduce using rule 20 (funcBody)
    EMPTY    reduce using rule 20 (funcBody)
    ';'      reduce using rule 20 (funcBody)
    '}'      reduce using rule 20 (funcBody)
    '('      reduce using rule 20 (funcBody)

    funcBody  go to state 31


State 30

   17 argsList: argsList ',' arg .

    ','  reduce using rule 17 (argsList)
    ')'  reduce using rule 17 (argsList)


State 31

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody . '}'
   21 funcBody: funcBody . varDecl
   22         | funcBody . funcDecl
   23         | funcBody . stmt

    error    shift, and go to state 32
    TYPE     shift, and go to state 162
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 35
    FOR      shift, and go to state 36
    RETURN   shift, and go to state 37
    FORALL   shift, and go to state 38
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 48
    '}'      shift, and go to state 49
    '('      shift, and go to state 50

    varDecl     go to state 51
    funcDecl    go to state 52
    stmt        go to state 53
    iterStmt    go to state 54
    condStmt    go to state 55
    returnStmt  go to state 56
    exprStmt    go to state 57
    expression  go to state 58
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 32

   45 exprStmt: error .

    error    reduce using rule 45 (exprStmt)
    TYPE     reduce using rule 45 (exprStmt)
    SETOP    reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IF       reduce using rule 45 (exprStmt)
    FOR      reduce using rule 45 (exprStmt)
    RETURN   reduce using rule 45 (exprStmt)
    FORALL   reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    ';'      reduce using rule 45 (exprStmt)
    '}'      reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)


State 33

   79 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 73


State 34

   52 var: ID .
   73 factor: ID .

    RELOP   reduce using rule 73 (factor)
    ARTOP1  reduce using rule 73 (factor)
    ARTOP2  reduce using rule 73 (factor)
    IN      reduce using rule 73 (factor)
    DISJ    reduce using rule 73 (factor)
    CONJ    reduce using rule 73 (factor)
    ';'     reduce using rule 73 (factor)
    '('     reduce using rule 52 (var)
    '='     reduce using rule 52 (var)


State 35

   37 condStmt: IF . cond prepareScope body
   39         | IF . cond prepareScope body ELSE $@3 body

    '('  shift, and go to state 74

    cond  go to state 75


State 36

   28 iterStmt: FOR . '(' exprStmt exprStmt ')' prepareScope body
   29         | FOR . '(' exprStmt exprStmt expression ')' prepareScope body
   32         | FOR . '(' error ')' prepareScope body

    '('  shift, and go to state 76


State 37

   43 returnStmt: RETURN . exprStmt

    error    shift, and go to state 32
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 48
    '('      shift, and go to state 50

    exprStmt    go to state 77
    expression  go to state 58
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 38

   30 iterStmt: FORALL . '(' simpleExpr ')' prepareScope body
   31         | FORALL . '(' error ')' prepareScope body

    '('  shift, and go to state 78


State 39

   77 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 79


State 40

   78 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 80


State 41

   61 negExpr: NEG . negExpr

    SETOP    shift, and go to state 33
    ID       shift, and go to state 163
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    '('      shift, and go to state 50

    var       go to state 81
    negExpr   go to state 82
    disjExpr  go to state 65
    conjExpr  go to state 66
    relExpr   go to state 67
    artExpr1  go to state 68
    artExpr2  go to state 69
    factor    go to state 70
    constant  go to state 71
    call      go to state 72


State 42

   53 inExpr: READ . '(' var ')'

    '('  shift, and go to state 83


State 43

   54 outExpr: WRITE . '(' output ')'

    '('  shift, and go to state 84


State 44

   55 outExpr: WRITELN . '(' output ')'

    '('  shift, and go to state 85


State 45

   80 constant: INTEGER .

    RELOP   reduce using rule 80 (constant)
    ARTOP1  reduce using rule 80 (constant)
    ARTOP2  reduce using rule 80 (constant)
    IN      reduce using rule 80 (constant)
    DISJ    reduce using rule 80 (constant)
    CONJ    reduce using rule 80 (constant)
    ';'     reduce using rule 80 (constant)


State 46

   81 constant: FLOAT .

    RELOP   reduce using rule 81 (constant)
    ARTOP1  reduce using rule 81 (constant)
    ARTOP2  reduce using rule 81 (constant)
    IN      reduce using rule 81 (constant)
    DISJ    reduce using rule 81 (constant)
    CONJ    reduce using rule 81 (constant)
    ';'     reduce using rule 81 (constant)


State 47

   82 constant: EMPTY .

    RELOP   reduce using rule 82 (constant)
    ARTOP1  reduce using rule 82 (constant)
    ARTOP2  reduce using rule 82 (constant)
    IN      reduce using rule 82 (constant)
    DISJ    reduce using rule 82 (constant)
    CONJ    reduce using rule 82 (constant)
    ';'     reduce using rule 82 (constant)


State 48

   46 exprStmt: ';' .

    error    reduce using rule 46 (exprStmt)
    TYPE     reduce using rule 46 (exprStmt)
    SETOP    reduce using rule 46 (exprStmt)
    ID       reduce using rule 46 (exprStmt)
    IF       reduce using rule 46 (exprStmt)
    FOR      reduce using rule 46 (exprStmt)
    RETURN   reduce using rule 46 (exprStmt)
    FORALL   reduce using rule 46 (exprStmt)
    IS_SET   reduce using rule 46 (exprStmt)
    EXISTS   reduce using rule 46 (exprStmt)
    NEG      reduce using rule 46 (exprStmt)
    READ     reduce using rule 46 (exprStmt)
    WRITE    reduce using rule 46 (exprStmt)
    WRITELN  reduce using rule 46 (exprStmt)
    INTEGER  reduce using rule 46 (exprStmt)
    FLOAT    reduce using rule 46 (exprStmt)
    EMPTY    reduce using rule 46 (exprStmt)
    ';'      reduce using rule 46 (exprStmt)
    '}'      reduce using rule 46 (exprStmt)
    '('      reduce using rule 46 (exprStmt)


State 49

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody '}' .

    $end  reduce using rule 13 (funcDecl)
    TYPE  reduce using rule 13 (funcDecl)


State 50

   74 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 86
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 51

   21 funcBody: funcBody varDecl .

    error    reduce using rule 21 (funcBody)
    TYPE     reduce using rule 21 (funcBody)
    SETOP    reduce using rule 21 (funcBody)
    ID       reduce using rule 21 (funcBody)
    IF       reduce using rule 21 (funcBody)
    FOR      reduce using rule 21 (funcBody)
    RETURN   reduce using rule 21 (funcBody)
    FORALL   reduce using rule 21 (funcBody)
    IS_SET   reduce using rule 21 (funcBody)
    EXISTS   reduce using rule 21 (funcBody)
    NEG      reduce using rule 21 (funcBody)
    READ     reduce using rule 21 (funcBody)
    WRITE    reduce using rule 21 (funcBody)
    WRITELN  reduce using rule 21 (funcBody)
    INTEGER  reduce using rule 21 (funcBody)
    FLOAT    reduce using rule 21 (funcBody)
    EMPTY    reduce using rule 21 (funcBody)
    ';'      reduce using rule 21 (funcBody)
    '}'      reduce using rule 21 (funcBody)
    '('      reduce using rule 21 (funcBody)


State 52

   22 funcBody: funcBody funcDecl .

    error    reduce using rule 22 (funcBody)
    TYPE     reduce using rule 22 (funcBody)
    SETOP    reduce using rule 22 (funcBody)
    ID       reduce using rule 22 (funcBody)
    IF       reduce using rule 22 (funcBody)
    FOR      reduce using rule 22 (funcBody)
    RETURN   reduce using rule 22 (funcBody)
    FORALL   reduce using rule 22 (funcBody)
    IS_SET   reduce using rule 22 (funcBody)
    EXISTS   reduce using rule 22 (funcBody)
    NEG      reduce using rule 22 (funcBody)
    READ     reduce using rule 22 (funcBody)
    WRITE    reduce using rule 22 (funcBody)
    WRITELN  reduce using rule 22 (funcBody)
    INTEGER  reduce using rule 22 (funcBody)
    FLOAT    reduce using rule 22 (funcBody)
    EMPTY    reduce using rule 22 (funcBody)
    ';'      reduce using rule 22 (funcBody)
    '}'      reduce using rule 22 (funcBody)
    '('      reduce using rule 22 (funcBody)


State 53

   23 funcBody: funcBody stmt .

    error    reduce using rule 23 (funcBody)
    TYPE     reduce using rule 23 (funcBody)
    SETOP    reduce using rule 23 (funcBody)
    ID       reduce using rule 23 (funcBody)
    IF       reduce using rule 23 (funcBody)
    FOR      reduce using rule 23 (funcBody)
    RETURN   reduce using rule 23 (funcBody)
    FORALL   reduce using rule 23 (funcBody)
    IS_SET   reduce using rule 23 (funcBody)
    EXISTS   reduce using rule 23 (funcBody)
    NEG      reduce using rule 23 (funcBody)
    READ     reduce using rule 23 (funcBody)
    WRITE    reduce using rule 23 (funcBody)
    WRITELN  reduce using rule 23 (funcBody)
    INTEGER  reduce using rule 23 (funcBody)
    FLOAT    reduce using rule 23 (funcBody)
    EMPTY    reduce using rule 23 (funcBody)
    ';'      reduce using rule 23 (funcBody)
    '}'      reduce using rule 23 (funcBody)
    '('      reduce using rule 23 (funcBody)


State 54

   26 stmt: iterStmt .

    error    reduce using rule 26 (stmt)
    TYPE     reduce using rule 26 (stmt)
    SETOP    reduce using rule 26 (stmt)
    ID       reduce using rule 26 (stmt)
    IF       reduce using rule 26 (stmt)
    FOR      reduce using rule 26 (stmt)
    RETURN   reduce using rule 26 (stmt)
    FORALL   reduce using rule 26 (stmt)
    IS_SET   reduce using rule 26 (stmt)
    EXISTS   reduce using rule 26 (stmt)
    NEG      reduce using rule 26 (stmt)
    READ     reduce using rule 26 (stmt)
    WRITE    reduce using rule 26 (stmt)
    WRITELN  reduce using rule 26 (stmt)
    INTEGER  reduce using rule 26 (stmt)
    FLOAT    reduce using rule 26 (stmt)
    EMPTY    reduce using rule 26 (stmt)
    ';'      reduce using rule 26 (stmt)
    '}'      reduce using rule 26 (stmt)
    '('      reduce using rule 26 (stmt)


State 55

   27 stmt: condStmt .

    error    reduce using rule 27 (stmt)
    TYPE     reduce using rule 27 (stmt)
    SETOP    reduce using rule 27 (stmt)
    ID       reduce using rule 27 (stmt)
    IF       reduce using rule 27 (stmt)
    FOR      reduce using rule 27 (stmt)
    RETURN   reduce using rule 27 (stmt)
    FORALL   reduce using rule 27 (stmt)
    IS_SET   reduce using rule 27 (stmt)
    EXISTS   reduce using rule 27 (stmt)
    NEG      reduce using rule 27 (stmt)
    READ     reduce using rule 27 (stmt)
    WRITE    reduce using rule 27 (stmt)
    WRITELN  reduce using rule 27 (stmt)
    INTEGER  reduce using rule 27 (stmt)
    FLOAT    reduce using rule 27 (stmt)
    EMPTY    reduce using rule 27 (stmt)
    ';'      reduce using rule 27 (stmt)
    '}'      reduce using rule 27 (stmt)
    '('      reduce using rule 27 (stmt)


State 56

   25 stmt: returnStmt .

    error    reduce using rule 25 (stmt)
    TYPE     reduce using rule 25 (stmt)
    SETOP    reduce using rule 25 (stmt)
    ID       reduce using rule 25 (stmt)
    IF       reduce using rule 25 (stmt)
    FOR      reduce using rule 25 (stmt)
    RETURN   reduce using rule 25 (stmt)
    FORALL   reduce using rule 25 (stmt)
    IS_SET   reduce using rule 25 (stmt)
    EXISTS   reduce using rule 25 (stmt)
    NEG      reduce using rule 25 (stmt)
    READ     reduce using rule 25 (stmt)
    WRITE    reduce using rule 25 (stmt)
    WRITELN  reduce using rule 25 (stmt)
    INTEGER  reduce using rule 25 (stmt)
    FLOAT    reduce using rule 25 (stmt)
    EMPTY    reduce using rule 25 (stmt)
    ';'      reduce using rule 25 (stmt)
    '}'      reduce using rule 25 (stmt)
    '('      reduce using rule 25 (stmt)


State 57

   24 stmt: exprStmt .

    error    reduce using rule 24 (stmt)
    TYPE     reduce using rule 24 (stmt)
    SETOP    reduce using rule 24 (stmt)
    ID       reduce using rule 24 (stmt)
    IF       reduce using rule 24 (stmt)
    FOR      reduce using rule 24 (stmt)
    RETURN   reduce using rule 24 (stmt)
    FORALL   reduce using rule 24 (stmt)
    IS_SET   reduce using rule 24 (stmt)
    EXISTS   reduce using rule 24 (stmt)
    NEG      reduce using rule 24 (stmt)
    READ     reduce using rule 24 (stmt)
    WRITE    reduce using rule 24 (stmt)
    WRITELN  reduce using rule 24 (stmt)
    INTEGER  reduce using rule 24 (stmt)
    FLOAT    reduce using rule 24 (stmt)
    EMPTY    reduce using rule 24 (stmt)
    ';'      reduce using rule 24 (stmt)
    '}'      reduce using rule 24 (stmt)
    '('      reduce using rule 24 (stmt)


State 58

   44 exprStmt: expression . ';'

    ';'  shift, and go to state 87


State 59

   47 expression: assign .

    ';'  reduce using rule 47 (expression)


State 60

   51 assign: var . '=' simpleExpr
   83 call: var . '(' params ')'

    '('  shift, and go to state 88
    '='  shift, and go to state 89


State 61

   48 expression: inExpr .

    ';'  reduce using rule 48 (expression)


State 62

   49 expression: outExpr .

    ';'  reduce using rule 49 (expression)


State 63

   50 expression: simpleExpr .
   59 simpleExpr: simpleExpr . IN negExpr

    IN  shift, and go to state 90

    ';'  reduce using rule 50 (expression)


State 64

   60 simpleExpr: negExpr .

    IN   reduce using rule 60 (simpleExpr)
    ';'  reduce using rule 60 (simpleExpr)


State 65

   62 negExpr: disjExpr .
   63 disjExpr: disjExpr . DISJ conjExpr

    DISJ  shift, and go to state 91

    IN   reduce using rule 62 (negExpr)
    ';'  reduce using rule 62 (negExpr)


State 66

   64 disjExpr: conjExpr .
   65 conjExpr: conjExpr . CONJ relExpr

    CONJ  shift, and go to state 92

    IN    reduce using rule 64 (disjExpr)
    DISJ  reduce using rule 64 (disjExpr)
    ';'   reduce using rule 64 (disjExpr)


State 67

   66 conjExpr: relExpr .
   67 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 93

    IN    reduce using rule 66 (conjExpr)
    DISJ  reduce using rule 66 (conjExpr)
    CONJ  reduce using rule 66 (conjExpr)
    ';'   reduce using rule 66 (conjExpr)


State 68

   68 relExpr: artExpr1 .
   69 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 94

    RELOP  reduce using rule 68 (relExpr)
    IN     reduce using rule 68 (relExpr)
    DISJ   reduce using rule 68 (relExpr)
    CONJ   reduce using rule 68 (relExpr)
    ';'    reduce using rule 68 (relExpr)


State 69

   70 artExpr1: artExpr2 .
   71 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 95

    RELOP   reduce using rule 70 (artExpr1)
    ARTOP1  reduce using rule 70 (artExpr1)
    IN      reduce using rule 70 (artExpr1)
    DISJ    reduce using rule 70 (artExpr1)
    CONJ    reduce using rule 70 (artExpr1)
    ';'     reduce using rule 70 (artExpr1)


State 70

   72 artExpr2: factor .

    RELOP   reduce using rule 72 (artExpr2)
    ARTOP1  reduce using rule 72 (artExpr2)
    ARTOP2  reduce using rule 72 (artExpr2)
    IN      reduce using rule 72 (artExpr2)
    DISJ    reduce using rule 72 (artExpr2)
    CONJ    reduce using rule 72 (artExpr2)
    ';'     reduce using rule 72 (artExpr2)


State 71

   75 factor: constant .

    RELOP   reduce using rule 75 (factor)
    ARTOP1  reduce using rule 75 (factor)
    ARTOP2  reduce using rule 75 (factor)
    IN      reduce using rule 75 (factor)
    DISJ    reduce using rule 75 (factor)
    CONJ    reduce using rule 75 (factor)
    ';'     reduce using rule 75 (factor)


State 72

   76 factor: call .

    RELOP   reduce using rule 76 (factor)
    ARTOP1  reduce using rule 76 (factor)
    ARTOP2  reduce using rule 76 (factor)
    IN      reduce using rule 76 (factor)
    DISJ    reduce using rule 76 (factor)
    CONJ    reduce using rule 76 (factor)
    ';'     reduce using rule 76 (factor)


State 73

   79 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 96
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 74

   41 cond: '(' . expression ')'
   42     | '(' . error ')'

    error    shift, and go to state 97
    SETOP    shift, and go to state 164
    ID       shift, and go to state 183
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    READ     shift, and go to state 184
    WRITE    shift, and go to state 185
    WRITELN  shift, and go to state 186
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    expression  go to state 98
    assign      go to state 187
    var         go to state 188
    inExpr      go to state 189
    outExpr     go to state 190
    simpleExpr  go to state 191
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 75

   37 condStmt: IF cond . prepareScope body
   39         | IF cond . prepareScope body ELSE $@3 body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 99


State 76

   28 iterStmt: FOR '(' . exprStmt exprStmt ')' prepareScope body
   29         | FOR '(' . exprStmt exprStmt expression ')' prepareScope body
   32         | FOR '(' . error ')' prepareScope body

    error    shift, and go to state 100
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 192
    '('      shift, and go to state 50

    exprStmt    go to state 101
    expression  go to state 193
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 77

   43 returnStmt: RETURN exprStmt .

    error    reduce using rule 43 (returnStmt)
    TYPE     reduce using rule 43 (returnStmt)
    SETOP    reduce using rule 43 (returnStmt)
    ID       reduce using rule 43 (returnStmt)
    IF       reduce using rule 43 (returnStmt)
    FOR      reduce using rule 43 (returnStmt)
    RETURN   reduce using rule 43 (returnStmt)
    FORALL   reduce using rule 43 (returnStmt)
    IS_SET   reduce using rule 43 (returnStmt)
    EXISTS   reduce using rule 43 (returnStmt)
    NEG      reduce using rule 43 (returnStmt)
    READ     reduce using rule 43 (returnStmt)
    WRITE    reduce using rule 43 (returnStmt)
    WRITELN  reduce using rule 43 (returnStmt)
    INTEGER  reduce using rule 43 (returnStmt)
    FLOAT    reduce using rule 43 (returnStmt)
    EMPTY    reduce using rule 43 (returnStmt)
    ';'      reduce using rule 43 (returnStmt)
    '}'      reduce using rule 43 (returnStmt)
    '('      reduce using rule 43 (returnStmt)


State 78

   30 iterStmt: FORALL '(' . simpleExpr ')' prepareScope body
   31         | FORALL '(' . error ')' prepareScope body

    error    shift, and go to state 102
    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 103
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 79

   77 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 194
    ID       shift, and go to state 195
    IS_SET   shift, and go to state 196
    EXISTS   shift, and go to state 197
    INTEGER  shift, and go to state 198
    FLOAT    shift, and go to state 199
    EMPTY    shift, and go to state 200
    '('      shift, and go to state 201

    var       go to state 202
    factor    go to state 104
    constant  go to state 203
    call      go to state 204


State 80

   78 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 105
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 81

   83 call: var . '(' params ')'

    '('  shift, and go to state 88


State 82

   61 negExpr: NEG negExpr .

    IN   reduce using rule 61 (negExpr)
    ';'  reduce using rule 61 (negExpr)


State 83

   53 inExpr: READ '(' . var ')'

    ID  shift, and go to state 106

    var  go to state 107


State 84

   54 outExpr: WRITE '(' . output ')'

    ID      shift, and go to state 106
    CHAR    shift, and go to state 108
    STRING  shift, and go to state 109

    var     go to state 110
    output  go to state 111


State 85

   55 outExpr: WRITELN '(' . output ')'

    ID      shift, and go to state 106
    CHAR    shift, and go to state 108
    STRING  shift, and go to state 109

    var     go to state 110
    output  go to state 112


State 86

   59 simpleExpr: simpleExpr . IN negExpr
   74 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 205
    ')'  shift, and go to state 113


State 87

   44 exprStmt: expression ';' .

    error    reduce using rule 44 (exprStmt)
    TYPE     reduce using rule 44 (exprStmt)
    SETOP    reduce using rule 44 (exprStmt)
    ID       reduce using rule 44 (exprStmt)
    IF       reduce using rule 44 (exprStmt)
    FOR      reduce using rule 44 (exprStmt)
    RETURN   reduce using rule 44 (exprStmt)
    FORALL   reduce using rule 44 (exprStmt)
    IS_SET   reduce using rule 44 (exprStmt)
    EXISTS   reduce using rule 44 (exprStmt)
    NEG      reduce using rule 44 (exprStmt)
    READ     reduce using rule 44 (exprStmt)
    WRITE    reduce using rule 44 (exprStmt)
    WRITELN  reduce using rule 44 (exprStmt)
    INTEGER  reduce using rule 44 (exprStmt)
    FLOAT    reduce using rule 44 (exprStmt)
    EMPTY    reduce using rule 44 (exprStmt)
    ';'      reduce using rule 44 (exprStmt)
    '}'      reduce using rule 44 (exprStmt)
    '('      reduce using rule 44 (exprStmt)


State 88

   83 call: var '(' . params ')'

    SETOP    shift, and go to state 206
    ID       shift, and go to state 207
    IS_SET   shift, and go to state 208
    EXISTS   shift, and go to state 209
    NEG      shift, and go to state 210
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    ')'  reduce using rule 84 (params)

    var         go to state 215
    simpleExpr  go to state 114
    negExpr     go to state 216
    disjExpr    go to state 217
    conjExpr    go to state 218
    relExpr     go to state 219
    artExpr1    go to state 220
    artExpr2    go to state 221
    factor      go to state 222
    constant    go to state 223
    call        go to state 224
    params      go to state 115
    paramList   go to state 116


State 89

   51 assign: var '=' . simpleExpr

    SETOP    shift, and go to state 33
    ID       shift, and go to state 163
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    '('      shift, and go to state 50

    var         go to state 81
    simpleExpr  go to state 117
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 90

   59 simpleExpr: simpleExpr IN . negExpr

    SETOP    shift, and go to state 33
    ID       shift, and go to state 163
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    '('      shift, and go to state 50

    var       go to state 81
    negExpr   go to state 118
    disjExpr  go to state 65
    conjExpr  go to state 66
    relExpr   go to state 67
    artExpr1  go to state 68
    artExpr2  go to state 69
    factor    go to state 70
    constant  go to state 71
    call      go to state 72


State 91

   63 disjExpr: disjExpr DISJ . conjExpr

    SETOP    shift, and go to state 33
    ID       shift, and go to state 163
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    '('      shift, and go to state 50

    var       go to state 81
    conjExpr  go to state 119
    relExpr   go to state 67
    artExpr1  go to state 68
    artExpr2  go to state 69
    factor    go to state 70
    constant  go to state 71
    call      go to state 72


State 92

   65 conjExpr: conjExpr CONJ . relExpr

    SETOP    shift, and go to state 33
    ID       shift, and go to state 163
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    '('      shift, and go to state 50

    var       go to state 81
    relExpr   go to state 120
    artExpr1  go to state 68
    artExpr2  go to state 69
    factor    go to state 70
    constant  go to state 71
    call      go to state 72


State 93

   67 relExpr: relExpr RELOP . artExpr1

    SETOP    shift, and go to state 33
    ID       shift, and go to state 163
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    '('      shift, and go to state 50

    var       go to state 81
    artExpr1  go to state 121
    artExpr2  go to state 69
    factor    go to state 70
    constant  go to state 71
    call      go to state 72


State 94

   69 artExpr1: artExpr1 ARTOP1 . artExpr2

    SETOP    shift, and go to state 33
    ID       shift, and go to state 163
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    '('      shift, and go to state 50

    var       go to state 81
    artExpr2  go to state 122
    factor    go to state 70
    constant  go to state 71
    call      go to state 72


State 95

   71 artExpr2: artExpr2 ARTOP2 . factor

    SETOP    shift, and go to state 33
    ID       shift, and go to state 163
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    '('      shift, and go to state 50

    var       go to state 81
    factor    go to state 123
    constant  go to state 71
    call      go to state 72


State 96

   59 simpleExpr: simpleExpr . IN negExpr
   79 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 205
    ')'  shift, and go to state 124


State 97

   42 cond: '(' error . ')'

    ')'  shift, and go to state 125


State 98

   41 cond: '(' expression . ')'

    ')'  shift, and go to state 126


State 99

   37 condStmt: IF cond prepareScope . body
   39         | IF cond prepareScope . body ELSE $@3 body

    error    shift, and go to state 225
    TYPE     shift, and go to state 226
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 227
    FOR      shift, and go to state 228
    RETURN   shift, and go to state 229
    FORALL   shift, and go to state 230
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 231
    '{'      shift, and go to state 127
    '('      shift, and go to state 50

    varDecl     go to state 128
    funcDecl    go to state 129
    stmt        go to state 130
    iterStmt    go to state 232
    body        go to state 131
    condStmt    go to state 233
    returnStmt  go to state 234
    exprStmt    go to state 235
    expression  go to state 236
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 100

   32 iterStmt: FOR '(' error . ')' prepareScope body
   45 exprStmt: error .

    ')'  shift, and go to state 132

    error    reduce using rule 45 (exprStmt)
    SETOP    reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    ';'      reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)


State 101

   28 iterStmt: FOR '(' exprStmt . exprStmt ')' prepareScope body
   29         | FOR '(' exprStmt . exprStmt expression ')' prepareScope body

    error    shift, and go to state 237
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 238
    '('      shift, and go to state 50

    exprStmt    go to state 133
    expression  go to state 239
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 102

   31 iterStmt: FORALL '(' error . ')' prepareScope body

    ')'  shift, and go to state 134


State 103

   30 iterStmt: FORALL '(' simpleExpr . ')' prepareScope body
   59 simpleExpr: simpleExpr . IN negExpr

    IN   shift, and go to state 205
    ')'  shift, and go to state 135


State 104

   77 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 136


State 105

   59 simpleExpr: simpleExpr . IN negExpr
   78 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 205
    ')'  shift, and go to state 137


State 106

   52 var: ID .

    ')'  reduce using rule 52 (var)


State 107

   53 inExpr: READ '(' var . ')'

    ')'  shift, and go to state 138


State 108

   57 output: CHAR .

    ')'  reduce using rule 57 (output)


State 109

   58 output: STRING .

    ')'  reduce using rule 58 (output)


State 110

   56 output: var .

    ')'  reduce using rule 56 (output)


State 111

   54 outExpr: WRITE '(' output . ')'

    ')'  shift, and go to state 139


State 112

   55 outExpr: WRITELN '(' output . ')'

    ')'  shift, and go to state 140


State 113

   74 factor: '(' simpleExpr ')' .

    RELOP   reduce using rule 74 (factor)
    ARTOP1  reduce using rule 74 (factor)
    ARTOP2  reduce using rule 74 (factor)
    IN      reduce using rule 74 (factor)
    DISJ    reduce using rule 74 (factor)
    CONJ    reduce using rule 74 (factor)
    ';'     reduce using rule 74 (factor)


State 114

   59 simpleExpr: simpleExpr . IN negExpr
   87 paramList: simpleExpr .

    IN  shift, and go to state 240

    ','  reduce using rule 87 (paramList)
    ')'  reduce using rule 87 (paramList)


State 115

   83 call: var '(' params . ')'

    ')'  shift, and go to state 141


State 116

   85 params: paramList .
   86 paramList: paramList . ',' simpleExpr

    ','  shift, and go to state 142

    ')'  reduce using rule 85 (params)


State 117

   51 assign: var '=' simpleExpr .
   59 simpleExpr: simpleExpr . IN negExpr

    IN  shift, and go to state 90

    ';'  reduce using rule 51 (assign)


State 118

   59 simpleExpr: simpleExpr IN negExpr .

    IN   reduce using rule 59 (simpleExpr)
    ';'  reduce using rule 59 (simpleExpr)


State 119

   63 disjExpr: disjExpr DISJ conjExpr .
   65 conjExpr: conjExpr . CONJ relExpr

    CONJ  shift, and go to state 92

    IN    reduce using rule 63 (disjExpr)
    DISJ  reduce using rule 63 (disjExpr)
    ';'   reduce using rule 63 (disjExpr)


State 120

   65 conjExpr: conjExpr CONJ relExpr .
   67 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 93

    IN    reduce using rule 65 (conjExpr)
    DISJ  reduce using rule 65 (conjExpr)
    CONJ  reduce using rule 65 (conjExpr)
    ';'   reduce using rule 65 (conjExpr)


State 121

   67 relExpr: relExpr RELOP artExpr1 .
   69 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 94

    RELOP  reduce using rule 67 (relExpr)
    IN     reduce using rule 67 (relExpr)
    DISJ   reduce using rule 67 (relExpr)
    CONJ   reduce using rule 67 (relExpr)
    ';'    reduce using rule 67 (relExpr)


State 122

   69 artExpr1: artExpr1 ARTOP1 artExpr2 .
   71 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 95

    RELOP   reduce using rule 69 (artExpr1)
    ARTOP1  reduce using rule 69 (artExpr1)
    IN      reduce using rule 69 (artExpr1)
    DISJ    reduce using rule 69 (artExpr1)
    CONJ    reduce using rule 69 (artExpr1)
    ';'     reduce using rule 69 (artExpr1)


State 123

   71 artExpr2: artExpr2 ARTOP2 factor .

    RELOP   reduce using rule 71 (artExpr2)
    ARTOP1  reduce using rule 71 (artExpr2)
    ARTOP2  reduce using rule 71 (artExpr2)
    IN      reduce using rule 71 (artExpr2)
    DISJ    reduce using rule 71 (artExpr2)
    CONJ    reduce using rule 71 (artExpr2)
    ';'     reduce using rule 71 (artExpr2)


State 124

   79 factor: SETOP '(' simpleExpr ')' .

    RELOP   reduce using rule 79 (factor)
    ARTOP1  reduce using rule 79 (factor)
    ARTOP2  reduce using rule 79 (factor)
    IN      reduce using rule 79 (factor)
    DISJ    reduce using rule 79 (factor)
    CONJ    reduce using rule 79 (factor)
    ';'     reduce using rule 79 (factor)


State 125

   42 cond: '(' error ')' .

    error    reduce using rule 42 (cond)
    TYPE     reduce using rule 42 (cond)
    SETOP    reduce using rule 42 (cond)
    ID       reduce using rule 42 (cond)
    IF       reduce using rule 42 (cond)
    FOR      reduce using rule 42 (cond)
    RETURN   reduce using rule 42 (cond)
    FORALL   reduce using rule 42 (cond)
    IS_SET   reduce using rule 42 (cond)
    EXISTS   reduce using rule 42 (cond)
    NEG      reduce using rule 42 (cond)
    READ     reduce using rule 42 (cond)
    WRITE    reduce using rule 42 (cond)
    WRITELN  reduce using rule 42 (cond)
    INTEGER  reduce using rule 42 (cond)
    FLOAT    reduce using rule 42 (cond)
    EMPTY    reduce using rule 42 (cond)
    ';'      reduce using rule 42 (cond)
    '{'      reduce using rule 42 (cond)
    '('      reduce using rule 42 (cond)


State 126

   41 cond: '(' expression ')' .

    error    reduce using rule 41 (cond)
    TYPE     reduce using rule 41 (cond)
    SETOP    reduce using rule 41 (cond)
    ID       reduce using rule 41 (cond)
    IF       reduce using rule 41 (cond)
    FOR      reduce using rule 41 (cond)
    RETURN   reduce using rule 41 (cond)
    FORALL   reduce using rule 41 (cond)
    IS_SET   reduce using rule 41 (cond)
    EXISTS   reduce using rule 41 (cond)
    NEG      reduce using rule 41 (cond)
    READ     reduce using rule 41 (cond)
    WRITE    reduce using rule 41 (cond)
    WRITELN  reduce using rule 41 (cond)
    INTEGER  reduce using rule 41 (cond)
    FLOAT    reduce using rule 41 (cond)
    EMPTY    reduce using rule 41 (cond)
    ';'      reduce using rule 41 (cond)
    '{'      reduce using rule 41 (cond)
    '('      reduce using rule 41 (cond)


State 127

   33 body: '{' . funcBody '}'

    error    reduce using rule 20 (funcBody)
    TYPE     reduce using rule 20 (funcBody)
    SETOP    reduce using rule 20 (funcBody)
    ID       reduce using rule 20 (funcBody)
    IF       reduce using rule 20 (funcBody)
    FOR      reduce using rule 20 (funcBody)
    RETURN   reduce using rule 20 (funcBody)
    FORALL   reduce using rule 20 (funcBody)
    IS_SET   reduce using rule 20 (funcBody)
    EXISTS   reduce using rule 20 (funcBody)
    NEG      reduce using rule 20 (funcBody)
    READ     reduce using rule 20 (funcBody)
    WRITE    reduce using rule 20 (funcBody)
    WRITELN  reduce using rule 20 (funcBody)
    INTEGER  reduce using rule 20 (funcBody)
    FLOAT    reduce using rule 20 (funcBody)
    EMPTY    reduce using rule 20 (funcBody)
    ';'      reduce using rule 20 (funcBody)
    '}'      reduce using rule 20 (funcBody)
    '('      reduce using rule 20 (funcBody)

    funcBody  go to state 143


State 128

   35 body: varDecl .

    error    reduce using rule 35 (body)
    TYPE     reduce using rule 35 (body)
    SETOP    reduce using rule 35 (body)
    ID       reduce using rule 35 (body)
    IF       reduce using rule 35 (body)
    ELSE     reduce using rule 35 (body)
    FOR      reduce using rule 35 (body)
    RETURN   reduce using rule 35 (body)
    FORALL   reduce using rule 35 (body)
    IS_SET   reduce using rule 35 (body)
    EXISTS   reduce using rule 35 (body)
    NEG      reduce using rule 35 (body)
    READ     reduce using rule 35 (body)
    WRITE    reduce using rule 35 (body)
    WRITELN  reduce using rule 35 (body)
    INTEGER  reduce using rule 35 (body)
    FLOAT    reduce using rule 35 (body)
    EMPTY    reduce using rule 35 (body)
    ';'      reduce using rule 35 (body)
    '}'      reduce using rule 35 (body)
    '('      reduce using rule 35 (body)


State 129

   36 body: funcDecl .

    error    reduce using rule 36 (body)
    TYPE     reduce using rule 36 (body)
    SETOP    reduce using rule 36 (body)
    ID       reduce using rule 36 (body)
    IF       reduce using rule 36 (body)
    ELSE     reduce using rule 36 (body)
    FOR      reduce using rule 36 (body)
    RETURN   reduce using rule 36 (body)
    FORALL   reduce using rule 36 (body)
    IS_SET   reduce using rule 36 (body)
    EXISTS   reduce using rule 36 (body)
    NEG      reduce using rule 36 (body)
    READ     reduce using rule 36 (body)
    WRITE    reduce using rule 36 (body)
    WRITELN  reduce using rule 36 (body)
    INTEGER  reduce using rule 36 (body)
    FLOAT    reduce using rule 36 (body)
    EMPTY    reduce using rule 36 (body)
    ';'      reduce using rule 36 (body)
    '}'      reduce using rule 36 (body)
    '('      reduce using rule 36 (body)


State 130

   34 body: stmt .

    error    reduce using rule 34 (body)
    TYPE     reduce using rule 34 (body)
    SETOP    reduce using rule 34 (body)
    ID       reduce using rule 34 (body)
    IF       reduce using rule 34 (body)
    ELSE     reduce using rule 34 (body)
    FOR      reduce using rule 34 (body)
    RETURN   reduce using rule 34 (body)
    FORALL   reduce using rule 34 (body)
    IS_SET   reduce using rule 34 (body)
    EXISTS   reduce using rule 34 (body)
    NEG      reduce using rule 34 (body)
    READ     reduce using rule 34 (body)
    WRITE    reduce using rule 34 (body)
    WRITELN  reduce using rule 34 (body)
    INTEGER  reduce using rule 34 (body)
    FLOAT    reduce using rule 34 (body)
    EMPTY    reduce using rule 34 (body)
    ';'      reduce using rule 34 (body)
    '}'      reduce using rule 34 (body)
    '('      reduce using rule 34 (body)


State 131

   37 condStmt: IF cond prepareScope body .
   39         | IF cond prepareScope body . ELSE $@3 body

    ELSE  shift, and go to state 144

    error    reduce using rule 37 (condStmt)
    TYPE     reduce using rule 37 (condStmt)
    SETOP    reduce using rule 37 (condStmt)
    ID       reduce using rule 37 (condStmt)
    IF       reduce using rule 37 (condStmt)
    FOR      reduce using rule 37 (condStmt)
    RETURN   reduce using rule 37 (condStmt)
    FORALL   reduce using rule 37 (condStmt)
    IS_SET   reduce using rule 37 (condStmt)
    EXISTS   reduce using rule 37 (condStmt)
    NEG      reduce using rule 37 (condStmt)
    READ     reduce using rule 37 (condStmt)
    WRITE    reduce using rule 37 (condStmt)
    WRITELN  reduce using rule 37 (condStmt)
    INTEGER  reduce using rule 37 (condStmt)
    FLOAT    reduce using rule 37 (condStmt)
    EMPTY    reduce using rule 37 (condStmt)
    ';'      reduce using rule 37 (condStmt)
    '}'      reduce using rule 37 (condStmt)
    '('      reduce using rule 37 (condStmt)


State 132

   32 iterStmt: FOR '(' error ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 145


State 133

   28 iterStmt: FOR '(' exprStmt exprStmt . ')' prepareScope body
   29         | FOR '(' exprStmt exprStmt . expression ')' prepareScope body

    SETOP    shift, and go to state 164
    ID       shift, and go to state 183
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    READ     shift, and go to state 184
    WRITE    shift, and go to state 185
    WRITELN  shift, and go to state 186
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172
    ')'      shift, and go to state 146

    expression  go to state 147
    assign      go to state 187
    var         go to state 188
    inExpr      go to state 189
    outExpr     go to state 190
    simpleExpr  go to state 191
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 134

   31 iterStmt: FORALL '(' error ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 148


State 135

   30 iterStmt: FORALL '(' simpleExpr ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 149


State 136

   77 factor: IS_SET '(' factor ')' .

    RELOP   reduce using rule 77 (factor)
    ARTOP1  reduce using rule 77 (factor)
    ARTOP2  reduce using rule 77 (factor)
    IN      reduce using rule 77 (factor)
    DISJ    reduce using rule 77 (factor)
    CONJ    reduce using rule 77 (factor)
    ';'     reduce using rule 77 (factor)


State 137

   78 factor: EXISTS '(' simpleExpr ')' .

    RELOP   reduce using rule 78 (factor)
    ARTOP1  reduce using rule 78 (factor)
    ARTOP2  reduce using rule 78 (factor)
    IN      reduce using rule 78 (factor)
    DISJ    reduce using rule 78 (factor)
    CONJ    reduce using rule 78 (factor)
    ';'     reduce using rule 78 (factor)


State 138

   53 inExpr: READ '(' var ')' .

    ';'  reduce using rule 53 (inExpr)


State 139

   54 outExpr: WRITE '(' output ')' .

    ';'  reduce using rule 54 (outExpr)


State 140

   55 outExpr: WRITELN '(' output ')' .

    ';'  reduce using rule 55 (outExpr)


State 141

   83 call: var '(' params ')' .

    RELOP   reduce using rule 83 (call)
    ARTOP1  reduce using rule 83 (call)
    ARTOP2  reduce using rule 83 (call)
    IN      reduce using rule 83 (call)
    DISJ    reduce using rule 83 (call)
    CONJ    reduce using rule 83 (call)
    ';'     reduce using rule 83 (call)


State 142

   86 paramList: paramList ',' . simpleExpr

    SETOP    shift, and go to state 206
    ID       shift, and go to state 207
    IS_SET   shift, and go to state 208
    EXISTS   shift, and go to state 209
    NEG      shift, and go to state 210
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    var         go to state 215
    simpleExpr  go to state 150
    negExpr     go to state 216
    disjExpr    go to state 217
    conjExpr    go to state 218
    relExpr     go to state 219
    artExpr1    go to state 220
    artExpr2    go to state 221
    factor      go to state 222
    constant    go to state 223
    call        go to state 224


State 143

   21 funcBody: funcBody . varDecl
   22         | funcBody . funcDecl
   23         | funcBody . stmt
   33 body: '{' funcBody . '}'

    error    shift, and go to state 32
    TYPE     shift, and go to state 162
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 35
    FOR      shift, and go to state 36
    RETURN   shift, and go to state 37
    FORALL   shift, and go to state 38
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 48
    '}'      shift, and go to state 151
    '('      shift, and go to state 50

    varDecl     go to state 51
    funcDecl    go to state 52
    stmt        go to state 53
    iterStmt    go to state 54
    condStmt    go to state 55
    returnStmt  go to state 56
    exprStmt    go to state 57
    expression  go to state 58
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 144

   39 condStmt: IF cond prepareScope body ELSE . $@3 body

    error    reduce using rule 38 ($@3)
    TYPE     reduce using rule 38 ($@3)
    SETOP    reduce using rule 38 ($@3)
    ID       reduce using rule 38 ($@3)
    IF       reduce using rule 38 ($@3)
    FOR      reduce using rule 38 ($@3)
    RETURN   reduce using rule 38 ($@3)
    FORALL   reduce using rule 38 ($@3)
    IS_SET   reduce using rule 38 ($@3)
    EXISTS   reduce using rule 38 ($@3)
    NEG      reduce using rule 38 ($@3)
    READ     reduce using rule 38 ($@3)
    WRITE    reduce using rule 38 ($@3)
    WRITELN  reduce using rule 38 ($@3)
    INTEGER  reduce using rule 38 ($@3)
    FLOAT    reduce using rule 38 ($@3)
    EMPTY    reduce using rule 38 ($@3)
    ';'      reduce using rule 38 ($@3)
    '{'      reduce using rule 38 ($@3)
    '('      reduce using rule 38 ($@3)

    $@3  go to state 152


State 145

   32 iterStmt: FOR '(' error ')' prepareScope . body

    error    shift, and go to state 32
    TYPE     shift, and go to state 162
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 35
    FOR      shift, and go to state 36
    RETURN   shift, and go to state 37
    FORALL   shift, and go to state 38
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 48
    '{'      shift, and go to state 241
    '('      shift, and go to state 50

    varDecl     go to state 242
    funcDecl    go to state 243
    stmt        go to state 244
    iterStmt    go to state 54
    body        go to state 153
    condStmt    go to state 55
    returnStmt  go to state 56
    exprStmt    go to state 57
    expression  go to state 58
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 146

   28 iterStmt: FOR '(' exprStmt exprStmt ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 154


State 147

   29 iterStmt: FOR '(' exprStmt exprStmt expression . ')' prepareScope body

    ')'  shift, and go to state 155


State 148

   31 iterStmt: FORALL '(' error ')' prepareScope . body

    error    shift, and go to state 32
    TYPE     shift, and go to state 162
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 35
    FOR      shift, and go to state 36
    RETURN   shift, and go to state 37
    FORALL   shift, and go to state 38
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 48
    '{'      shift, and go to state 241
    '('      shift, and go to state 50

    varDecl     go to state 242
    funcDecl    go to state 243
    stmt        go to state 244
    iterStmt    go to state 54
    body        go to state 156
    condStmt    go to state 55
    returnStmt  go to state 56
    exprStmt    go to state 57
    expression  go to state 58
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 149

   30 iterStmt: FORALL '(' simpleExpr ')' prepareScope . body

    error    shift, and go to state 32
    TYPE     shift, and go to state 162
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 35
    FOR      shift, and go to state 36
    RETURN   shift, and go to state 37
    FORALL   shift, and go to state 38
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 48
    '{'      shift, and go to state 241
    '('      shift, and go to state 50

    varDecl     go to state 242
    funcDecl    go to state 243
    stmt        go to state 244
    iterStmt    go to state 54
    body        go to state 157
    condStmt    go to state 55
    returnStmt  go to state 56
    exprStmt    go to state 57
    expression  go to state 58
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 150

   59 simpleExpr: simpleExpr . IN negExpr
   86 paramList: paramList ',' simpleExpr .

    IN  shift, and go to state 240

    ','  reduce using rule 86 (paramList)
    ')'  reduce using rule 86 (paramList)


State 151

   33 body: '{' funcBody '}' .

    error    reduce using rule 33 (body)
    TYPE     reduce using rule 33 (body)
    SETOP    reduce using rule 33 (body)
    ID       reduce using rule 33 (body)
    IF       reduce using rule 33 (body)
    ELSE     reduce using rule 33 (body)
    FOR      reduce using rule 33 (body)
    RETURN   reduce using rule 33 (body)
    FORALL   reduce using rule 33 (body)
    IS_SET   reduce using rule 33 (body)
    EXISTS   reduce using rule 33 (body)
    NEG      reduce using rule 33 (body)
    READ     reduce using rule 33 (body)
    WRITE    reduce using rule 33 (body)
    WRITELN  reduce using rule 33 (body)
    INTEGER  reduce using rule 33 (body)
    FLOAT    reduce using rule 33 (body)
    EMPTY    reduce using rule 33 (body)
    ';'      reduce using rule 33 (body)
    '}'      reduce using rule 33 (body)
    '('      reduce using rule 33 (body)


State 152

   39 condStmt: IF cond prepareScope body ELSE $@3 . body

    error    shift, and go to state 32
    TYPE     shift, and go to state 162
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 35
    FOR      shift, and go to state 36
    RETURN   shift, and go to state 37
    FORALL   shift, and go to state 38
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 48
    '{'      shift, and go to state 241
    '('      shift, and go to state 50

    varDecl     go to state 242
    funcDecl    go to state 243
    stmt        go to state 244
    iterStmt    go to state 54
    body        go to state 158
    condStmt    go to state 55
    returnStmt  go to state 56
    exprStmt    go to state 57
    expression  go to state 58
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 153

   32 iterStmt: FOR '(' error ')' prepareScope body .

    error    reduce using rule 32 (iterStmt)
    TYPE     reduce using rule 32 (iterStmt)
    SETOP    reduce using rule 32 (iterStmt)
    ID       reduce using rule 32 (iterStmt)
    IF       reduce using rule 32 (iterStmt)
    FOR      reduce using rule 32 (iterStmt)
    RETURN   reduce using rule 32 (iterStmt)
    FORALL   reduce using rule 32 (iterStmt)
    IS_SET   reduce using rule 32 (iterStmt)
    EXISTS   reduce using rule 32 (iterStmt)
    NEG      reduce using rule 32 (iterStmt)
    READ     reduce using rule 32 (iterStmt)
    WRITE    reduce using rule 32 (iterStmt)
    WRITELN  reduce using rule 32 (iterStmt)
    INTEGER  reduce using rule 32 (iterStmt)
    FLOAT    reduce using rule 32 (iterStmt)
    EMPTY    reduce using rule 32 (iterStmt)
    ';'      reduce using rule 32 (iterStmt)
    '}'      reduce using rule 32 (iterStmt)
    '('      reduce using rule 32 (iterStmt)


State 154

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope . body

    error    shift, and go to state 32
    TYPE     shift, and go to state 162
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 35
    FOR      shift, and go to state 36
    RETURN   shift, and go to state 37
    FORALL   shift, and go to state 38
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 48
    '{'      shift, and go to state 241
    '('      shift, and go to state 50

    varDecl     go to state 242
    funcDecl    go to state 243
    stmt        go to state 244
    iterStmt    go to state 54
    body        go to state 159
    condStmt    go to state 55
    returnStmt  go to state 56
    exprStmt    go to state 57
    expression  go to state 58
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 155

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 160


State 156

   31 iterStmt: FORALL '(' error ')' prepareScope body .

    error    reduce using rule 31 (iterStmt)
    TYPE     reduce using rule 31 (iterStmt)
    SETOP    reduce using rule 31 (iterStmt)
    ID       reduce using rule 31 (iterStmt)
    IF       reduce using rule 31 (iterStmt)
    FOR      reduce using rule 31 (iterStmt)
    RETURN   reduce using rule 31 (iterStmt)
    FORALL   reduce using rule 31 (iterStmt)
    IS_SET   reduce using rule 31 (iterStmt)
    EXISTS   reduce using rule 31 (iterStmt)
    NEG      reduce using rule 31 (iterStmt)
    READ     reduce using rule 31 (iterStmt)
    WRITE    reduce using rule 31 (iterStmt)
    WRITELN  reduce using rule 31 (iterStmt)
    INTEGER  reduce using rule 31 (iterStmt)
    FLOAT    reduce using rule 31 (iterStmt)
    EMPTY    reduce using rule 31 (iterStmt)
    ';'      reduce using rule 31 (iterStmt)
    '}'      reduce using rule 31 (iterStmt)
    '('      reduce using rule 31 (iterStmt)


State 157

   30 iterStmt: FORALL '(' simpleExpr ')' prepareScope body .

    error    reduce using rule 30 (iterStmt)
    TYPE     reduce using rule 30 (iterStmt)
    SETOP    reduce using rule 30 (iterStmt)
    ID       reduce using rule 30 (iterStmt)
    IF       reduce using rule 30 (iterStmt)
    FOR      reduce using rule 30 (iterStmt)
    RETURN   reduce using rule 30 (iterStmt)
    FORALL   reduce using rule 30 (iterStmt)
    IS_SET   reduce using rule 30 (iterStmt)
    EXISTS   reduce using rule 30 (iterStmt)
    NEG      reduce using rule 30 (iterStmt)
    READ     reduce using rule 30 (iterStmt)
    WRITE    reduce using rule 30 (iterStmt)
    WRITELN  reduce using rule 30 (iterStmt)
    INTEGER  reduce using rule 30 (iterStmt)
    FLOAT    reduce using rule 30 (iterStmt)
    EMPTY    reduce using rule 30 (iterStmt)
    ';'      reduce using rule 30 (iterStmt)
    '}'      reduce using rule 30 (iterStmt)
    '('      reduce using rule 30 (iterStmt)


State 158

   39 condStmt: IF cond prepareScope body ELSE $@3 body .

    error    reduce using rule 39 (condStmt)
    TYPE     reduce using rule 39 (condStmt)
    SETOP    reduce using rule 39 (condStmt)
    ID       reduce using rule 39 (condStmt)
    IF       reduce using rule 39 (condStmt)
    FOR      reduce using rule 39 (condStmt)
    RETURN   reduce using rule 39 (condStmt)
    FORALL   reduce using rule 39 (condStmt)
    IS_SET   reduce using rule 39 (condStmt)
    EXISTS   reduce using rule 39 (condStmt)
    NEG      reduce using rule 39 (condStmt)
    READ     reduce using rule 39 (condStmt)
    WRITE    reduce using rule 39 (condStmt)
    WRITELN  reduce using rule 39 (condStmt)
    INTEGER  reduce using rule 39 (condStmt)
    FLOAT    reduce using rule 39 (condStmt)
    EMPTY    reduce using rule 39 (condStmt)
    ';'      reduce using rule 39 (condStmt)
    '}'      reduce using rule 39 (condStmt)
    '('      reduce using rule 39 (condStmt)


State 159

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope body .

    error    reduce using rule 28 (iterStmt)
    TYPE     reduce using rule 28 (iterStmt)
    SETOP    reduce using rule 28 (iterStmt)
    ID       reduce using rule 28 (iterStmt)
    IF       reduce using rule 28 (iterStmt)
    FOR      reduce using rule 28 (iterStmt)
    RETURN   reduce using rule 28 (iterStmt)
    FORALL   reduce using rule 28 (iterStmt)
    IS_SET   reduce using rule 28 (iterStmt)
    EXISTS   reduce using rule 28 (iterStmt)
    NEG      reduce using rule 28 (iterStmt)
    READ     reduce using rule 28 (iterStmt)
    WRITE    reduce using rule 28 (iterStmt)
    WRITELN  reduce using rule 28 (iterStmt)
    INTEGER  reduce using rule 28 (iterStmt)
    FLOAT    reduce using rule 28 (iterStmt)
    EMPTY    reduce using rule 28 (iterStmt)
    ';'      reduce using rule 28 (iterStmt)
    '}'      reduce using rule 28 (iterStmt)
    '('      reduce using rule 28 (iterStmt)


State 160

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' prepareScope . body

    error    shift, and go to state 32
    TYPE     shift, and go to state 162
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 35
    FOR      shift, and go to state 36
    RETURN   shift, and go to state 37
    FORALL   shift, and go to state 38
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 48
    '{'      shift, and go to state 241
    '('      shift, and go to state 50

    varDecl     go to state 242
    funcDecl    go to state 243
    stmt        go to state 244
    iterStmt    go to state 54
    body        go to state 161
    condStmt    go to state 55
    returnStmt  go to state 56
    exprStmt    go to state 57
    expression  go to state 58
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 161

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' prepareScope body .

    error    reduce using rule 29 (iterStmt)
    TYPE     reduce using rule 29 (iterStmt)
    SETOP    reduce using rule 29 (iterStmt)
    ID       reduce using rule 29 (iterStmt)
    IF       reduce using rule 29 (iterStmt)
    FOR      reduce using rule 29 (iterStmt)
    RETURN   reduce using rule 29 (iterStmt)
    FORALL   reduce using rule 29 (iterStmt)
    IS_SET   reduce using rule 29 (iterStmt)
    EXISTS   reduce using rule 29 (iterStmt)
    NEG      reduce using rule 29 (iterStmt)
    READ     reduce using rule 29 (iterStmt)
    WRITE    reduce using rule 29 (iterStmt)
    WRITELN  reduce using rule 29 (iterStmt)
    INTEGER  reduce using rule 29 (iterStmt)
    FLOAT    reduce using rule 29 (iterStmt)
    EMPTY    reduce using rule 29 (iterStmt)
    ';'      reduce using rule 29 (iterStmt)
    '}'      reduce using rule 29 (iterStmt)
    '('      reduce using rule 29 (iterStmt)


State 162

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error
   13 funcDecl: TYPE . ID $@1 arguments $@2 '{' funcBody '}'

    error  shift, and go to state 245
    ID     shift, and go to state 246

    varList  go to state 247
    new_id   go to state 11


State 163

   52 var: ID .
   73 factor: ID .

    RELOP   reduce using rule 73 (factor)
    ARTOP1  reduce using rule 73 (factor)
    ARTOP2  reduce using rule 73 (factor)
    IN      reduce using rule 73 (factor)
    DISJ    reduce using rule 73 (factor)
    CONJ    reduce using rule 73 (factor)
    ';'     reduce using rule 73 (factor)
    '('     reduce using rule 52 (var)


State 164

   79 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 248


State 165

   52 var: ID .
   73 factor: ID .

    RELOP   reduce using rule 73 (factor)
    ARTOP1  reduce using rule 73 (factor)
    ARTOP2  reduce using rule 73 (factor)
    IN      reduce using rule 73 (factor)
    DISJ    reduce using rule 73 (factor)
    CONJ    reduce using rule 73 (factor)
    '('     reduce using rule 52 (var)
    ')'     reduce using rule 73 (factor)


State 166

   77 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 249


State 167

   78 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 250


State 168

   61 negExpr: NEG . negExpr

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var       go to state 173
    negExpr   go to state 251
    disjExpr  go to state 175
    conjExpr  go to state 176
    relExpr   go to state 177
    artExpr1  go to state 178
    artExpr2  go to state 179
    factor    go to state 180
    constant  go to state 181
    call      go to state 182


State 169

   80 constant: INTEGER .

    RELOP   reduce using rule 80 (constant)
    ARTOP1  reduce using rule 80 (constant)
    ARTOP2  reduce using rule 80 (constant)
    IN      reduce using rule 80 (constant)
    DISJ    reduce using rule 80 (constant)
    CONJ    reduce using rule 80 (constant)
    ')'     reduce using rule 80 (constant)


State 170

   81 constant: FLOAT .

    RELOP   reduce using rule 81 (constant)
    ARTOP1  reduce using rule 81 (constant)
    ARTOP2  reduce using rule 81 (constant)
    IN      reduce using rule 81 (constant)
    DISJ    reduce using rule 81 (constant)
    CONJ    reduce using rule 81 (constant)
    ')'     reduce using rule 81 (constant)


State 171

   82 constant: EMPTY .

    RELOP   reduce using rule 82 (constant)
    ARTOP1  reduce using rule 82 (constant)
    ARTOP2  reduce using rule 82 (constant)
    IN      reduce using rule 82 (constant)
    DISJ    reduce using rule 82 (constant)
    CONJ    reduce using rule 82 (constant)
    ')'     reduce using rule 82 (constant)


State 172

   74 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 252
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 173

   83 call: var . '(' params ')'

    '('  shift, and go to state 253


State 174

   60 simpleExpr: negExpr .

    IN   reduce using rule 60 (simpleExpr)
    ')'  reduce using rule 60 (simpleExpr)


State 175

   62 negExpr: disjExpr .
   63 disjExpr: disjExpr . DISJ conjExpr

    DISJ  shift, and go to state 254

    IN   reduce using rule 62 (negExpr)
    ')'  reduce using rule 62 (negExpr)


State 176

   64 disjExpr: conjExpr .
   65 conjExpr: conjExpr . CONJ relExpr

    CONJ  shift, and go to state 255

    IN    reduce using rule 64 (disjExpr)
    DISJ  reduce using rule 64 (disjExpr)
    ')'   reduce using rule 64 (disjExpr)


State 177

   66 conjExpr: relExpr .
   67 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 256

    IN    reduce using rule 66 (conjExpr)
    DISJ  reduce using rule 66 (conjExpr)
    CONJ  reduce using rule 66 (conjExpr)
    ')'   reduce using rule 66 (conjExpr)


State 178

   68 relExpr: artExpr1 .
   69 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 257

    RELOP  reduce using rule 68 (relExpr)
    IN     reduce using rule 68 (relExpr)
    DISJ   reduce using rule 68 (relExpr)
    CONJ   reduce using rule 68 (relExpr)
    ')'    reduce using rule 68 (relExpr)


State 179

   70 artExpr1: artExpr2 .
   71 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 258

    RELOP   reduce using rule 70 (artExpr1)
    ARTOP1  reduce using rule 70 (artExpr1)
    IN      reduce using rule 70 (artExpr1)
    DISJ    reduce using rule 70 (artExpr1)
    CONJ    reduce using rule 70 (artExpr1)
    ')'     reduce using rule 70 (artExpr1)


State 180

   72 artExpr2: factor .

    RELOP   reduce using rule 72 (artExpr2)
    ARTOP1  reduce using rule 72 (artExpr2)
    ARTOP2  reduce using rule 72 (artExpr2)
    IN      reduce using rule 72 (artExpr2)
    DISJ    reduce using rule 72 (artExpr2)
    CONJ    reduce using rule 72 (artExpr2)
    ')'     reduce using rule 72 (artExpr2)


State 181

   75 factor: constant .

    RELOP   reduce using rule 75 (factor)
    ARTOP1  reduce using rule 75 (factor)
    ARTOP2  reduce using rule 75 (factor)
    IN      reduce using rule 75 (factor)
    DISJ    reduce using rule 75 (factor)
    CONJ    reduce using rule 75 (factor)
    ')'     reduce using rule 75 (factor)


State 182

   76 factor: call .

    RELOP   reduce using rule 76 (factor)
    ARTOP1  reduce using rule 76 (factor)
    ARTOP2  reduce using rule 76 (factor)
    IN      reduce using rule 76 (factor)
    DISJ    reduce using rule 76 (factor)
    CONJ    reduce using rule 76 (factor)
    ')'     reduce using rule 76 (factor)


State 183

   52 var: ID .
   73 factor: ID .

    RELOP   reduce using rule 73 (factor)
    ARTOP1  reduce using rule 73 (factor)
    ARTOP2  reduce using rule 73 (factor)
    IN      reduce using rule 73 (factor)
    DISJ    reduce using rule 73 (factor)
    CONJ    reduce using rule 73 (factor)
    '('     reduce using rule 52 (var)
    ')'     reduce using rule 73 (factor)
    '='     reduce using rule 52 (var)


State 184

   53 inExpr: READ . '(' var ')'

    '('  shift, and go to state 259


State 185

   54 outExpr: WRITE . '(' output ')'

    '('  shift, and go to state 260


State 186

   55 outExpr: WRITELN . '(' output ')'

    '('  shift, and go to state 261


State 187

   47 expression: assign .

    ')'  reduce using rule 47 (expression)


State 188

   51 assign: var . '=' simpleExpr
   83 call: var . '(' params ')'

    '('  shift, and go to state 253
    '='  shift, and go to state 262


State 189

   48 expression: inExpr .

    ')'  reduce using rule 48 (expression)


State 190

   49 expression: outExpr .

    ')'  reduce using rule 49 (expression)


State 191

   50 expression: simpleExpr .
   59 simpleExpr: simpleExpr . IN negExpr

    IN  shift, and go to state 205

    ')'  reduce using rule 50 (expression)


State 192

   46 exprStmt: ';' .

    error    reduce using rule 46 (exprStmt)
    SETOP    reduce using rule 46 (exprStmt)
    ID       reduce using rule 46 (exprStmt)
    IS_SET   reduce using rule 46 (exprStmt)
    EXISTS   reduce using rule 46 (exprStmt)
    NEG      reduce using rule 46 (exprStmt)
    READ     reduce using rule 46 (exprStmt)
    WRITE    reduce using rule 46 (exprStmt)
    WRITELN  reduce using rule 46 (exprStmt)
    INTEGER  reduce using rule 46 (exprStmt)
    FLOAT    reduce using rule 46 (exprStmt)
    EMPTY    reduce using rule 46 (exprStmt)
    ';'      reduce using rule 46 (exprStmt)
    '('      reduce using rule 46 (exprStmt)


State 193

   44 exprStmt: expression . ';'

    ';'  shift, and go to state 263


State 194

   79 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 264


State 195

   52 var: ID .
   73 factor: ID .

    '('  reduce using rule 52 (var)
    ')'  reduce using rule 73 (factor)


State 196

   77 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 265


State 197

   78 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 266


State 198

   80 constant: INTEGER .

    ')'  reduce using rule 80 (constant)


State 199

   81 constant: FLOAT .

    ')'  reduce using rule 81 (constant)


State 200

   82 constant: EMPTY .

    ')'  reduce using rule 82 (constant)


State 201

   74 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 267
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 202

   83 call: var . '(' params ')'

    '('  shift, and go to state 268


State 203

   75 factor: constant .

    ')'  reduce using rule 75 (factor)


State 204

   76 factor: call .

    ')'  reduce using rule 76 (factor)


State 205

   59 simpleExpr: simpleExpr IN . negExpr

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var       go to state 173
    negExpr   go to state 269
    disjExpr  go to state 175
    conjExpr  go to state 176
    relExpr   go to state 177
    artExpr1  go to state 178
    artExpr2  go to state 179
    factor    go to state 180
    constant  go to state 181
    call      go to state 182


State 206

   79 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 270


State 207

   52 var: ID .
   73 factor: ID .

    RELOP   reduce using rule 73 (factor)
    ARTOP1  reduce using rule 73 (factor)
    ARTOP2  reduce using rule 73 (factor)
    IN      reduce using rule 73 (factor)
    DISJ    reduce using rule 73 (factor)
    CONJ    reduce using rule 73 (factor)
    ','     reduce using rule 73 (factor)
    '('     reduce using rule 52 (var)
    ')'     reduce using rule 73 (factor)


State 208

   77 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 271


State 209

   78 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 272


State 210

   61 negExpr: NEG . negExpr

    SETOP    shift, and go to state 206
    ID       shift, and go to state 207
    IS_SET   shift, and go to state 208
    EXISTS   shift, and go to state 209
    NEG      shift, and go to state 210
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    var       go to state 215
    negExpr   go to state 273
    disjExpr  go to state 217
    conjExpr  go to state 218
    relExpr   go to state 219
    artExpr1  go to state 220
    artExpr2  go to state 221
    factor    go to state 222
    constant  go to state 223
    call      go to state 224


State 211

   80 constant: INTEGER .

    RELOP   reduce using rule 80 (constant)
    ARTOP1  reduce using rule 80 (constant)
    ARTOP2  reduce using rule 80 (constant)
    IN      reduce using rule 80 (constant)
    DISJ    reduce using rule 80 (constant)
    CONJ    reduce using rule 80 (constant)
    ','     reduce using rule 80 (constant)
    ')'     reduce using rule 80 (constant)


State 212

   81 constant: FLOAT .

    RELOP   reduce using rule 81 (constant)
    ARTOP1  reduce using rule 81 (constant)
    ARTOP2  reduce using rule 81 (constant)
    IN      reduce using rule 81 (constant)
    DISJ    reduce using rule 81 (constant)
    CONJ    reduce using rule 81 (constant)
    ','     reduce using rule 81 (constant)
    ')'     reduce using rule 81 (constant)


State 213

   82 constant: EMPTY .

    RELOP   reduce using rule 82 (constant)
    ARTOP1  reduce using rule 82 (constant)
    ARTOP2  reduce using rule 82 (constant)
    IN      reduce using rule 82 (constant)
    DISJ    reduce using rule 82 (constant)
    CONJ    reduce using rule 82 (constant)
    ','     reduce using rule 82 (constant)
    ')'     reduce using rule 82 (constant)


State 214

   74 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 274
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 215

   83 call: var . '(' params ')'

    '('  shift, and go to state 275


State 216

   60 simpleExpr: negExpr .

    IN   reduce using rule 60 (simpleExpr)
    ','  reduce using rule 60 (simpleExpr)
    ')'  reduce using rule 60 (simpleExpr)


State 217

   62 negExpr: disjExpr .
   63 disjExpr: disjExpr . DISJ conjExpr

    DISJ  shift, and go to state 276

    IN   reduce using rule 62 (negExpr)
    ','  reduce using rule 62 (negExpr)
    ')'  reduce using rule 62 (negExpr)


State 218

   64 disjExpr: conjExpr .
   65 conjExpr: conjExpr . CONJ relExpr

    CONJ  shift, and go to state 277

    IN    reduce using rule 64 (disjExpr)
    DISJ  reduce using rule 64 (disjExpr)
    ','   reduce using rule 64 (disjExpr)
    ')'   reduce using rule 64 (disjExpr)


State 219

   66 conjExpr: relExpr .
   67 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 278

    IN    reduce using rule 66 (conjExpr)
    DISJ  reduce using rule 66 (conjExpr)
    CONJ  reduce using rule 66 (conjExpr)
    ','   reduce using rule 66 (conjExpr)
    ')'   reduce using rule 66 (conjExpr)


State 220

   68 relExpr: artExpr1 .
   69 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 279

    RELOP  reduce using rule 68 (relExpr)
    IN     reduce using rule 68 (relExpr)
    DISJ   reduce using rule 68 (relExpr)
    CONJ   reduce using rule 68 (relExpr)
    ','    reduce using rule 68 (relExpr)
    ')'    reduce using rule 68 (relExpr)


State 221

   70 artExpr1: artExpr2 .
   71 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 280

    RELOP   reduce using rule 70 (artExpr1)
    ARTOP1  reduce using rule 70 (artExpr1)
    IN      reduce using rule 70 (artExpr1)
    DISJ    reduce using rule 70 (artExpr1)
    CONJ    reduce using rule 70 (artExpr1)
    ','     reduce using rule 70 (artExpr1)
    ')'     reduce using rule 70 (artExpr1)


State 222

   72 artExpr2: factor .

    RELOP   reduce using rule 72 (artExpr2)
    ARTOP1  reduce using rule 72 (artExpr2)
    ARTOP2  reduce using rule 72 (artExpr2)
    IN      reduce using rule 72 (artExpr2)
    DISJ    reduce using rule 72 (artExpr2)
    CONJ    reduce using rule 72 (artExpr2)
    ','     reduce using rule 72 (artExpr2)
    ')'     reduce using rule 72 (artExpr2)


State 223

   75 factor: constant .

    RELOP   reduce using rule 75 (factor)
    ARTOP1  reduce using rule 75 (factor)
    ARTOP2  reduce using rule 75 (factor)
    IN      reduce using rule 75 (factor)
    DISJ    reduce using rule 75 (factor)
    CONJ    reduce using rule 75 (factor)
    ','     reduce using rule 75 (factor)
    ')'     reduce using rule 75 (factor)


State 224

   76 factor: call .

    RELOP   reduce using rule 76 (factor)
    ARTOP1  reduce using rule 76 (factor)
    ARTOP2  reduce using rule 76 (factor)
    IN      reduce using rule 76 (factor)
    DISJ    reduce using rule 76 (factor)
    CONJ    reduce using rule 76 (factor)
    ','     reduce using rule 76 (factor)
    ')'     reduce using rule 76 (factor)


State 225

   45 exprStmt: error .

    error    reduce using rule 45 (exprStmt)
    TYPE     reduce using rule 45 (exprStmt)
    SETOP    reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IF       reduce using rule 45 (exprStmt)
    ELSE     reduce using rule 45 (exprStmt)
    FOR      reduce using rule 45 (exprStmt)
    RETURN   reduce using rule 45 (exprStmt)
    FORALL   reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    ';'      reduce using rule 45 (exprStmt)
    '}'      reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)


State 226

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error
   13 funcDecl: TYPE . ID $@1 arguments $@2 '{' funcBody '}'

    error  shift, and go to state 281
    ID     shift, and go to state 282

    varList  go to state 283
    new_id   go to state 11


State 227

   37 condStmt: IF . cond prepareScope body
   39         | IF . cond prepareScope body ELSE $@3 body

    '('  shift, and go to state 74

    cond  go to state 284


State 228

   28 iterStmt: FOR . '(' exprStmt exprStmt ')' prepareScope body
   29         | FOR . '(' exprStmt exprStmt expression ')' prepareScope body
   32         | FOR . '(' error ')' prepareScope body

    '('  shift, and go to state 285


State 229

   43 returnStmt: RETURN . exprStmt

    error    shift, and go to state 225
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 231
    '('      shift, and go to state 50

    exprStmt    go to state 286
    expression  go to state 236
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 230

   30 iterStmt: FORALL . '(' simpleExpr ')' prepareScope body
   31         | FORALL . '(' error ')' prepareScope body

    '('  shift, and go to state 287


State 231

   46 exprStmt: ';' .

    error    reduce using rule 46 (exprStmt)
    TYPE     reduce using rule 46 (exprStmt)
    SETOP    reduce using rule 46 (exprStmt)
    ID       reduce using rule 46 (exprStmt)
    IF       reduce using rule 46 (exprStmt)
    ELSE     reduce using rule 46 (exprStmt)
    FOR      reduce using rule 46 (exprStmt)
    RETURN   reduce using rule 46 (exprStmt)
    FORALL   reduce using rule 46 (exprStmt)
    IS_SET   reduce using rule 46 (exprStmt)
    EXISTS   reduce using rule 46 (exprStmt)
    NEG      reduce using rule 46 (exprStmt)
    READ     reduce using rule 46 (exprStmt)
    WRITE    reduce using rule 46 (exprStmt)
    WRITELN  reduce using rule 46 (exprStmt)
    INTEGER  reduce using rule 46 (exprStmt)
    FLOAT    reduce using rule 46 (exprStmt)
    EMPTY    reduce using rule 46 (exprStmt)
    ';'      reduce using rule 46 (exprStmt)
    '}'      reduce using rule 46 (exprStmt)
    '('      reduce using rule 46 (exprStmt)


State 232

   26 stmt: iterStmt .

    error    reduce using rule 26 (stmt)
    TYPE     reduce using rule 26 (stmt)
    SETOP    reduce using rule 26 (stmt)
    ID       reduce using rule 26 (stmt)
    IF       reduce using rule 26 (stmt)
    ELSE     reduce using rule 26 (stmt)
    FOR      reduce using rule 26 (stmt)
    RETURN   reduce using rule 26 (stmt)
    FORALL   reduce using rule 26 (stmt)
    IS_SET   reduce using rule 26 (stmt)
    EXISTS   reduce using rule 26 (stmt)
    NEG      reduce using rule 26 (stmt)
    READ     reduce using rule 26 (stmt)
    WRITE    reduce using rule 26 (stmt)
    WRITELN  reduce using rule 26 (stmt)
    INTEGER  reduce using rule 26 (stmt)
    FLOAT    reduce using rule 26 (stmt)
    EMPTY    reduce using rule 26 (stmt)
    ';'      reduce using rule 26 (stmt)
    '}'      reduce using rule 26 (stmt)
    '('      reduce using rule 26 (stmt)


State 233

   27 stmt: condStmt .

    error    reduce using rule 27 (stmt)
    TYPE     reduce using rule 27 (stmt)
    SETOP    reduce using rule 27 (stmt)
    ID       reduce using rule 27 (stmt)
    IF       reduce using rule 27 (stmt)
    ELSE     reduce using rule 27 (stmt)
    FOR      reduce using rule 27 (stmt)
    RETURN   reduce using rule 27 (stmt)
    FORALL   reduce using rule 27 (stmt)
    IS_SET   reduce using rule 27 (stmt)
    EXISTS   reduce using rule 27 (stmt)
    NEG      reduce using rule 27 (stmt)
    READ     reduce using rule 27 (stmt)
    WRITE    reduce using rule 27 (stmt)
    WRITELN  reduce using rule 27 (stmt)
    INTEGER  reduce using rule 27 (stmt)
    FLOAT    reduce using rule 27 (stmt)
    EMPTY    reduce using rule 27 (stmt)
    ';'      reduce using rule 27 (stmt)
    '}'      reduce using rule 27 (stmt)
    '('      reduce using rule 27 (stmt)


State 234

   25 stmt: returnStmt .

    error    reduce using rule 25 (stmt)
    TYPE     reduce using rule 25 (stmt)
    SETOP    reduce using rule 25 (stmt)
    ID       reduce using rule 25 (stmt)
    IF       reduce using rule 25 (stmt)
    ELSE     reduce using rule 25 (stmt)
    FOR      reduce using rule 25 (stmt)
    RETURN   reduce using rule 25 (stmt)
    FORALL   reduce using rule 25 (stmt)
    IS_SET   reduce using rule 25 (stmt)
    EXISTS   reduce using rule 25 (stmt)
    NEG      reduce using rule 25 (stmt)
    READ     reduce using rule 25 (stmt)
    WRITE    reduce using rule 25 (stmt)
    WRITELN  reduce using rule 25 (stmt)
    INTEGER  reduce using rule 25 (stmt)
    FLOAT    reduce using rule 25 (stmt)
    EMPTY    reduce using rule 25 (stmt)
    ';'      reduce using rule 25 (stmt)
    '}'      reduce using rule 25 (stmt)
    '('      reduce using rule 25 (stmt)


State 235

   24 stmt: exprStmt .

    error    reduce using rule 24 (stmt)
    TYPE     reduce using rule 24 (stmt)
    SETOP    reduce using rule 24 (stmt)
    ID       reduce using rule 24 (stmt)
    IF       reduce using rule 24 (stmt)
    ELSE     reduce using rule 24 (stmt)
    FOR      reduce using rule 24 (stmt)
    RETURN   reduce using rule 24 (stmt)
    FORALL   reduce using rule 24 (stmt)
    IS_SET   reduce using rule 24 (stmt)
    EXISTS   reduce using rule 24 (stmt)
    NEG      reduce using rule 24 (stmt)
    READ     reduce using rule 24 (stmt)
    WRITE    reduce using rule 24 (stmt)
    WRITELN  reduce using rule 24 (stmt)
    INTEGER  reduce using rule 24 (stmt)
    FLOAT    reduce using rule 24 (stmt)
    EMPTY    reduce using rule 24 (stmt)
    ';'      reduce using rule 24 (stmt)
    '}'      reduce using rule 24 (stmt)
    '('      reduce using rule 24 (stmt)


State 236

   44 exprStmt: expression . ';'

    ';'  shift, and go to state 288


State 237

   45 exprStmt: error .

    SETOP    reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)
    ')'      reduce using rule 45 (exprStmt)


State 238

   46 exprStmt: ';' .

    SETOP    reduce using rule 46 (exprStmt)
    ID       reduce using rule 46 (exprStmt)
    IS_SET   reduce using rule 46 (exprStmt)
    EXISTS   reduce using rule 46 (exprStmt)
    NEG      reduce using rule 46 (exprStmt)
    READ     reduce using rule 46 (exprStmt)
    WRITE    reduce using rule 46 (exprStmt)
    WRITELN  reduce using rule 46 (exprStmt)
    INTEGER  reduce using rule 46 (exprStmt)
    FLOAT    reduce using rule 46 (exprStmt)
    EMPTY    reduce using rule 46 (exprStmt)
    '('      reduce using rule 46 (exprStmt)
    ')'      reduce using rule 46 (exprStmt)


State 239

   44 exprStmt: expression . ';'

    ';'  shift, and go to state 289


State 240

   59 simpleExpr: simpleExpr IN . negExpr

    SETOP    shift, and go to state 206
    ID       shift, and go to state 207
    IS_SET   shift, and go to state 208
    EXISTS   shift, and go to state 209
    NEG      shift, and go to state 210
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    var       go to state 215
    negExpr   go to state 290
    disjExpr  go to state 217
    conjExpr  go to state 218
    relExpr   go to state 219
    artExpr1  go to state 220
    artExpr2  go to state 221
    factor    go to state 222
    constant  go to state 223
    call      go to state 224


State 241

   33 body: '{' . funcBody '}'

    error    reduce using rule 20 (funcBody)
    TYPE     reduce using rule 20 (funcBody)
    SETOP    reduce using rule 20 (funcBody)
    ID       reduce using rule 20 (funcBody)
    IF       reduce using rule 20 (funcBody)
    FOR      reduce using rule 20 (funcBody)
    RETURN   reduce using rule 20 (funcBody)
    FORALL   reduce using rule 20 (funcBody)
    IS_SET   reduce using rule 20 (funcBody)
    EXISTS   reduce using rule 20 (funcBody)
    NEG      reduce using rule 20 (funcBody)
    READ     reduce using rule 20 (funcBody)
    WRITE    reduce using rule 20 (funcBody)
    WRITELN  reduce using rule 20 (funcBody)
    INTEGER  reduce using rule 20 (funcBody)
    FLOAT    reduce using rule 20 (funcBody)
    EMPTY    reduce using rule 20 (funcBody)
    ';'      reduce using rule 20 (funcBody)
    '}'      reduce using rule 20 (funcBody)
    '('      reduce using rule 20 (funcBody)

    funcBody  go to state 291


State 242

   35 body: varDecl .

    error    reduce using rule 35 (body)
    TYPE     reduce using rule 35 (body)
    SETOP    reduce using rule 35 (body)
    ID       reduce using rule 35 (body)
    IF       reduce using rule 35 (body)
    FOR      reduce using rule 35 (body)
    RETURN   reduce using rule 35 (body)
    FORALL   reduce using rule 35 (body)
    IS_SET   reduce using rule 35 (body)
    EXISTS   reduce using rule 35 (body)
    NEG      reduce using rule 35 (body)
    READ     reduce using rule 35 (body)
    WRITE    reduce using rule 35 (body)
    WRITELN  reduce using rule 35 (body)
    INTEGER  reduce using rule 35 (body)
    FLOAT    reduce using rule 35 (body)
    EMPTY    reduce using rule 35 (body)
    ';'      reduce using rule 35 (body)
    '}'      reduce using rule 35 (body)
    '('      reduce using rule 35 (body)


State 243

   36 body: funcDecl .

    error    reduce using rule 36 (body)
    TYPE     reduce using rule 36 (body)
    SETOP    reduce using rule 36 (body)
    ID       reduce using rule 36 (body)
    IF       reduce using rule 36 (body)
    FOR      reduce using rule 36 (body)
    RETURN   reduce using rule 36 (body)
    FORALL   reduce using rule 36 (body)
    IS_SET   reduce using rule 36 (body)
    EXISTS   reduce using rule 36 (body)
    NEG      reduce using rule 36 (body)
    READ     reduce using rule 36 (body)
    WRITE    reduce using rule 36 (body)
    WRITELN  reduce using rule 36 (body)
    INTEGER  reduce using rule 36 (body)
    FLOAT    reduce using rule 36 (body)
    EMPTY    reduce using rule 36 (body)
    ';'      reduce using rule 36 (body)
    '}'      reduce using rule 36 (body)
    '('      reduce using rule 36 (body)


State 244

   34 body: stmt .

    error    reduce using rule 34 (body)
    TYPE     reduce using rule 34 (body)
    SETOP    reduce using rule 34 (body)
    ID       reduce using rule 34 (body)
    IF       reduce using rule 34 (body)
    FOR      reduce using rule 34 (body)
    RETURN   reduce using rule 34 (body)
    FORALL   reduce using rule 34 (body)
    IS_SET   reduce using rule 34 (body)
    EXISTS   reduce using rule 34 (body)
    NEG      reduce using rule 34 (body)
    READ     reduce using rule 34 (body)
    WRITE    reduce using rule 34 (body)
    WRITELN  reduce using rule 34 (body)
    INTEGER  reduce using rule 34 (body)
    FLOAT    reduce using rule 34 (body)
    EMPTY    reduce using rule 34 (body)
    ';'      reduce using rule 34 (body)
    '}'      reduce using rule 34 (body)
    '('      reduce using rule 34 (body)


State 245

    7 varDecl: TYPE error .

    error    reduce using rule 7 (varDecl)
    TYPE     reduce using rule 7 (varDecl)
    SETOP    reduce using rule 7 (varDecl)
    ID       reduce using rule 7 (varDecl)
    IF       reduce using rule 7 (varDecl)
    FOR      reduce using rule 7 (varDecl)
    RETURN   reduce using rule 7 (varDecl)
    FORALL   reduce using rule 7 (varDecl)
    IS_SET   reduce using rule 7 (varDecl)
    EXISTS   reduce using rule 7 (varDecl)
    NEG      reduce using rule 7 (varDecl)
    READ     reduce using rule 7 (varDecl)
    WRITE    reduce using rule 7 (varDecl)
    WRITELN  reduce using rule 7 (varDecl)
    INTEGER  reduce using rule 7 (varDecl)
    FLOAT    reduce using rule 7 (varDecl)
    EMPTY    reduce using rule 7 (varDecl)
    ';'      reduce using rule 7 (varDecl)
    '}'      reduce using rule 7 (varDecl)
    '('      reduce using rule 7 (varDecl)


State 246

   10 new_id: ID .
   13 funcDecl: TYPE ID . $@1 arguments $@2 '{' funcBody '}'

    ';'  reduce using rule 10 (new_id)
    ','  reduce using rule 10 (new_id)
    '('  reduce using rule 11 ($@1)

    $@1  go to state 292


State 247

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 293
    ','  shift, and go to state 14


State 248

   79 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 294
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 249

   77 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 194
    ID       shift, and go to state 195
    IS_SET   shift, and go to state 196
    EXISTS   shift, and go to state 197
    INTEGER  shift, and go to state 198
    FLOAT    shift, and go to state 199
    EMPTY    shift, and go to state 200
    '('      shift, and go to state 201

    var       go to state 202
    factor    go to state 295
    constant  go to state 203
    call      go to state 204


State 250

   78 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 296
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 251

   61 negExpr: NEG negExpr .

    IN   reduce using rule 61 (negExpr)
    ')'  reduce using rule 61 (negExpr)


State 252

   59 simpleExpr: simpleExpr . IN negExpr
   74 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 205
    ')'  shift, and go to state 297


State 253

   83 call: var '(' . params ')'

    SETOP    shift, and go to state 206
    ID       shift, and go to state 207
    IS_SET   shift, and go to state 208
    EXISTS   shift, and go to state 209
    NEG      shift, and go to state 210
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    ')'  reduce using rule 84 (params)

    var         go to state 215
    simpleExpr  go to state 114
    negExpr     go to state 216
    disjExpr    go to state 217
    conjExpr    go to state 218
    relExpr     go to state 219
    artExpr1    go to state 220
    artExpr2    go to state 221
    factor      go to state 222
    constant    go to state 223
    call        go to state 224
    params      go to state 298
    paramList   go to state 116


State 254

   63 disjExpr: disjExpr DISJ . conjExpr

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var       go to state 173
    conjExpr  go to state 299
    relExpr   go to state 177
    artExpr1  go to state 178
    artExpr2  go to state 179
    factor    go to state 180
    constant  go to state 181
    call      go to state 182


State 255

   65 conjExpr: conjExpr CONJ . relExpr

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var       go to state 173
    relExpr   go to state 300
    artExpr1  go to state 178
    artExpr2  go to state 179
    factor    go to state 180
    constant  go to state 181
    call      go to state 182


State 256

   67 relExpr: relExpr RELOP . artExpr1

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var       go to state 173
    artExpr1  go to state 301
    artExpr2  go to state 179
    factor    go to state 180
    constant  go to state 181
    call      go to state 182


State 257

   69 artExpr1: artExpr1 ARTOP1 . artExpr2

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var       go to state 173
    artExpr2  go to state 302
    factor    go to state 180
    constant  go to state 181
    call      go to state 182


State 258

   71 artExpr2: artExpr2 ARTOP2 . factor

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var       go to state 173
    factor    go to state 303
    constant  go to state 181
    call      go to state 182


State 259

   53 inExpr: READ '(' . var ')'

    ID  shift, and go to state 106

    var  go to state 304


State 260

   54 outExpr: WRITE '(' . output ')'

    ID      shift, and go to state 106
    CHAR    shift, and go to state 108
    STRING  shift, and go to state 109

    var     go to state 110
    output  go to state 305


State 261

   55 outExpr: WRITELN '(' . output ')'

    ID      shift, and go to state 106
    CHAR    shift, and go to state 108
    STRING  shift, and go to state 109

    var     go to state 110
    output  go to state 306


State 262

   51 assign: var '=' . simpleExpr

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 307
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 263

   44 exprStmt: expression ';' .

    error    reduce using rule 44 (exprStmt)
    SETOP    reduce using rule 44 (exprStmt)
    ID       reduce using rule 44 (exprStmt)
    IS_SET   reduce using rule 44 (exprStmt)
    EXISTS   reduce using rule 44 (exprStmt)
    NEG      reduce using rule 44 (exprStmt)
    READ     reduce using rule 44 (exprStmt)
    WRITE    reduce using rule 44 (exprStmt)
    WRITELN  reduce using rule 44 (exprStmt)
    INTEGER  reduce using rule 44 (exprStmt)
    FLOAT    reduce using rule 44 (exprStmt)
    EMPTY    reduce using rule 44 (exprStmt)
    ';'      reduce using rule 44 (exprStmt)
    '('      reduce using rule 44 (exprStmt)


State 264

   79 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 308
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 265

   77 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 194
    ID       shift, and go to state 195
    IS_SET   shift, and go to state 196
    EXISTS   shift, and go to state 197
    INTEGER  shift, and go to state 198
    FLOAT    shift, and go to state 199
    EMPTY    shift, and go to state 200
    '('      shift, and go to state 201

    var       go to state 202
    factor    go to state 309
    constant  go to state 203
    call      go to state 204


State 266

   78 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 310
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 267

   59 simpleExpr: simpleExpr . IN negExpr
   74 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 205
    ')'  shift, and go to state 311


State 268

   83 call: var '(' . params ')'

    SETOP    shift, and go to state 206
    ID       shift, and go to state 207
    IS_SET   shift, and go to state 208
    EXISTS   shift, and go to state 209
    NEG      shift, and go to state 210
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    ')'  reduce using rule 84 (params)

    var         go to state 215
    simpleExpr  go to state 114
    negExpr     go to state 216
    disjExpr    go to state 217
    conjExpr    go to state 218
    relExpr     go to state 219
    artExpr1    go to state 220
    artExpr2    go to state 221
    factor      go to state 222
    constant    go to state 223
    call        go to state 224
    params      go to state 312
    paramList   go to state 116


State 269

   59 simpleExpr: simpleExpr IN negExpr .

    IN   reduce using rule 59 (simpleExpr)
    ')'  reduce using rule 59 (simpleExpr)


State 270

   79 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 313
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 271

   77 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 194
    ID       shift, and go to state 195
    IS_SET   shift, and go to state 196
    EXISTS   shift, and go to state 197
    INTEGER  shift, and go to state 198
    FLOAT    shift, and go to state 199
    EMPTY    shift, and go to state 200
    '('      shift, and go to state 201

    var       go to state 202
    factor    go to state 314
    constant  go to state 203
    call      go to state 204


State 272

   78 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 315
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 273

   61 negExpr: NEG negExpr .

    IN   reduce using rule 61 (negExpr)
    ','  reduce using rule 61 (negExpr)
    ')'  reduce using rule 61 (negExpr)


State 274

   59 simpleExpr: simpleExpr . IN negExpr
   74 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 205
    ')'  shift, and go to state 316


State 275

   83 call: var '(' . params ')'

    SETOP    shift, and go to state 206
    ID       shift, and go to state 207
    IS_SET   shift, and go to state 208
    EXISTS   shift, and go to state 209
    NEG      shift, and go to state 210
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    ')'  reduce using rule 84 (params)

    var         go to state 215
    simpleExpr  go to state 114
    negExpr     go to state 216
    disjExpr    go to state 217
    conjExpr    go to state 218
    relExpr     go to state 219
    artExpr1    go to state 220
    artExpr2    go to state 221
    factor      go to state 222
    constant    go to state 223
    call        go to state 224
    params      go to state 317
    paramList   go to state 116


State 276

   63 disjExpr: disjExpr DISJ . conjExpr

    SETOP    shift, and go to state 206
    ID       shift, and go to state 207
    IS_SET   shift, and go to state 208
    EXISTS   shift, and go to state 209
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    var       go to state 215
    conjExpr  go to state 318
    relExpr   go to state 219
    artExpr1  go to state 220
    artExpr2  go to state 221
    factor    go to state 222
    constant  go to state 223
    call      go to state 224


State 277

   65 conjExpr: conjExpr CONJ . relExpr

    SETOP    shift, and go to state 206
    ID       shift, and go to state 207
    IS_SET   shift, and go to state 208
    EXISTS   shift, and go to state 209
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    var       go to state 215
    relExpr   go to state 319
    artExpr1  go to state 220
    artExpr2  go to state 221
    factor    go to state 222
    constant  go to state 223
    call      go to state 224


State 278

   67 relExpr: relExpr RELOP . artExpr1

    SETOP    shift, and go to state 206
    ID       shift, and go to state 207
    IS_SET   shift, and go to state 208
    EXISTS   shift, and go to state 209
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    var       go to state 215
    artExpr1  go to state 320
    artExpr2  go to state 221
    factor    go to state 222
    constant  go to state 223
    call      go to state 224


State 279

   69 artExpr1: artExpr1 ARTOP1 . artExpr2

    SETOP    shift, and go to state 206
    ID       shift, and go to state 207
    IS_SET   shift, and go to state 208
    EXISTS   shift, and go to state 209
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    var       go to state 215
    artExpr2  go to state 321
    factor    go to state 222
    constant  go to state 223
    call      go to state 224


State 280

   71 artExpr2: artExpr2 ARTOP2 . factor

    SETOP    shift, and go to state 206
    ID       shift, and go to state 207
    IS_SET   shift, and go to state 208
    EXISTS   shift, and go to state 209
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    var       go to state 215
    factor    go to state 322
    constant  go to state 223
    call      go to state 224


State 281

    7 varDecl: TYPE error .

    error    reduce using rule 7 (varDecl)
    TYPE     reduce using rule 7 (varDecl)
    SETOP    reduce using rule 7 (varDecl)
    ID       reduce using rule 7 (varDecl)
    IF       reduce using rule 7 (varDecl)
    ELSE     reduce using rule 7 (varDecl)
    FOR      reduce using rule 7 (varDecl)
    RETURN   reduce using rule 7 (varDecl)
    FORALL   reduce using rule 7 (varDecl)
    IS_SET   reduce using rule 7 (varDecl)
    EXISTS   reduce using rule 7 (varDecl)
    NEG      reduce using rule 7 (varDecl)
    READ     reduce using rule 7 (varDecl)
    WRITE    reduce using rule 7 (varDecl)
    WRITELN  reduce using rule 7 (varDecl)
    INTEGER  reduce using rule 7 (varDecl)
    FLOAT    reduce using rule 7 (varDecl)
    EMPTY    reduce using rule 7 (varDecl)
    ';'      reduce using rule 7 (varDecl)
    '}'      reduce using rule 7 (varDecl)
    '('      reduce using rule 7 (varDecl)


State 282

   10 new_id: ID .
   13 funcDecl: TYPE ID . $@1 arguments $@2 '{' funcBody '}'

    ';'  reduce using rule 10 (new_id)
    ','  reduce using rule 10 (new_id)
    '('  reduce using rule 11 ($@1)

    $@1  go to state 323


State 283

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 324
    ','  shift, and go to state 14


State 284

   37 condStmt: IF cond . prepareScope body
   39         | IF cond . prepareScope body ELSE $@3 body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 325


State 285

   28 iterStmt: FOR '(' . exprStmt exprStmt ')' prepareScope body
   29         | FOR '(' . exprStmt exprStmt expression ')' prepareScope body
   32         | FOR '(' . error ')' prepareScope body

    error    shift, and go to state 326
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 192
    '('      shift, and go to state 50

    exprStmt    go to state 327
    expression  go to state 193
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 286

   43 returnStmt: RETURN exprStmt .

    error    reduce using rule 43 (returnStmt)
    TYPE     reduce using rule 43 (returnStmt)
    SETOP    reduce using rule 43 (returnStmt)
    ID       reduce using rule 43 (returnStmt)
    IF       reduce using rule 43 (returnStmt)
    ELSE     reduce using rule 43 (returnStmt)
    FOR      reduce using rule 43 (returnStmt)
    RETURN   reduce using rule 43 (returnStmt)
    FORALL   reduce using rule 43 (returnStmt)
    IS_SET   reduce using rule 43 (returnStmt)
    EXISTS   reduce using rule 43 (returnStmt)
    NEG      reduce using rule 43 (returnStmt)
    READ     reduce using rule 43 (returnStmt)
    WRITE    reduce using rule 43 (returnStmt)
    WRITELN  reduce using rule 43 (returnStmt)
    INTEGER  reduce using rule 43 (returnStmt)
    FLOAT    reduce using rule 43 (returnStmt)
    EMPTY    reduce using rule 43 (returnStmt)
    ';'      reduce using rule 43 (returnStmt)
    '}'      reduce using rule 43 (returnStmt)
    '('      reduce using rule 43 (returnStmt)


State 287

   30 iterStmt: FORALL '(' . simpleExpr ')' prepareScope body
   31         | FORALL '(' . error ')' prepareScope body

    error    shift, and go to state 328
    SETOP    shift, and go to state 164
    ID       shift, and go to state 165
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172

    var         go to state 173
    simpleExpr  go to state 329
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 288

   44 exprStmt: expression ';' .

    error    reduce using rule 44 (exprStmt)
    TYPE     reduce using rule 44 (exprStmt)
    SETOP    reduce using rule 44 (exprStmt)
    ID       reduce using rule 44 (exprStmt)
    IF       reduce using rule 44 (exprStmt)
    ELSE     reduce using rule 44 (exprStmt)
    FOR      reduce using rule 44 (exprStmt)
    RETURN   reduce using rule 44 (exprStmt)
    FORALL   reduce using rule 44 (exprStmt)
    IS_SET   reduce using rule 44 (exprStmt)
    EXISTS   reduce using rule 44 (exprStmt)
    NEG      reduce using rule 44 (exprStmt)
    READ     reduce using rule 44 (exprStmt)
    WRITE    reduce using rule 44 (exprStmt)
    WRITELN  reduce using rule 44 (exprStmt)
    INTEGER  reduce using rule 44 (exprStmt)
    FLOAT    reduce using rule 44 (exprStmt)
    EMPTY    reduce using rule 44 (exprStmt)
    ';'      reduce using rule 44 (exprStmt)
    '}'      reduce using rule 44 (exprStmt)
    '('      reduce using rule 44 (exprStmt)


State 289

   44 exprStmt: expression ';' .

    SETOP    reduce using rule 44 (exprStmt)
    ID       reduce using rule 44 (exprStmt)
    IS_SET   reduce using rule 44 (exprStmt)
    EXISTS   reduce using rule 44 (exprStmt)
    NEG      reduce using rule 44 (exprStmt)
    READ     reduce using rule 44 (exprStmt)
    WRITE    reduce using rule 44 (exprStmt)
    WRITELN  reduce using rule 44 (exprStmt)
    INTEGER  reduce using rule 44 (exprStmt)
    FLOAT    reduce using rule 44 (exprStmt)
    EMPTY    reduce using rule 44 (exprStmt)
    '('      reduce using rule 44 (exprStmt)
    ')'      reduce using rule 44 (exprStmt)


State 290

   59 simpleExpr: simpleExpr IN negExpr .

    IN   reduce using rule 59 (simpleExpr)
    ','  reduce using rule 59 (simpleExpr)
    ')'  reduce using rule 59 (simpleExpr)


State 291

   21 funcBody: funcBody . varDecl
   22         | funcBody . funcDecl
   23         | funcBody . stmt
   33 body: '{' funcBody . '}'

    error    shift, and go to state 32
    TYPE     shift, and go to state 162
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 35
    FOR      shift, and go to state 36
    RETURN   shift, and go to state 37
    FORALL   shift, and go to state 38
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 48
    '}'      shift, and go to state 330
    '('      shift, and go to state 50

    varDecl     go to state 51
    funcDecl    go to state 52
    stmt        go to state 53
    iterStmt    go to state 54
    condStmt    go to state 55
    returnStmt  go to state 56
    exprStmt    go to state 57
    expression  go to state 58
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 292

   13 funcDecl: TYPE ID $@1 . arguments $@2 '{' funcBody '}'

    '('  shift, and go to state 15

    arguments  go to state 331


State 293

    6 varDecl: TYPE varList ';' .

    error    reduce using rule 6 (varDecl)
    TYPE     reduce using rule 6 (varDecl)
    SETOP    reduce using rule 6 (varDecl)
    ID       reduce using rule 6 (varDecl)
    IF       reduce using rule 6 (varDecl)
    FOR      reduce using rule 6 (varDecl)
    RETURN   reduce using rule 6 (varDecl)
    FORALL   reduce using rule 6 (varDecl)
    IS_SET   reduce using rule 6 (varDecl)
    EXISTS   reduce using rule 6 (varDecl)
    NEG      reduce using rule 6 (varDecl)
    READ     reduce using rule 6 (varDecl)
    WRITE    reduce using rule 6 (varDecl)
    WRITELN  reduce using rule 6 (varDecl)
    INTEGER  reduce using rule 6 (varDecl)
    FLOAT    reduce using rule 6 (varDecl)
    EMPTY    reduce using rule 6 (varDecl)
    ';'      reduce using rule 6 (varDecl)
    '}'      reduce using rule 6 (varDecl)
    '('      reduce using rule 6 (varDecl)


State 294

   59 simpleExpr: simpleExpr . IN negExpr
   79 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 205
    ')'  shift, and go to state 332


State 295

   77 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 333


State 296

   59 simpleExpr: simpleExpr . IN negExpr
   78 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 205
    ')'  shift, and go to state 334


State 297

   74 factor: '(' simpleExpr ')' .

    RELOP   reduce using rule 74 (factor)
    ARTOP1  reduce using rule 74 (factor)
    ARTOP2  reduce using rule 74 (factor)
    IN      reduce using rule 74 (factor)
    DISJ    reduce using rule 74 (factor)
    CONJ    reduce using rule 74 (factor)
    ')'     reduce using rule 74 (factor)


State 298

   83 call: var '(' params . ')'

    ')'  shift, and go to state 335


State 299

   63 disjExpr: disjExpr DISJ conjExpr .
   65 conjExpr: conjExpr . CONJ relExpr

    CONJ  shift, and go to state 255

    IN    reduce using rule 63 (disjExpr)
    DISJ  reduce using rule 63 (disjExpr)
    ')'   reduce using rule 63 (disjExpr)


State 300

   65 conjExpr: conjExpr CONJ relExpr .
   67 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 256

    IN    reduce using rule 65 (conjExpr)
    DISJ  reduce using rule 65 (conjExpr)
    CONJ  reduce using rule 65 (conjExpr)
    ')'   reduce using rule 65 (conjExpr)


State 301

   67 relExpr: relExpr RELOP artExpr1 .
   69 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 257

    RELOP  reduce using rule 67 (relExpr)
    IN     reduce using rule 67 (relExpr)
    DISJ   reduce using rule 67 (relExpr)
    CONJ   reduce using rule 67 (relExpr)
    ')'    reduce using rule 67 (relExpr)


State 302

   69 artExpr1: artExpr1 ARTOP1 artExpr2 .
   71 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 258

    RELOP   reduce using rule 69 (artExpr1)
    ARTOP1  reduce using rule 69 (artExpr1)
    IN      reduce using rule 69 (artExpr1)
    DISJ    reduce using rule 69 (artExpr1)
    CONJ    reduce using rule 69 (artExpr1)
    ')'     reduce using rule 69 (artExpr1)


State 303

   71 artExpr2: artExpr2 ARTOP2 factor .

    RELOP   reduce using rule 71 (artExpr2)
    ARTOP1  reduce using rule 71 (artExpr2)
    ARTOP2  reduce using rule 71 (artExpr2)
    IN      reduce using rule 71 (artExpr2)
    DISJ    reduce using rule 71 (artExpr2)
    CONJ    reduce using rule 71 (artExpr2)
    ')'     reduce using rule 71 (artExpr2)


State 304

   53 inExpr: READ '(' var . ')'

    ')'  shift, and go to state 336


State 305

   54 outExpr: WRITE '(' output . ')'

    ')'  shift, and go to state 337


State 306

   55 outExpr: WRITELN '(' output . ')'

    ')'  shift, and go to state 338


State 307

   51 assign: var '=' simpleExpr .
   59 simpleExpr: simpleExpr . IN negExpr

    IN  shift, and go to state 205

    ')'  reduce using rule 51 (assign)


State 308

   59 simpleExpr: simpleExpr . IN negExpr
   79 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 205
    ')'  shift, and go to state 339


State 309

   77 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 340


State 310

   59 simpleExpr: simpleExpr . IN negExpr
   78 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 205
    ')'  shift, and go to state 341


State 311

   74 factor: '(' simpleExpr ')' .

    ')'  reduce using rule 74 (factor)


State 312

   83 call: var '(' params . ')'

    ')'  shift, and go to state 342


State 313

   59 simpleExpr: simpleExpr . IN negExpr
   79 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 205
    ')'  shift, and go to state 343


State 314

   77 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 344


State 315

   59 simpleExpr: simpleExpr . IN negExpr
   78 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 205
    ')'  shift, and go to state 345


State 316

   74 factor: '(' simpleExpr ')' .

    RELOP   reduce using rule 74 (factor)
    ARTOP1  reduce using rule 74 (factor)
    ARTOP2  reduce using rule 74 (factor)
    IN      reduce using rule 74 (factor)
    DISJ    reduce using rule 74 (factor)
    CONJ    reduce using rule 74 (factor)
    ','     reduce using rule 74 (factor)
    ')'     reduce using rule 74 (factor)


State 317

   83 call: var '(' params . ')'

    ')'  shift, and go to state 346


State 318

   63 disjExpr: disjExpr DISJ conjExpr .
   65 conjExpr: conjExpr . CONJ relExpr

    CONJ  shift, and go to state 277

    IN    reduce using rule 63 (disjExpr)
    DISJ  reduce using rule 63 (disjExpr)
    ','   reduce using rule 63 (disjExpr)
    ')'   reduce using rule 63 (disjExpr)


State 319

   65 conjExpr: conjExpr CONJ relExpr .
   67 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 278

    IN    reduce using rule 65 (conjExpr)
    DISJ  reduce using rule 65 (conjExpr)
    CONJ  reduce using rule 65 (conjExpr)
    ','   reduce using rule 65 (conjExpr)
    ')'   reduce using rule 65 (conjExpr)


State 320

   67 relExpr: relExpr RELOP artExpr1 .
   69 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 279

    RELOP  reduce using rule 67 (relExpr)
    IN     reduce using rule 67 (relExpr)
    DISJ   reduce using rule 67 (relExpr)
    CONJ   reduce using rule 67 (relExpr)
    ','    reduce using rule 67 (relExpr)
    ')'    reduce using rule 67 (relExpr)


State 321

   69 artExpr1: artExpr1 ARTOP1 artExpr2 .
   71 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 280

    RELOP   reduce using rule 69 (artExpr1)
    ARTOP1  reduce using rule 69 (artExpr1)
    IN      reduce using rule 69 (artExpr1)
    DISJ    reduce using rule 69 (artExpr1)
    CONJ    reduce using rule 69 (artExpr1)
    ','     reduce using rule 69 (artExpr1)
    ')'     reduce using rule 69 (artExpr1)


State 322

   71 artExpr2: artExpr2 ARTOP2 factor .

    RELOP   reduce using rule 71 (artExpr2)
    ARTOP1  reduce using rule 71 (artExpr2)
    ARTOP2  reduce using rule 71 (artExpr2)
    IN      reduce using rule 71 (artExpr2)
    DISJ    reduce using rule 71 (artExpr2)
    CONJ    reduce using rule 71 (artExpr2)
    ','     reduce using rule 71 (artExpr2)
    ')'     reduce using rule 71 (artExpr2)


State 323

   13 funcDecl: TYPE ID $@1 . arguments $@2 '{' funcBody '}'

    '('  shift, and go to state 15

    arguments  go to state 347


State 324

    6 varDecl: TYPE varList ';' .

    error    reduce using rule 6 (varDecl)
    TYPE     reduce using rule 6 (varDecl)
    SETOP    reduce using rule 6 (varDecl)
    ID       reduce using rule 6 (varDecl)
    IF       reduce using rule 6 (varDecl)
    ELSE     reduce using rule 6 (varDecl)
    FOR      reduce using rule 6 (varDecl)
    RETURN   reduce using rule 6 (varDecl)
    FORALL   reduce using rule 6 (varDecl)
    IS_SET   reduce using rule 6 (varDecl)
    EXISTS   reduce using rule 6 (varDecl)
    NEG      reduce using rule 6 (varDecl)
    READ     reduce using rule 6 (varDecl)
    WRITE    reduce using rule 6 (varDecl)
    WRITELN  reduce using rule 6 (varDecl)
    INTEGER  reduce using rule 6 (varDecl)
    FLOAT    reduce using rule 6 (varDecl)
    EMPTY    reduce using rule 6 (varDecl)
    ';'      reduce using rule 6 (varDecl)
    '}'      reduce using rule 6 (varDecl)
    '('      reduce using rule 6 (varDecl)


State 325

   37 condStmt: IF cond prepareScope . body
   39         | IF cond prepareScope . body ELSE $@3 body

    error    shift, and go to state 225
    TYPE     shift, and go to state 226
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 227
    FOR      shift, and go to state 228
    RETURN   shift, and go to state 229
    FORALL   shift, and go to state 230
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 231
    '{'      shift, and go to state 127
    '('      shift, and go to state 50

    varDecl     go to state 128
    funcDecl    go to state 129
    stmt        go to state 130
    iterStmt    go to state 232
    body        go to state 348
    condStmt    go to state 233
    returnStmt  go to state 234
    exprStmt    go to state 235
    expression  go to state 236
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 326

   32 iterStmt: FOR '(' error . ')' prepareScope body
   45 exprStmt: error .

    ')'  shift, and go to state 349

    error    reduce using rule 45 (exprStmt)
    SETOP    reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    ';'      reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)


State 327

   28 iterStmt: FOR '(' exprStmt . exprStmt ')' prepareScope body
   29         | FOR '(' exprStmt . exprStmt expression ')' prepareScope body

    error    shift, and go to state 237
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 238
    '('      shift, and go to state 50

    exprStmt    go to state 350
    expression  go to state 239
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 328

   31 iterStmt: FORALL '(' error . ')' prepareScope body

    ')'  shift, and go to state 351


State 329

   30 iterStmt: FORALL '(' simpleExpr . ')' prepareScope body
   59 simpleExpr: simpleExpr . IN negExpr

    IN   shift, and go to state 205
    ')'  shift, and go to state 352


State 330

   33 body: '{' funcBody '}' .

    error    reduce using rule 33 (body)
    TYPE     reduce using rule 33 (body)
    SETOP    reduce using rule 33 (body)
    ID       reduce using rule 33 (body)
    IF       reduce using rule 33 (body)
    FOR      reduce using rule 33 (body)
    RETURN   reduce using rule 33 (body)
    FORALL   reduce using rule 33 (body)
    IS_SET   reduce using rule 33 (body)
    EXISTS   reduce using rule 33 (body)
    NEG      reduce using rule 33 (body)
    READ     reduce using rule 33 (body)
    WRITE    reduce using rule 33 (body)
    WRITELN  reduce using rule 33 (body)
    INTEGER  reduce using rule 33 (body)
    FLOAT    reduce using rule 33 (body)
    EMPTY    reduce using rule 33 (body)
    ';'      reduce using rule 33 (body)
    '}'      reduce using rule 33 (body)
    '('      reduce using rule 33 (body)


State 331

   13 funcDecl: TYPE ID $@1 arguments . $@2 '{' funcBody '}'

    '{'  reduce using rule 12 ($@2)

    $@2  go to state 353


State 332

   79 factor: SETOP '(' simpleExpr ')' .

    RELOP   reduce using rule 79 (factor)
    ARTOP1  reduce using rule 79 (factor)
    ARTOP2  reduce using rule 79 (factor)
    IN      reduce using rule 79 (factor)
    DISJ    reduce using rule 79 (factor)
    CONJ    reduce using rule 79 (factor)
    ')'     reduce using rule 79 (factor)


State 333

   77 factor: IS_SET '(' factor ')' .

    RELOP   reduce using rule 77 (factor)
    ARTOP1  reduce using rule 77 (factor)
    ARTOP2  reduce using rule 77 (factor)
    IN      reduce using rule 77 (factor)
    DISJ    reduce using rule 77 (factor)
    CONJ    reduce using rule 77 (factor)
    ')'     reduce using rule 77 (factor)


State 334

   78 factor: EXISTS '(' simpleExpr ')' .

    RELOP   reduce using rule 78 (factor)
    ARTOP1  reduce using rule 78 (factor)
    ARTOP2  reduce using rule 78 (factor)
    IN      reduce using rule 78 (factor)
    DISJ    reduce using rule 78 (factor)
    CONJ    reduce using rule 78 (factor)
    ')'     reduce using rule 78 (factor)


State 335

   83 call: var '(' params ')' .

    RELOP   reduce using rule 83 (call)
    ARTOP1  reduce using rule 83 (call)
    ARTOP2  reduce using rule 83 (call)
    IN      reduce using rule 83 (call)
    DISJ    reduce using rule 83 (call)
    CONJ    reduce using rule 83 (call)
    ')'     reduce using rule 83 (call)


State 336

   53 inExpr: READ '(' var ')' .

    ')'  reduce using rule 53 (inExpr)


State 337

   54 outExpr: WRITE '(' output ')' .

    ')'  reduce using rule 54 (outExpr)


State 338

   55 outExpr: WRITELN '(' output ')' .

    ')'  reduce using rule 55 (outExpr)


State 339

   79 factor: SETOP '(' simpleExpr ')' .

    ')'  reduce using rule 79 (factor)


State 340

   77 factor: IS_SET '(' factor ')' .

    ')'  reduce using rule 77 (factor)


State 341

   78 factor: EXISTS '(' simpleExpr ')' .

    ')'  reduce using rule 78 (factor)


State 342

   83 call: var '(' params ')' .

    ')'  reduce using rule 83 (call)


State 343

   79 factor: SETOP '(' simpleExpr ')' .

    RELOP   reduce using rule 79 (factor)
    ARTOP1  reduce using rule 79 (factor)
    ARTOP2  reduce using rule 79 (factor)
    IN      reduce using rule 79 (factor)
    DISJ    reduce using rule 79 (factor)
    CONJ    reduce using rule 79 (factor)
    ','     reduce using rule 79 (factor)
    ')'     reduce using rule 79 (factor)


State 344

   77 factor: IS_SET '(' factor ')' .

    RELOP   reduce using rule 77 (factor)
    ARTOP1  reduce using rule 77 (factor)
    ARTOP2  reduce using rule 77 (factor)
    IN      reduce using rule 77 (factor)
    DISJ    reduce using rule 77 (factor)
    CONJ    reduce using rule 77 (factor)
    ','     reduce using rule 77 (factor)
    ')'     reduce using rule 77 (factor)


State 345

   78 factor: EXISTS '(' simpleExpr ')' .

    RELOP   reduce using rule 78 (factor)
    ARTOP1  reduce using rule 78 (factor)
    ARTOP2  reduce using rule 78 (factor)
    IN      reduce using rule 78 (factor)
    DISJ    reduce using rule 78 (factor)
    CONJ    reduce using rule 78 (factor)
    ','     reduce using rule 78 (factor)
    ')'     reduce using rule 78 (factor)


State 346

   83 call: var '(' params ')' .

    RELOP   reduce using rule 83 (call)
    ARTOP1  reduce using rule 83 (call)
    ARTOP2  reduce using rule 83 (call)
    IN      reduce using rule 83 (call)
    DISJ    reduce using rule 83 (call)
    CONJ    reduce using rule 83 (call)
    ','     reduce using rule 83 (call)
    ')'     reduce using rule 83 (call)


State 347

   13 funcDecl: TYPE ID $@1 arguments . $@2 '{' funcBody '}'

    '{'  reduce using rule 12 ($@2)

    $@2  go to state 354


State 348

   37 condStmt: IF cond prepareScope body .
   39         | IF cond prepareScope body . ELSE $@3 body

    ELSE  shift, and go to state 355

    error    reduce using rule 37 (condStmt)
    TYPE     reduce using rule 37 (condStmt)
    SETOP    reduce using rule 37 (condStmt)
    ID       reduce using rule 37 (condStmt)
    IF       reduce using rule 37 (condStmt)
    FOR      reduce using rule 37 (condStmt)
    RETURN   reduce using rule 37 (condStmt)
    FORALL   reduce using rule 37 (condStmt)
    IS_SET   reduce using rule 37 (condStmt)
    EXISTS   reduce using rule 37 (condStmt)
    NEG      reduce using rule 37 (condStmt)
    READ     reduce using rule 37 (condStmt)
    WRITE    reduce using rule 37 (condStmt)
    WRITELN  reduce using rule 37 (condStmt)
    INTEGER  reduce using rule 37 (condStmt)
    FLOAT    reduce using rule 37 (condStmt)
    EMPTY    reduce using rule 37 (condStmt)
    ';'      reduce using rule 37 (condStmt)
    '}'      reduce using rule 37 (condStmt)
    '('      reduce using rule 37 (condStmt)


State 349

   32 iterStmt: FOR '(' error ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 356


State 350

   28 iterStmt: FOR '(' exprStmt exprStmt . ')' prepareScope body
   29         | FOR '(' exprStmt exprStmt . expression ')' prepareScope body

    SETOP    shift, and go to state 164
    ID       shift, and go to state 183
    IS_SET   shift, and go to state 166
    EXISTS   shift, and go to state 167
    NEG      shift, and go to state 168
    READ     shift, and go to state 184
    WRITE    shift, and go to state 185
    WRITELN  shift, and go to state 186
    INTEGER  shift, and go to state 169
    FLOAT    shift, and go to state 170
    EMPTY    shift, and go to state 171
    '('      shift, and go to state 172
    ')'      shift, and go to state 357

    expression  go to state 358
    assign      go to state 187
    var         go to state 188
    inExpr      go to state 189
    outExpr     go to state 190
    simpleExpr  go to state 191
    negExpr     go to state 174
    disjExpr    go to state 175
    conjExpr    go to state 176
    relExpr     go to state 177
    artExpr1    go to state 178
    artExpr2    go to state 179
    factor      go to state 180
    constant    go to state 181
    call        go to state 182


State 351

   31 iterStmt: FORALL '(' error ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 359


State 352

   30 iterStmt: FORALL '(' simpleExpr ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 360


State 353

   13 funcDecl: TYPE ID $@1 arguments $@2 . '{' funcBody '}'

    '{'  shift, and go to state 361


State 354

   13 funcDecl: TYPE ID $@1 arguments $@2 . '{' funcBody '}'

    '{'  shift, and go to state 362


State 355

   39 condStmt: IF cond prepareScope body ELSE . $@3 body

    error    reduce using rule 38 ($@3)
    TYPE     reduce using rule 38 ($@3)
    SETOP    reduce using rule 38 ($@3)
    ID       reduce using rule 38 ($@3)
    IF       reduce using rule 38 ($@3)
    FOR      reduce using rule 38 ($@3)
    RETURN   reduce using rule 38 ($@3)
    FORALL   reduce using rule 38 ($@3)
    IS_SET   reduce using rule 38 ($@3)
    EXISTS   reduce using rule 38 ($@3)
    NEG      reduce using rule 38 ($@3)
    READ     reduce using rule 38 ($@3)
    WRITE    reduce using rule 38 ($@3)
    WRITELN  reduce using rule 38 ($@3)
    INTEGER  reduce using rule 38 ($@3)
    FLOAT    reduce using rule 38 ($@3)
    EMPTY    reduce using rule 38 ($@3)
    ';'      reduce using rule 38 ($@3)
    '{'      reduce using rule 38 ($@3)
    '('      reduce using rule 38 ($@3)

    $@3  go to state 363


State 356

   32 iterStmt: FOR '(' error ')' prepareScope . body

    error    shift, and go to state 225
    TYPE     shift, and go to state 226
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 227
    FOR      shift, and go to state 228
    RETURN   shift, and go to state 229
    FORALL   shift, and go to state 230
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 231
    '{'      shift, and go to state 127
    '('      shift, and go to state 50

    varDecl     go to state 128
    funcDecl    go to state 129
    stmt        go to state 130
    iterStmt    go to state 232
    body        go to state 364
    condStmt    go to state 233
    returnStmt  go to state 234
    exprStmt    go to state 235
    expression  go to state 236
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 357

   28 iterStmt: FOR '(' exprStmt exprStmt ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 365


State 358

   29 iterStmt: FOR '(' exprStmt exprStmt expression . ')' prepareScope body

    ')'  shift, and go to state 366


State 359

   31 iterStmt: FORALL '(' error ')' prepareScope . body

    error    shift, and go to state 225
    TYPE     shift, and go to state 226
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 227
    FOR      shift, and go to state 228
    RETURN   shift, and go to state 229
    FORALL   shift, and go to state 230
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 231
    '{'      shift, and go to state 127
    '('      shift, and go to state 50

    varDecl     go to state 128
    funcDecl    go to state 129
    stmt        go to state 130
    iterStmt    go to state 232
    body        go to state 367
    condStmt    go to state 233
    returnStmt  go to state 234
    exprStmt    go to state 235
    expression  go to state 236
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 360

   30 iterStmt: FORALL '(' simpleExpr ')' prepareScope . body

    error    shift, and go to state 225
    TYPE     shift, and go to state 226
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 227
    FOR      shift, and go to state 228
    RETURN   shift, and go to state 229
    FORALL   shift, and go to state 230
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 231
    '{'      shift, and go to state 127
    '('      shift, and go to state 50

    varDecl     go to state 128
    funcDecl    go to state 129
    stmt        go to state 130
    iterStmt    go to state 232
    body        go to state 368
    condStmt    go to state 233
    returnStmt  go to state 234
    exprStmt    go to state 235
    expression  go to state 236
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 361

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' . funcBody '}'

    error    reduce using rule 20 (funcBody)
    TYPE     reduce using rule 20 (funcBody)
    SETOP    reduce using rule 20 (funcBody)
    ID       reduce using rule 20 (funcBody)
    IF       reduce using rule 20 (funcBody)
    FOR      reduce using rule 20 (funcBody)
    RETURN   reduce using rule 20 (funcBody)
    FORALL   reduce using rule 20 (funcBody)
    IS_SET   reduce using rule 20 (funcBody)
    EXISTS   reduce using rule 20 (funcBody)
    NEG      reduce using rule 20 (funcBody)
    READ     reduce using rule 20 (funcBody)
    WRITE    reduce using rule 20 (funcBody)
    WRITELN  reduce using rule 20 (funcBody)
    INTEGER  reduce using rule 20 (funcBody)
    FLOAT    reduce using rule 20 (funcBody)
    EMPTY    reduce using rule 20 (funcBody)
    ';'      reduce using rule 20 (funcBody)
    '}'      reduce using rule 20 (funcBody)
    '('      reduce using rule 20 (funcBody)

    funcBody  go to state 369


State 362

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' . funcBody '}'

    error    reduce using rule 20 (funcBody)
    TYPE     reduce using rule 20 (funcBody)
    SETOP    reduce using rule 20 (funcBody)
    ID       reduce using rule 20 (funcBody)
    IF       reduce using rule 20 (funcBody)
    FOR      reduce using rule 20 (funcBody)
    RETURN   reduce using rule 20 (funcBody)
    FORALL   reduce using rule 20 (funcBody)
    IS_SET   reduce using rule 20 (funcBody)
    EXISTS   reduce using rule 20 (funcBody)
    NEG      reduce using rule 20 (funcBody)
    READ     reduce using rule 20 (funcBody)
    WRITE    reduce using rule 20 (funcBody)
    WRITELN  reduce using rule 20 (funcBody)
    INTEGER  reduce using rule 20 (funcBody)
    FLOAT    reduce using rule 20 (funcBody)
    EMPTY    reduce using rule 20 (funcBody)
    ';'      reduce using rule 20 (funcBody)
    '}'      reduce using rule 20 (funcBody)
    '('      reduce using rule 20 (funcBody)

    funcBody  go to state 370


State 363

   39 condStmt: IF cond prepareScope body ELSE $@3 . body

    error    shift, and go to state 225
    TYPE     shift, and go to state 226
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 227
    FOR      shift, and go to state 228
    RETURN   shift, and go to state 229
    FORALL   shift, and go to state 230
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 231
    '{'      shift, and go to state 127
    '('      shift, and go to state 50

    varDecl     go to state 128
    funcDecl    go to state 129
    stmt        go to state 130
    iterStmt    go to state 232
    body        go to state 371
    condStmt    go to state 233
    returnStmt  go to state 234
    exprStmt    go to state 235
    expression  go to state 236
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 364

   32 iterStmt: FOR '(' error ')' prepareScope body .

    error    reduce using rule 32 (iterStmt)
    TYPE     reduce using rule 32 (iterStmt)
    SETOP    reduce using rule 32 (iterStmt)
    ID       reduce using rule 32 (iterStmt)
    IF       reduce using rule 32 (iterStmt)
    ELSE     reduce using rule 32 (iterStmt)
    FOR      reduce using rule 32 (iterStmt)
    RETURN   reduce using rule 32 (iterStmt)
    FORALL   reduce using rule 32 (iterStmt)
    IS_SET   reduce using rule 32 (iterStmt)
    EXISTS   reduce using rule 32 (iterStmt)
    NEG      reduce using rule 32 (iterStmt)
    READ     reduce using rule 32 (iterStmt)
    WRITE    reduce using rule 32 (iterStmt)
    WRITELN  reduce using rule 32 (iterStmt)
    INTEGER  reduce using rule 32 (iterStmt)
    FLOAT    reduce using rule 32 (iterStmt)
    EMPTY    reduce using rule 32 (iterStmt)
    ';'      reduce using rule 32 (iterStmt)
    '}'      reduce using rule 32 (iterStmt)
    '('      reduce using rule 32 (iterStmt)


State 365

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope . body

    error    shift, and go to state 225
    TYPE     shift, and go to state 226
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 227
    FOR      shift, and go to state 228
    RETURN   shift, and go to state 229
    FORALL   shift, and go to state 230
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 231
    '{'      shift, and go to state 127
    '('      shift, and go to state 50

    varDecl     go to state 128
    funcDecl    go to state 129
    stmt        go to state 130
    iterStmt    go to state 232
    body        go to state 372
    condStmt    go to state 233
    returnStmt  go to state 234
    exprStmt    go to state 235
    expression  go to state 236
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 366

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 373


State 367

   31 iterStmt: FORALL '(' error ')' prepareScope body .

    error    reduce using rule 31 (iterStmt)
    TYPE     reduce using rule 31 (iterStmt)
    SETOP    reduce using rule 31 (iterStmt)
    ID       reduce using rule 31 (iterStmt)
    IF       reduce using rule 31 (iterStmt)
    ELSE     reduce using rule 31 (iterStmt)
    FOR      reduce using rule 31 (iterStmt)
    RETURN   reduce using rule 31 (iterStmt)
    FORALL   reduce using rule 31 (iterStmt)
    IS_SET   reduce using rule 31 (iterStmt)
    EXISTS   reduce using rule 31 (iterStmt)
    NEG      reduce using rule 31 (iterStmt)
    READ     reduce using rule 31 (iterStmt)
    WRITE    reduce using rule 31 (iterStmt)
    WRITELN  reduce using rule 31 (iterStmt)
    INTEGER  reduce using rule 31 (iterStmt)
    FLOAT    reduce using rule 31 (iterStmt)
    EMPTY    reduce using rule 31 (iterStmt)
    ';'      reduce using rule 31 (iterStmt)
    '}'      reduce using rule 31 (iterStmt)
    '('      reduce using rule 31 (iterStmt)


State 368

   30 iterStmt: FORALL '(' simpleExpr ')' prepareScope body .

    error    reduce using rule 30 (iterStmt)
    TYPE     reduce using rule 30 (iterStmt)
    SETOP    reduce using rule 30 (iterStmt)
    ID       reduce using rule 30 (iterStmt)
    IF       reduce using rule 30 (iterStmt)
    ELSE     reduce using rule 30 (iterStmt)
    FOR      reduce using rule 30 (iterStmt)
    RETURN   reduce using rule 30 (iterStmt)
    FORALL   reduce using rule 30 (iterStmt)
    IS_SET   reduce using rule 30 (iterStmt)
    EXISTS   reduce using rule 30 (iterStmt)
    NEG      reduce using rule 30 (iterStmt)
    READ     reduce using rule 30 (iterStmt)
    WRITE    reduce using rule 30 (iterStmt)
    WRITELN  reduce using rule 30 (iterStmt)
    INTEGER  reduce using rule 30 (iterStmt)
    FLOAT    reduce using rule 30 (iterStmt)
    EMPTY    reduce using rule 30 (iterStmt)
    ';'      reduce using rule 30 (iterStmt)
    '}'      reduce using rule 30 (iterStmt)
    '('      reduce using rule 30 (iterStmt)


State 369

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody . '}'
   21 funcBody: funcBody . varDecl
   22         | funcBody . funcDecl
   23         | funcBody . stmt

    error    shift, and go to state 32
    TYPE     shift, and go to state 162
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 35
    FOR      shift, and go to state 36
    RETURN   shift, and go to state 37
    FORALL   shift, and go to state 38
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 48
    '}'      shift, and go to state 374
    '('      shift, and go to state 50

    varDecl     go to state 51
    funcDecl    go to state 52
    stmt        go to state 53
    iterStmt    go to state 54
    condStmt    go to state 55
    returnStmt  go to state 56
    exprStmt    go to state 57
    expression  go to state 58
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 370

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody . '}'
   21 funcBody: funcBody . varDecl
   22         | funcBody . funcDecl
   23         | funcBody . stmt

    error    shift, and go to state 32
    TYPE     shift, and go to state 162
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 35
    FOR      shift, and go to state 36
    RETURN   shift, and go to state 37
    FORALL   shift, and go to state 38
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 48
    '}'      shift, and go to state 375
    '('      shift, and go to state 50

    varDecl     go to state 51
    funcDecl    go to state 52
    stmt        go to state 53
    iterStmt    go to state 54
    condStmt    go to state 55
    returnStmt  go to state 56
    exprStmt    go to state 57
    expression  go to state 58
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 371

   39 condStmt: IF cond prepareScope body ELSE $@3 body .

    error    reduce using rule 39 (condStmt)
    TYPE     reduce using rule 39 (condStmt)
    SETOP    reduce using rule 39 (condStmt)
    ID       reduce using rule 39 (condStmt)
    IF       reduce using rule 39 (condStmt)
    ELSE     reduce using rule 39 (condStmt)
    FOR      reduce using rule 39 (condStmt)
    RETURN   reduce using rule 39 (condStmt)
    FORALL   reduce using rule 39 (condStmt)
    IS_SET   reduce using rule 39 (condStmt)
    EXISTS   reduce using rule 39 (condStmt)
    NEG      reduce using rule 39 (condStmt)
    READ     reduce using rule 39 (condStmt)
    WRITE    reduce using rule 39 (condStmt)
    WRITELN  reduce using rule 39 (condStmt)
    INTEGER  reduce using rule 39 (condStmt)
    FLOAT    reduce using rule 39 (condStmt)
    EMPTY    reduce using rule 39 (condStmt)
    ';'      reduce using rule 39 (condStmt)
    '}'      reduce using rule 39 (condStmt)
    '('      reduce using rule 39 (condStmt)


State 372

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope body .

    error    reduce using rule 28 (iterStmt)
    TYPE     reduce using rule 28 (iterStmt)
    SETOP    reduce using rule 28 (iterStmt)
    ID       reduce using rule 28 (iterStmt)
    IF       reduce using rule 28 (iterStmt)
    ELSE     reduce using rule 28 (iterStmt)
    FOR      reduce using rule 28 (iterStmt)
    RETURN   reduce using rule 28 (iterStmt)
    FORALL   reduce using rule 28 (iterStmt)
    IS_SET   reduce using rule 28 (iterStmt)
    EXISTS   reduce using rule 28 (iterStmt)
    NEG      reduce using rule 28 (iterStmt)
    READ     reduce using rule 28 (iterStmt)
    WRITE    reduce using rule 28 (iterStmt)
    WRITELN  reduce using rule 28 (iterStmt)
    INTEGER  reduce using rule 28 (iterStmt)
    FLOAT    reduce using rule 28 (iterStmt)
    EMPTY    reduce using rule 28 (iterStmt)
    ';'      reduce using rule 28 (iterStmt)
    '}'      reduce using rule 28 (iterStmt)
    '('      reduce using rule 28 (iterStmt)


State 373

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' prepareScope . body

    error    shift, and go to state 225
    TYPE     shift, and go to state 226
    SETOP    shift, and go to state 33
    ID       shift, and go to state 34
    IF       shift, and go to state 227
    FOR      shift, and go to state 228
    RETURN   shift, and go to state 229
    FORALL   shift, and go to state 230
    IS_SET   shift, and go to state 39
    EXISTS   shift, and go to state 40
    NEG      shift, and go to state 41
    READ     shift, and go to state 42
    WRITE    shift, and go to state 43
    WRITELN  shift, and go to state 44
    INTEGER  shift, and go to state 45
    FLOAT    shift, and go to state 46
    EMPTY    shift, and go to state 47
    ';'      shift, and go to state 231
    '{'      shift, and go to state 127
    '('      shift, and go to state 50

    varDecl     go to state 128
    funcDecl    go to state 129
    stmt        go to state 130
    iterStmt    go to state 232
    body        go to state 376
    condStmt    go to state 233
    returnStmt  go to state 234
    exprStmt    go to state 235
    expression  go to state 236
    assign      go to state 59
    var         go to state 60
    inExpr      go to state 61
    outExpr     go to state 62
    simpleExpr  go to state 63
    negExpr     go to state 64
    disjExpr    go to state 65
    conjExpr    go to state 66
    relExpr     go to state 67
    artExpr1    go to state 68
    artExpr2    go to state 69
    factor      go to state 70
    constant    go to state 71
    call        go to state 72


State 374

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody '}' .

    error    reduce using rule 13 (funcDecl)
    TYPE     reduce using rule 13 (funcDecl)
    SETOP    reduce using rule 13 (funcDecl)
    ID       reduce using rule 13 (funcDecl)
    IF       reduce using rule 13 (funcDecl)
    FOR      reduce using rule 13 (funcDecl)
    RETURN   reduce using rule 13 (funcDecl)
    FORALL   reduce using rule 13 (funcDecl)
    IS_SET   reduce using rule 13 (funcDecl)
    EXISTS   reduce using rule 13 (funcDecl)
    NEG      reduce using rule 13 (funcDecl)
    READ     reduce using rule 13 (funcDecl)
    WRITE    reduce using rule 13 (funcDecl)
    WRITELN  reduce using rule 13 (funcDecl)
    INTEGER  reduce using rule 13 (funcDecl)
    FLOAT    reduce using rule 13 (funcDecl)
    EMPTY    reduce using rule 13 (funcDecl)
    ';'      reduce using rule 13 (funcDecl)
    '}'      reduce using rule 13 (funcDecl)
    '('      reduce using rule 13 (funcDecl)


State 375

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody '}' .

    error    reduce using rule 13 (funcDecl)
    TYPE     reduce using rule 13 (funcDecl)
    SETOP    reduce using rule 13 (funcDecl)
    ID       reduce using rule 13 (funcDecl)
    IF       reduce using rule 13 (funcDecl)
    ELSE     reduce using rule 13 (funcDecl)
    FOR      reduce using rule 13 (funcDecl)
    RETURN   reduce using rule 13 (funcDecl)
    FORALL   reduce using rule 13 (funcDecl)
    IS_SET   reduce using rule 13 (funcDecl)
    EXISTS   reduce using rule 13 (funcDecl)
    NEG      reduce using rule 13 (funcDecl)
    READ     reduce using rule 13 (funcDecl)
    WRITE    reduce using rule 13 (funcDecl)
    WRITELN  reduce using rule 13 (funcDecl)
    INTEGER  reduce using rule 13 (funcDecl)
    FLOAT    reduce using rule 13 (funcDecl)
    EMPTY    reduce using rule 13 (funcDecl)
    ';'      reduce using rule 13 (funcDecl)
    '}'      reduce using rule 13 (funcDecl)
    '('      reduce using rule 13 (funcDecl)


State 376

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' prepareScope body .

    error    reduce using rule 29 (iterStmt)
    TYPE     reduce using rule 29 (iterStmt)
    SETOP    reduce using rule 29 (iterStmt)
    ID       reduce using rule 29 (iterStmt)
    IF       reduce using rule 29 (iterStmt)
    ELSE     reduce using rule 29 (iterStmt)
    FOR      reduce using rule 29 (iterStmt)
    RETURN   reduce using rule 29 (iterStmt)
    FORALL   reduce using rule 29 (iterStmt)
    IS_SET   reduce using rule 29 (iterStmt)
    EXISTS   reduce using rule 29 (iterStmt)
    NEG      reduce using rule 29 (iterStmt)
    READ     reduce using rule 29 (iterStmt)
    WRITE    reduce using rule 29 (iterStmt)
    WRITELN  reduce using rule 29 (iterStmt)
    INTEGER  reduce using rule 29 (iterStmt)
    FLOAT    reduce using rule 29 (iterStmt)
    EMPTY    reduce using rule 29 (iterStmt)
    ';'      reduce using rule 29 (iterStmt)
    '}'      reduce using rule 29 (iterStmt)
    '('      reduce using rule 29 (iterStmt)
