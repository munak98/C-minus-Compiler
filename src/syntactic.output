Grammar

    0 $accept: begin $end

    1 begin: program

    2 program: program declaration
    3        | %empty

    4 declaration: varDecl
    5            | funcDecl

    6 varDecl: TYPE varList ';'
    7        | TYPE error

    8 varList: varList ',' new_id
    9        | new_id

   10 new_id: ID

   11 $@1: %empty

   12 $@2: %empty

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody '}'

   14 arguments: '(' ')'
   15          | '(' argsList ')'
   16          | '(' error ')'

   17 argsList: argsList ',' arg
   18         | arg

   19 arg: TYPE ID

   20 funcBody: %empty
   21         | funcBody varDecl
   22         | funcBody funcDecl
   23         | funcBody stmt

   24 stmt: exprStmt
   25     | returnStmt
   26     | iterStmt
   27     | condStmt

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope body
   29         | FOR '(' exprStmt exprStmt expression ')' prepareScope body
   30         | FORALL '(' simpleExpr ')' prepareScope body
   31         | FORALL '(' error ')' prepareScope body
   32         | FOR '(' error ')' prepareScope body

   33 body: '{' funcBody '}'
   34     | stmt
   35     | varDecl
   36     | funcDecl

   37 condStmt: IF cond prepareScope body

   38 $@3: %empty

   39 condStmt: IF cond prepareScope body ELSE $@3 prepareScope body

   40 prepareScope: %empty

   41 cond: '(' expression ')'
   42     | '(' error ')'

   43 returnStmt: RETURN exprStmt

   44 exprStmt: expression ';'
   45         | error
   46         | ';'

   47 expression: assign
   48           | inExpr
   49           | outExpr
   50           | simpleExpr

   51 assign: var '=' simpleExpr

   52 var: ID

   53 inExpr: READ '(' var ')'

   54 outExpr: WRITE '(' output ')'
   55        | WRITELN '(' output ')'

   56 output: var
   57       | CHAR
   58       | STRING

   59 simpleExpr: simpleExpr IN conjExpr
   60           | conjExpr

   61 conjExpr: conjExpr CONJ disjExpr
   62         | disjExpr

   63 disjExpr: disjExpr DISJ negExpr
   64         | negExpr

   65 negExpr: NEG negExpr
   66        | compExpr

   67 compExpr: compExpr COMP relExpr
   68         | relExpr

   69 relExpr: relExpr RELOP artExpr1
   70        | artExpr1

   71 artExpr1: artExpr1 ARTOP1 artExpr2
   72         | artExpr2

   73 artExpr2: artExpr2 ARTOP2 minusFactor
   74         | minusFactor

   75 minusFactor: ARTOP1 factor
   76            | factor

   77 factor: ID
   78       | '(' simpleExpr ')'
   79       | constant
   80       | call
   81       | IS_SET '(' factor ')'
   82       | EXISTS '(' simpleExpr ')'
   83       | SETOP '(' simpleExpr ')'

   84 constant: INTEGER
   85         | FLOAT
   86         | EMPTY

   87 $@4: %empty

   88 call: var $@4 '(' params ')'

   89 params: %empty
   90       | paramList

   91 paramList: paramList ',' simpleExpr
   92          | simpleExpr


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 14 15 16 28 29 30 31 32 41 42 53 54 55 78 81 82 83 88
    ')' (41) 14 15 16 28 29 30 31 32 41 42 53 54 55 78 81 82 83 88
    ',' (44) 8 17 91
    ';' (59) 6 44 46
    '=' (61) 51
    '{' (123) 13 33
    '}' (125) 13 33
    error (256) 7 16 31 32 42 45
    TYPE <ival> (258) 6 7 13 19
    RELOP <ival> (259) 69
    COMP <ival> (260) 67
    SETOP <ival> (261) 83
    ARTOP1 <ival> (262) 71 75
    ARTOP2 <ival> (263) 73
    ID <sval> (264) 10 13 19 52 77
    IF (265) 37 39
    ELSE (266) 39
    FOR (267) 28 29 32
    RETURN (268) 43
    FORALL (269) 30 31
    IN (270) 59
    IS_SET (271) 81
    EXISTS (272) 82
    DISJ (273) 63
    CONJ (274) 61
    NEG (275) 65
    READ (276) 53
    WRITE (277) 54
    WRITELN (278) 55
    INTEGER <ival> (279) 84
    FLOAT <fval> (280) 85
    CHAR <cval> (281) 57
    STRING <sval> (282) 58
    EMPTY (283) 86
    THEN (284)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    begin (38)
        on left: 1
        on right: 0
    program <tnode> (39)
        on left: 2 3
        on right: 1 2
    declaration <tnode> (40)
        on left: 4 5
        on right: 2
    varDecl <tnode> (41)
        on left: 6 7
        on right: 4 21 35
    varList <tnode> (42)
        on left: 8 9
        on right: 6 8
    new_id <tnode> (43)
        on left: 10
        on right: 8 9
    funcDecl <tnode> (44)
        on left: 13
        on right: 5 22 36
    $@1 (45)
        on left: 11
        on right: 13
    $@2 (46)
        on left: 12
        on right: 13
    arguments <tnode> (47)
        on left: 14 15 16
        on right: 13
    argsList <tnode> (48)
        on left: 17 18
        on right: 15 17
    arg <tnode> (49)
        on left: 19
        on right: 17 18
    funcBody <tnode> (50)
        on left: 20 21 22 23
        on right: 13 21 22 23 33
    stmt <tnode> (51)
        on left: 24 25 26 27
        on right: 23 34
    iterStmt <tnode> (52)
        on left: 28 29 30 31 32
        on right: 26
    body <tnode> (53)
        on left: 33 34 35 36
        on right: 28 29 30 31 32 37 39
    condStmt <tnode> (54)
        on left: 37 39
        on right: 27
    $@3 (55)
        on left: 38
        on right: 39
    prepareScope (56)
        on left: 40
        on right: 28 29 30 31 32 37 39
    cond <tnode> (57)
        on left: 41 42
        on right: 37 39
    returnStmt <tnode> (58)
        on left: 43
        on right: 25
    exprStmt <tnode> (59)
        on left: 44 45 46
        on right: 24 28 29 43
    expression <tnode> (60)
        on left: 47 48 49 50
        on right: 29 41 44
    assign <tnode> (61)
        on left: 51
        on right: 47
    var <tnode> (62)
        on left: 52
        on right: 51 53 56 88
    inExpr <tnode> (63)
        on left: 53
        on right: 48
    outExpr <tnode> (64)
        on left: 54 55
        on right: 49
    output <tnode> (65)
        on left: 56 57 58
        on right: 54 55
    simpleExpr <tnode> (66)
        on left: 59 60
        on right: 30 50 51 59 78 82 83 91 92
    conjExpr <tnode> (67)
        on left: 61 62
        on right: 59 60 61
    disjExpr <tnode> (68)
        on left: 63 64
        on right: 61 62 63
    negExpr <tnode> (69)
        on left: 65 66
        on right: 63 64 65
    compExpr <tnode> (70)
        on left: 67 68
        on right: 66 67
    relExpr <tnode> (71)
        on left: 69 70
        on right: 67 68 69
    artExpr1 <tnode> (72)
        on left: 71 72
        on right: 69 70 71
    artExpr2 <tnode> (73)
        on left: 73 74
        on right: 71 72 73
    minusFactor <tnode> (74)
        on left: 75 76
        on right: 73 74
    factor <tnode> (75)
        on left: 77 78 79 80 81 82 83
        on right: 75 76 81
    constant <tnode> (76)
        on left: 84 85 86
        on right: 79
    call <tnode> (77)
        on left: 88
        on right: 80
    $@4 (78)
        on left: 87
        on right: 88
    params <tnode> (79)
        on left: 89 90
        on right: 88
    paramList <tnode> (80)
        on left: 91 92
        on right: 90 91


State 0

    0 $accept: . begin $end

    $end  reduce using rule 3 (program)
    TYPE  reduce using rule 3 (program)

    begin    go to state 1
    program  go to state 2


State 1

    0 $accept: begin . $end

    $end  shift, and go to state 3


State 2

    1 begin: program .
    2 program: program . declaration

    TYPE  shift, and go to state 4

    $end  reduce using rule 1 (begin)

    declaration  go to state 5
    varDecl      go to state 6
    funcDecl     go to state 7


State 3

    0 $accept: begin $end .

    $default  accept


State 4

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error
   13 funcDecl: TYPE . ID $@1 arguments $@2 '{' funcBody '}'

    error  shift, and go to state 8
    ID     shift, and go to state 9

    varList  go to state 10
    new_id   go to state 11


State 5

    2 program: program declaration .

    $end  reduce using rule 2 (program)
    TYPE  reduce using rule 2 (program)


State 6

    4 declaration: varDecl .

    $end  reduce using rule 4 (declaration)
    TYPE  reduce using rule 4 (declaration)


State 7

    5 declaration: funcDecl .

    $end  reduce using rule 5 (declaration)
    TYPE  reduce using rule 5 (declaration)


State 8

    7 varDecl: TYPE error .

    $end  reduce using rule 7 (varDecl)
    TYPE  reduce using rule 7 (varDecl)


State 9

   10 new_id: ID .
   13 funcDecl: TYPE ID . $@1 arguments $@2 '{' funcBody '}'

    ';'  reduce using rule 10 (new_id)
    ','  reduce using rule 10 (new_id)
    '('  reduce using rule 11 ($@1)

    $@1  go to state 12


State 10

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 13
    ','  shift, and go to state 14


State 11

    9 varList: new_id .

    ';'  reduce using rule 9 (varList)
    ','  reduce using rule 9 (varList)


State 12

   13 funcDecl: TYPE ID $@1 . arguments $@2 '{' funcBody '}'

    '('  shift, and go to state 15

    arguments  go to state 16


State 13

    6 varDecl: TYPE varList ';' .

    $end  reduce using rule 6 (varDecl)
    TYPE  reduce using rule 6 (varDecl)


State 14

    8 varList: varList ',' . new_id

    ID  shift, and go to state 17

    new_id  go to state 18


State 15

   14 arguments: '(' . ')'
   15          | '(' . argsList ')'
   16          | '(' . error ')'

    error  shift, and go to state 19
    TYPE   shift, and go to state 20
    ')'    shift, and go to state 21

    argsList  go to state 22
    arg       go to state 23


State 16

   13 funcDecl: TYPE ID $@1 arguments . $@2 '{' funcBody '}'

    '{'  reduce using rule 12 ($@2)

    $@2  go to state 24


State 17

   10 new_id: ID .

    ';'  reduce using rule 10 (new_id)
    ','  reduce using rule 10 (new_id)


State 18

    8 varList: varList ',' new_id .

    ';'  reduce using rule 8 (varList)
    ','  reduce using rule 8 (varList)


State 19

   16 arguments: '(' error . ')'

    ')'  shift, and go to state 25


State 20

   19 arg: TYPE . ID

    ID  shift, and go to state 26


State 21

   14 arguments: '(' ')' .

    '{'  reduce using rule 14 (arguments)


State 22

   15 arguments: '(' argsList . ')'
   17 argsList: argsList . ',' arg

    ','  shift, and go to state 27
    ')'  shift, and go to state 28


State 23

   18 argsList: arg .

    ','  reduce using rule 18 (argsList)
    ')'  reduce using rule 18 (argsList)


State 24

   13 funcDecl: TYPE ID $@1 arguments $@2 . '{' funcBody '}'

    '{'  shift, and go to state 29


State 25

   16 arguments: '(' error ')' .

    '{'  reduce using rule 16 (arguments)


State 26

   19 arg: TYPE ID .

    ','  reduce using rule 19 (arg)
    ')'  reduce using rule 19 (arg)


State 27

   17 argsList: argsList ',' . arg

    TYPE  shift, and go to state 20

    arg  go to state 30


State 28

   15 arguments: '(' argsList ')' .

    '{'  reduce using rule 15 (arguments)


State 29

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' . funcBody '}'

    error    reduce using rule 20 (funcBody)
    TYPE     reduce using rule 20 (funcBody)
    SETOP    reduce using rule 20 (funcBody)
    ARTOP1   reduce using rule 20 (funcBody)
    ID       reduce using rule 20 (funcBody)
    IF       reduce using rule 20 (funcBody)
    FOR      reduce using rule 20 (funcBody)
    RETURN   reduce using rule 20 (funcBody)
    FORALL   reduce using rule 20 (funcBody)
    IS_SET   reduce using rule 20 (funcBody)
    EXISTS   reduce using rule 20 (funcBody)
    NEG      reduce using rule 20 (funcBody)
    READ     reduce using rule 20 (funcBody)
    WRITE    reduce using rule 20 (funcBody)
    WRITELN  reduce using rule 20 (funcBody)
    INTEGER  reduce using rule 20 (funcBody)
    FLOAT    reduce using rule 20 (funcBody)
    EMPTY    reduce using rule 20 (funcBody)
    ';'      reduce using rule 20 (funcBody)
    '}'      reduce using rule 20 (funcBody)
    '('      reduce using rule 20 (funcBody)

    funcBody  go to state 31


State 30

   17 argsList: argsList ',' arg .

    ','  reduce using rule 17 (argsList)
    ')'  reduce using rule 17 (argsList)


State 31

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody . '}'
   21 funcBody: funcBody . varDecl
   22         | funcBody . funcDecl
   23         | funcBody . stmt

    error    shift, and go to state 32
    TYPE     shift, and go to state 170
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    RETURN   shift, and go to state 38
    FORALL   shift, and go to state 39
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 49
    '}'      shift, and go to state 50
    '('      shift, and go to state 51

    varDecl      go to state 52
    funcDecl     go to state 53
    stmt         go to state 54
    iterStmt     go to state 55
    condStmt     go to state 56
    returnStmt   go to state 57
    exprStmt     go to state 58
    expression   go to state 59
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 32

   45 exprStmt: error .

    error    reduce using rule 45 (exprStmt)
    TYPE     reduce using rule 45 (exprStmt)
    SETOP    reduce using rule 45 (exprStmt)
    ARTOP1   reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IF       reduce using rule 45 (exprStmt)
    FOR      reduce using rule 45 (exprStmt)
    RETURN   reduce using rule 45 (exprStmt)
    FORALL   reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    ';'      reduce using rule 45 (exprStmt)
    '}'      reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)


State 33

   83 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 76


State 34

   75 minusFactor: ARTOP1 . factor

    SETOP    shift, and go to state 33
    ID       shift, and go to state 171
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    '('      shift, and go to state 51

    var       go to state 77
    factor    go to state 78
    constant  go to state 74
    call      go to state 75


State 35

   52 var: ID .
   77 factor: ID .

    RELOP   reduce using rule 77 (factor)
    COMP    reduce using rule 77 (factor)
    ARTOP1  reduce using rule 77 (factor)
    ARTOP2  reduce using rule 77 (factor)
    IN      reduce using rule 77 (factor)
    DISJ    reduce using rule 77 (factor)
    CONJ    reduce using rule 77 (factor)
    ';'     reduce using rule 77 (factor)
    '('     reduce using rule 52 (var)
    '='     reduce using rule 52 (var)


State 36

   37 condStmt: IF . cond prepareScope body
   39         | IF . cond prepareScope body ELSE $@3 prepareScope body

    '('  shift, and go to state 79

    cond  go to state 80


State 37

   28 iterStmt: FOR . '(' exprStmt exprStmt ')' prepareScope body
   29         | FOR . '(' exprStmt exprStmt expression ')' prepareScope body
   32         | FOR . '(' error ')' prepareScope body

    '('  shift, and go to state 81


State 38

   43 returnStmt: RETURN . exprStmt

    error    shift, and go to state 32
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 49
    '('      shift, and go to state 51

    exprStmt     go to state 82
    expression   go to state 59
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 39

   30 iterStmt: FORALL . '(' simpleExpr ')' prepareScope body
   31         | FORALL . '(' error ')' prepareScope body

    '('  shift, and go to state 83


State 40

   81 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 84


State 41

   82 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 85


State 42

   65 negExpr: NEG . negExpr

    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 171
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    '('      shift, and go to state 51

    var          go to state 77
    negExpr      go to state 86
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 43

   53 inExpr: READ . '(' var ')'

    '('  shift, and go to state 87


State 44

   54 outExpr: WRITE . '(' output ')'

    '('  shift, and go to state 88


State 45

   55 outExpr: WRITELN . '(' output ')'

    '('  shift, and go to state 89


State 46

   84 constant: INTEGER .

    RELOP   reduce using rule 84 (constant)
    COMP    reduce using rule 84 (constant)
    ARTOP1  reduce using rule 84 (constant)
    ARTOP2  reduce using rule 84 (constant)
    IN      reduce using rule 84 (constant)
    DISJ    reduce using rule 84 (constant)
    CONJ    reduce using rule 84 (constant)
    ';'     reduce using rule 84 (constant)


State 47

   85 constant: FLOAT .

    RELOP   reduce using rule 85 (constant)
    COMP    reduce using rule 85 (constant)
    ARTOP1  reduce using rule 85 (constant)
    ARTOP2  reduce using rule 85 (constant)
    IN      reduce using rule 85 (constant)
    DISJ    reduce using rule 85 (constant)
    CONJ    reduce using rule 85 (constant)
    ';'     reduce using rule 85 (constant)


State 48

   86 constant: EMPTY .

    RELOP   reduce using rule 86 (constant)
    COMP    reduce using rule 86 (constant)
    ARTOP1  reduce using rule 86 (constant)
    ARTOP2  reduce using rule 86 (constant)
    IN      reduce using rule 86 (constant)
    DISJ    reduce using rule 86 (constant)
    CONJ    reduce using rule 86 (constant)
    ';'     reduce using rule 86 (constant)


State 49

   46 exprStmt: ';' .

    error    reduce using rule 46 (exprStmt)
    TYPE     reduce using rule 46 (exprStmt)
    SETOP    reduce using rule 46 (exprStmt)
    ARTOP1   reduce using rule 46 (exprStmt)
    ID       reduce using rule 46 (exprStmt)
    IF       reduce using rule 46 (exprStmt)
    FOR      reduce using rule 46 (exprStmt)
    RETURN   reduce using rule 46 (exprStmt)
    FORALL   reduce using rule 46 (exprStmt)
    IS_SET   reduce using rule 46 (exprStmt)
    EXISTS   reduce using rule 46 (exprStmt)
    NEG      reduce using rule 46 (exprStmt)
    READ     reduce using rule 46 (exprStmt)
    WRITE    reduce using rule 46 (exprStmt)
    WRITELN  reduce using rule 46 (exprStmt)
    INTEGER  reduce using rule 46 (exprStmt)
    FLOAT    reduce using rule 46 (exprStmt)
    EMPTY    reduce using rule 46 (exprStmt)
    ';'      reduce using rule 46 (exprStmt)
    '}'      reduce using rule 46 (exprStmt)
    '('      reduce using rule 46 (exprStmt)


State 50

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody '}' .

    $end  reduce using rule 13 (funcDecl)
    TYPE  reduce using rule 13 (funcDecl)


State 51

   78 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 90
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 52

   21 funcBody: funcBody varDecl .

    error    reduce using rule 21 (funcBody)
    TYPE     reduce using rule 21 (funcBody)
    SETOP    reduce using rule 21 (funcBody)
    ARTOP1   reduce using rule 21 (funcBody)
    ID       reduce using rule 21 (funcBody)
    IF       reduce using rule 21 (funcBody)
    FOR      reduce using rule 21 (funcBody)
    RETURN   reduce using rule 21 (funcBody)
    FORALL   reduce using rule 21 (funcBody)
    IS_SET   reduce using rule 21 (funcBody)
    EXISTS   reduce using rule 21 (funcBody)
    NEG      reduce using rule 21 (funcBody)
    READ     reduce using rule 21 (funcBody)
    WRITE    reduce using rule 21 (funcBody)
    WRITELN  reduce using rule 21 (funcBody)
    INTEGER  reduce using rule 21 (funcBody)
    FLOAT    reduce using rule 21 (funcBody)
    EMPTY    reduce using rule 21 (funcBody)
    ';'      reduce using rule 21 (funcBody)
    '}'      reduce using rule 21 (funcBody)
    '('      reduce using rule 21 (funcBody)


State 53

   22 funcBody: funcBody funcDecl .

    error    reduce using rule 22 (funcBody)
    TYPE     reduce using rule 22 (funcBody)
    SETOP    reduce using rule 22 (funcBody)
    ARTOP1   reduce using rule 22 (funcBody)
    ID       reduce using rule 22 (funcBody)
    IF       reduce using rule 22 (funcBody)
    FOR      reduce using rule 22 (funcBody)
    RETURN   reduce using rule 22 (funcBody)
    FORALL   reduce using rule 22 (funcBody)
    IS_SET   reduce using rule 22 (funcBody)
    EXISTS   reduce using rule 22 (funcBody)
    NEG      reduce using rule 22 (funcBody)
    READ     reduce using rule 22 (funcBody)
    WRITE    reduce using rule 22 (funcBody)
    WRITELN  reduce using rule 22 (funcBody)
    INTEGER  reduce using rule 22 (funcBody)
    FLOAT    reduce using rule 22 (funcBody)
    EMPTY    reduce using rule 22 (funcBody)
    ';'      reduce using rule 22 (funcBody)
    '}'      reduce using rule 22 (funcBody)
    '('      reduce using rule 22 (funcBody)


State 54

   23 funcBody: funcBody stmt .

    error    reduce using rule 23 (funcBody)
    TYPE     reduce using rule 23 (funcBody)
    SETOP    reduce using rule 23 (funcBody)
    ARTOP1   reduce using rule 23 (funcBody)
    ID       reduce using rule 23 (funcBody)
    IF       reduce using rule 23 (funcBody)
    FOR      reduce using rule 23 (funcBody)
    RETURN   reduce using rule 23 (funcBody)
    FORALL   reduce using rule 23 (funcBody)
    IS_SET   reduce using rule 23 (funcBody)
    EXISTS   reduce using rule 23 (funcBody)
    NEG      reduce using rule 23 (funcBody)
    READ     reduce using rule 23 (funcBody)
    WRITE    reduce using rule 23 (funcBody)
    WRITELN  reduce using rule 23 (funcBody)
    INTEGER  reduce using rule 23 (funcBody)
    FLOAT    reduce using rule 23 (funcBody)
    EMPTY    reduce using rule 23 (funcBody)
    ';'      reduce using rule 23 (funcBody)
    '}'      reduce using rule 23 (funcBody)
    '('      reduce using rule 23 (funcBody)


State 55

   26 stmt: iterStmt .

    error    reduce using rule 26 (stmt)
    TYPE     reduce using rule 26 (stmt)
    SETOP    reduce using rule 26 (stmt)
    ARTOP1   reduce using rule 26 (stmt)
    ID       reduce using rule 26 (stmt)
    IF       reduce using rule 26 (stmt)
    FOR      reduce using rule 26 (stmt)
    RETURN   reduce using rule 26 (stmt)
    FORALL   reduce using rule 26 (stmt)
    IS_SET   reduce using rule 26 (stmt)
    EXISTS   reduce using rule 26 (stmt)
    NEG      reduce using rule 26 (stmt)
    READ     reduce using rule 26 (stmt)
    WRITE    reduce using rule 26 (stmt)
    WRITELN  reduce using rule 26 (stmt)
    INTEGER  reduce using rule 26 (stmt)
    FLOAT    reduce using rule 26 (stmt)
    EMPTY    reduce using rule 26 (stmt)
    ';'      reduce using rule 26 (stmt)
    '}'      reduce using rule 26 (stmt)
    '('      reduce using rule 26 (stmt)


State 56

   27 stmt: condStmt .

    error    reduce using rule 27 (stmt)
    TYPE     reduce using rule 27 (stmt)
    SETOP    reduce using rule 27 (stmt)
    ARTOP1   reduce using rule 27 (stmt)
    ID       reduce using rule 27 (stmt)
    IF       reduce using rule 27 (stmt)
    FOR      reduce using rule 27 (stmt)
    RETURN   reduce using rule 27 (stmt)
    FORALL   reduce using rule 27 (stmt)
    IS_SET   reduce using rule 27 (stmt)
    EXISTS   reduce using rule 27 (stmt)
    NEG      reduce using rule 27 (stmt)
    READ     reduce using rule 27 (stmt)
    WRITE    reduce using rule 27 (stmt)
    WRITELN  reduce using rule 27 (stmt)
    INTEGER  reduce using rule 27 (stmt)
    FLOAT    reduce using rule 27 (stmt)
    EMPTY    reduce using rule 27 (stmt)
    ';'      reduce using rule 27 (stmt)
    '}'      reduce using rule 27 (stmt)
    '('      reduce using rule 27 (stmt)


State 57

   25 stmt: returnStmt .

    error    reduce using rule 25 (stmt)
    TYPE     reduce using rule 25 (stmt)
    SETOP    reduce using rule 25 (stmt)
    ARTOP1   reduce using rule 25 (stmt)
    ID       reduce using rule 25 (stmt)
    IF       reduce using rule 25 (stmt)
    FOR      reduce using rule 25 (stmt)
    RETURN   reduce using rule 25 (stmt)
    FORALL   reduce using rule 25 (stmt)
    IS_SET   reduce using rule 25 (stmt)
    EXISTS   reduce using rule 25 (stmt)
    NEG      reduce using rule 25 (stmt)
    READ     reduce using rule 25 (stmt)
    WRITE    reduce using rule 25 (stmt)
    WRITELN  reduce using rule 25 (stmt)
    INTEGER  reduce using rule 25 (stmt)
    FLOAT    reduce using rule 25 (stmt)
    EMPTY    reduce using rule 25 (stmt)
    ';'      reduce using rule 25 (stmt)
    '}'      reduce using rule 25 (stmt)
    '('      reduce using rule 25 (stmt)


State 58

   24 stmt: exprStmt .

    error    reduce using rule 24 (stmt)
    TYPE     reduce using rule 24 (stmt)
    SETOP    reduce using rule 24 (stmt)
    ARTOP1   reduce using rule 24 (stmt)
    ID       reduce using rule 24 (stmt)
    IF       reduce using rule 24 (stmt)
    FOR      reduce using rule 24 (stmt)
    RETURN   reduce using rule 24 (stmt)
    FORALL   reduce using rule 24 (stmt)
    IS_SET   reduce using rule 24 (stmt)
    EXISTS   reduce using rule 24 (stmt)
    NEG      reduce using rule 24 (stmt)
    READ     reduce using rule 24 (stmt)
    WRITE    reduce using rule 24 (stmt)
    WRITELN  reduce using rule 24 (stmt)
    INTEGER  reduce using rule 24 (stmt)
    FLOAT    reduce using rule 24 (stmt)
    EMPTY    reduce using rule 24 (stmt)
    ';'      reduce using rule 24 (stmt)
    '}'      reduce using rule 24 (stmt)
    '('      reduce using rule 24 (stmt)


State 59

   44 exprStmt: expression . ';'

    ';'  shift, and go to state 91


State 60

   47 expression: assign .

    ';'  reduce using rule 47 (expression)


State 61

   51 assign: var . '=' simpleExpr
   88 call: var . $@4 '(' params ')'

    '='  shift, and go to state 92

    '('  reduce using rule 87 ($@4)

    $@4  go to state 93


State 62

   48 expression: inExpr .

    ';'  reduce using rule 48 (expression)


State 63

   49 expression: outExpr .

    ';'  reduce using rule 49 (expression)


State 64

   50 expression: simpleExpr .
   59 simpleExpr: simpleExpr . IN conjExpr

    IN  shift, and go to state 94

    ';'  reduce using rule 50 (expression)


State 65

   60 simpleExpr: conjExpr .
   61 conjExpr: conjExpr . CONJ disjExpr

    CONJ  shift, and go to state 95

    IN   reduce using rule 60 (simpleExpr)
    ';'  reduce using rule 60 (simpleExpr)


State 66

   62 conjExpr: disjExpr .
   63 disjExpr: disjExpr . DISJ negExpr

    DISJ  shift, and go to state 96

    IN    reduce using rule 62 (conjExpr)
    CONJ  reduce using rule 62 (conjExpr)
    ';'   reduce using rule 62 (conjExpr)


State 67

   64 disjExpr: negExpr .

    IN    reduce using rule 64 (disjExpr)
    DISJ  reduce using rule 64 (disjExpr)
    CONJ  reduce using rule 64 (disjExpr)
    ';'   reduce using rule 64 (disjExpr)


State 68

   66 negExpr: compExpr .
   67 compExpr: compExpr . COMP relExpr

    COMP  shift, and go to state 97

    IN    reduce using rule 66 (negExpr)
    DISJ  reduce using rule 66 (negExpr)
    CONJ  reduce using rule 66 (negExpr)
    ';'   reduce using rule 66 (negExpr)


State 69

   68 compExpr: relExpr .
   69 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 98

    COMP  reduce using rule 68 (compExpr)
    IN    reduce using rule 68 (compExpr)
    DISJ  reduce using rule 68 (compExpr)
    CONJ  reduce using rule 68 (compExpr)
    ';'   reduce using rule 68 (compExpr)


State 70

   70 relExpr: artExpr1 .
   71 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 99

    RELOP  reduce using rule 70 (relExpr)
    COMP   reduce using rule 70 (relExpr)
    IN     reduce using rule 70 (relExpr)
    DISJ   reduce using rule 70 (relExpr)
    CONJ   reduce using rule 70 (relExpr)
    ';'    reduce using rule 70 (relExpr)


State 71

   72 artExpr1: artExpr2 .
   73 artExpr2: artExpr2 . ARTOP2 minusFactor

    ARTOP2  shift, and go to state 100

    RELOP   reduce using rule 72 (artExpr1)
    COMP    reduce using rule 72 (artExpr1)
    ARTOP1  reduce using rule 72 (artExpr1)
    IN      reduce using rule 72 (artExpr1)
    DISJ    reduce using rule 72 (artExpr1)
    CONJ    reduce using rule 72 (artExpr1)
    ';'     reduce using rule 72 (artExpr1)


State 72

   74 artExpr2: minusFactor .

    RELOP   reduce using rule 74 (artExpr2)
    COMP    reduce using rule 74 (artExpr2)
    ARTOP1  reduce using rule 74 (artExpr2)
    ARTOP2  reduce using rule 74 (artExpr2)
    IN      reduce using rule 74 (artExpr2)
    DISJ    reduce using rule 74 (artExpr2)
    CONJ    reduce using rule 74 (artExpr2)
    ';'     reduce using rule 74 (artExpr2)


State 73

   76 minusFactor: factor .

    RELOP   reduce using rule 76 (minusFactor)
    COMP    reduce using rule 76 (minusFactor)
    ARTOP1  reduce using rule 76 (minusFactor)
    ARTOP2  reduce using rule 76 (minusFactor)
    IN      reduce using rule 76 (minusFactor)
    DISJ    reduce using rule 76 (minusFactor)
    CONJ    reduce using rule 76 (minusFactor)
    ';'     reduce using rule 76 (minusFactor)


State 74

   79 factor: constant .

    RELOP   reduce using rule 79 (factor)
    COMP    reduce using rule 79 (factor)
    ARTOP1  reduce using rule 79 (factor)
    ARTOP2  reduce using rule 79 (factor)
    IN      reduce using rule 79 (factor)
    DISJ    reduce using rule 79 (factor)
    CONJ    reduce using rule 79 (factor)
    ';'     reduce using rule 79 (factor)


State 75

   80 factor: call .

    RELOP   reduce using rule 80 (factor)
    COMP    reduce using rule 80 (factor)
    ARTOP1  reduce using rule 80 (factor)
    ARTOP2  reduce using rule 80 (factor)
    IN      reduce using rule 80 (factor)
    DISJ    reduce using rule 80 (factor)
    CONJ    reduce using rule 80 (factor)
    ';'     reduce using rule 80 (factor)


State 76

   83 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 101
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 77

   88 call: var . $@4 '(' params ')'

    '('  reduce using rule 87 ($@4)

    $@4  go to state 93


State 78

   75 minusFactor: ARTOP1 factor .

    RELOP   reduce using rule 75 (minusFactor)
    COMP    reduce using rule 75 (minusFactor)
    ARTOP1  reduce using rule 75 (minusFactor)
    ARTOP2  reduce using rule 75 (minusFactor)
    IN      reduce using rule 75 (minusFactor)
    DISJ    reduce using rule 75 (minusFactor)
    CONJ    reduce using rule 75 (minusFactor)
    ';'     reduce using rule 75 (minusFactor)


State 79

   41 cond: '(' . expression ')'
   42     | '(' . error ')'

    error    shift, and go to state 102
    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 194
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    READ     shift, and go to state 195
    WRITE    shift, and go to state 196
    WRITELN  shift, and go to state 197
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    expression   go to state 103
    assign       go to state 198
    var          go to state 199
    inExpr       go to state 200
    outExpr      go to state 201
    simpleExpr   go to state 202
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 80

   37 condStmt: IF cond . prepareScope body
   39         | IF cond . prepareScope body ELSE $@3 prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 104


State 81

   28 iterStmt: FOR '(' . exprStmt exprStmt ')' prepareScope body
   29         | FOR '(' . exprStmt exprStmt expression ')' prepareScope body
   32         | FOR '(' . error ')' prepareScope body

    error    shift, and go to state 105
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 203
    '('      shift, and go to state 51

    exprStmt     go to state 106
    expression   go to state 204
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 82

   43 returnStmt: RETURN exprStmt .

    error    reduce using rule 43 (returnStmt)
    TYPE     reduce using rule 43 (returnStmt)
    SETOP    reduce using rule 43 (returnStmt)
    ARTOP1   reduce using rule 43 (returnStmt)
    ID       reduce using rule 43 (returnStmt)
    IF       reduce using rule 43 (returnStmt)
    FOR      reduce using rule 43 (returnStmt)
    RETURN   reduce using rule 43 (returnStmt)
    FORALL   reduce using rule 43 (returnStmt)
    IS_SET   reduce using rule 43 (returnStmt)
    EXISTS   reduce using rule 43 (returnStmt)
    NEG      reduce using rule 43 (returnStmt)
    READ     reduce using rule 43 (returnStmt)
    WRITE    reduce using rule 43 (returnStmt)
    WRITELN  reduce using rule 43 (returnStmt)
    INTEGER  reduce using rule 43 (returnStmt)
    FLOAT    reduce using rule 43 (returnStmt)
    EMPTY    reduce using rule 43 (returnStmt)
    ';'      reduce using rule 43 (returnStmt)
    '}'      reduce using rule 43 (returnStmt)
    '('      reduce using rule 43 (returnStmt)


State 83

   30 iterStmt: FORALL '(' . simpleExpr ')' prepareScope body
   31         | FORALL '(' . error ')' prepareScope body

    error    shift, and go to state 107
    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 108
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 84

   81 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 205
    ID       shift, and go to state 206
    IS_SET   shift, and go to state 207
    EXISTS   shift, and go to state 208
    INTEGER  shift, and go to state 209
    FLOAT    shift, and go to state 210
    EMPTY    shift, and go to state 211
    '('      shift, and go to state 212

    var       go to state 213
    factor    go to state 109
    constant  go to state 214
    call      go to state 215


State 85

   82 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 110
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 86

   65 negExpr: NEG negExpr .

    IN    reduce using rule 65 (negExpr)
    DISJ  reduce using rule 65 (negExpr)
    CONJ  reduce using rule 65 (negExpr)
    ';'   reduce using rule 65 (negExpr)


State 87

   53 inExpr: READ '(' . var ')'

    ID  shift, and go to state 111

    var  go to state 112


State 88

   54 outExpr: WRITE '(' . output ')'

    ID      shift, and go to state 111
    CHAR    shift, and go to state 113
    STRING  shift, and go to state 114

    var     go to state 115
    output  go to state 116


State 89

   55 outExpr: WRITELN '(' . output ')'

    ID      shift, and go to state 111
    CHAR    shift, and go to state 113
    STRING  shift, and go to state 114

    var     go to state 115
    output  go to state 117


State 90

   59 simpleExpr: simpleExpr . IN conjExpr
   78 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 216
    ')'  shift, and go to state 118


State 91

   44 exprStmt: expression ';' .

    error    reduce using rule 44 (exprStmt)
    TYPE     reduce using rule 44 (exprStmt)
    SETOP    reduce using rule 44 (exprStmt)
    ARTOP1   reduce using rule 44 (exprStmt)
    ID       reduce using rule 44 (exprStmt)
    IF       reduce using rule 44 (exprStmt)
    FOR      reduce using rule 44 (exprStmt)
    RETURN   reduce using rule 44 (exprStmt)
    FORALL   reduce using rule 44 (exprStmt)
    IS_SET   reduce using rule 44 (exprStmt)
    EXISTS   reduce using rule 44 (exprStmt)
    NEG      reduce using rule 44 (exprStmt)
    READ     reduce using rule 44 (exprStmt)
    WRITE    reduce using rule 44 (exprStmt)
    WRITELN  reduce using rule 44 (exprStmt)
    INTEGER  reduce using rule 44 (exprStmt)
    FLOAT    reduce using rule 44 (exprStmt)
    EMPTY    reduce using rule 44 (exprStmt)
    ';'      reduce using rule 44 (exprStmt)
    '}'      reduce using rule 44 (exprStmt)
    '('      reduce using rule 44 (exprStmt)


State 92

   51 assign: var '=' . simpleExpr

    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 171
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    '('      shift, and go to state 51

    var          go to state 77
    simpleExpr   go to state 119
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 93

   88 call: var $@4 . '(' params ')'

    '('  shift, and go to state 120


State 94

   59 simpleExpr: simpleExpr IN . conjExpr

    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 171
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    '('      shift, and go to state 51

    var          go to state 77
    conjExpr     go to state 121
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 95

   61 conjExpr: conjExpr CONJ . disjExpr

    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 171
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    '('      shift, and go to state 51

    var          go to state 77
    disjExpr     go to state 122
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 96

   63 disjExpr: disjExpr DISJ . negExpr

    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 171
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    '('      shift, and go to state 51

    var          go to state 77
    negExpr      go to state 123
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 97

   67 compExpr: compExpr COMP . relExpr

    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 171
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    '('      shift, and go to state 51

    var          go to state 77
    relExpr      go to state 124
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 98

   69 relExpr: relExpr RELOP . artExpr1

    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 171
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    '('      shift, and go to state 51

    var          go to state 77
    artExpr1     go to state 125
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 99

   71 artExpr1: artExpr1 ARTOP1 . artExpr2

    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 171
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    '('      shift, and go to state 51

    var          go to state 77
    artExpr2     go to state 126
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 100

   73 artExpr2: artExpr2 ARTOP2 . minusFactor

    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 171
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    '('      shift, and go to state 51

    var          go to state 77
    minusFactor  go to state 127
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 101

   59 simpleExpr: simpleExpr . IN conjExpr
   83 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 216
    ')'  shift, and go to state 128


State 102

   42 cond: '(' error . ')'

    ')'  shift, and go to state 129


State 103

   41 cond: '(' expression . ')'

    ')'  shift, and go to state 130


State 104

   37 condStmt: IF cond prepareScope . body
   39         | IF cond prepareScope . body ELSE $@3 prepareScope body

    error    shift, and go to state 217
    TYPE     shift, and go to state 218
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 219
    FOR      shift, and go to state 220
    RETURN   shift, and go to state 221
    FORALL   shift, and go to state 222
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 223
    '{'      shift, and go to state 131
    '('      shift, and go to state 51

    varDecl      go to state 132
    funcDecl     go to state 133
    stmt         go to state 134
    iterStmt     go to state 224
    body         go to state 135
    condStmt     go to state 225
    returnStmt   go to state 226
    exprStmt     go to state 227
    expression   go to state 228
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 105

   32 iterStmt: FOR '(' error . ')' prepareScope body
   45 exprStmt: error .

    ')'  shift, and go to state 136

    error    reduce using rule 45 (exprStmt)
    SETOP    reduce using rule 45 (exprStmt)
    ARTOP1   reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    ';'      reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)


State 106

   28 iterStmt: FOR '(' exprStmt . exprStmt ')' prepareScope body
   29         | FOR '(' exprStmt . exprStmt expression ')' prepareScope body

    error    shift, and go to state 229
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 230
    '('      shift, and go to state 51

    exprStmt     go to state 137
    expression   go to state 231
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 107

   31 iterStmt: FORALL '(' error . ')' prepareScope body

    ')'  shift, and go to state 138


State 108

   30 iterStmt: FORALL '(' simpleExpr . ')' prepareScope body
   59 simpleExpr: simpleExpr . IN conjExpr

    IN   shift, and go to state 216
    ')'  shift, and go to state 139


State 109

   81 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 140


State 110

   59 simpleExpr: simpleExpr . IN conjExpr
   82 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 216
    ')'  shift, and go to state 141


State 111

   52 var: ID .

    ')'  reduce using rule 52 (var)


State 112

   53 inExpr: READ '(' var . ')'

    ')'  shift, and go to state 142


State 113

   57 output: CHAR .

    ')'  reduce using rule 57 (output)


State 114

   58 output: STRING .

    ')'  reduce using rule 58 (output)


State 115

   56 output: var .

    ')'  reduce using rule 56 (output)


State 116

   54 outExpr: WRITE '(' output . ')'

    ')'  shift, and go to state 143


State 117

   55 outExpr: WRITELN '(' output . ')'

    ')'  shift, and go to state 144


State 118

   78 factor: '(' simpleExpr ')' .

    RELOP   reduce using rule 78 (factor)
    COMP    reduce using rule 78 (factor)
    ARTOP1  reduce using rule 78 (factor)
    ARTOP2  reduce using rule 78 (factor)
    IN      reduce using rule 78 (factor)
    DISJ    reduce using rule 78 (factor)
    CONJ    reduce using rule 78 (factor)
    ';'     reduce using rule 78 (factor)


State 119

   51 assign: var '=' simpleExpr .
   59 simpleExpr: simpleExpr . IN conjExpr

    IN  shift, and go to state 94

    ';'  reduce using rule 51 (assign)


State 120

   88 call: var $@4 '(' . params ')'

    SETOP    shift, and go to state 232
    ARTOP1   shift, and go to state 233
    ID       shift, and go to state 234
    IS_SET   shift, and go to state 235
    EXISTS   shift, and go to state 236
    NEG      shift, and go to state 237
    INTEGER  shift, and go to state 238
    FLOAT    shift, and go to state 239
    EMPTY    shift, and go to state 240
    '('      shift, and go to state 241

    ')'  reduce using rule 89 (params)

    var          go to state 242
    simpleExpr   go to state 145
    conjExpr     go to state 243
    disjExpr     go to state 244
    negExpr      go to state 245
    compExpr     go to state 246
    relExpr      go to state 247
    artExpr1     go to state 248
    artExpr2     go to state 249
    minusFactor  go to state 250
    factor       go to state 251
    constant     go to state 252
    call         go to state 253
    params       go to state 146
    paramList    go to state 147


State 121

   59 simpleExpr: simpleExpr IN conjExpr .
   61 conjExpr: conjExpr . CONJ disjExpr

    CONJ  shift, and go to state 95

    IN   reduce using rule 59 (simpleExpr)
    ';'  reduce using rule 59 (simpleExpr)


State 122

   61 conjExpr: conjExpr CONJ disjExpr .
   63 disjExpr: disjExpr . DISJ negExpr

    DISJ  shift, and go to state 96

    IN    reduce using rule 61 (conjExpr)
    CONJ  reduce using rule 61 (conjExpr)
    ';'   reduce using rule 61 (conjExpr)


State 123

   63 disjExpr: disjExpr DISJ negExpr .

    IN    reduce using rule 63 (disjExpr)
    DISJ  reduce using rule 63 (disjExpr)
    CONJ  reduce using rule 63 (disjExpr)
    ';'   reduce using rule 63 (disjExpr)


State 124

   67 compExpr: compExpr COMP relExpr .
   69 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 98

    COMP  reduce using rule 67 (compExpr)
    IN    reduce using rule 67 (compExpr)
    DISJ  reduce using rule 67 (compExpr)
    CONJ  reduce using rule 67 (compExpr)
    ';'   reduce using rule 67 (compExpr)


State 125

   69 relExpr: relExpr RELOP artExpr1 .
   71 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 99

    RELOP  reduce using rule 69 (relExpr)
    COMP   reduce using rule 69 (relExpr)
    IN     reduce using rule 69 (relExpr)
    DISJ   reduce using rule 69 (relExpr)
    CONJ   reduce using rule 69 (relExpr)
    ';'    reduce using rule 69 (relExpr)


State 126

   71 artExpr1: artExpr1 ARTOP1 artExpr2 .
   73 artExpr2: artExpr2 . ARTOP2 minusFactor

    ARTOP2  shift, and go to state 100

    RELOP   reduce using rule 71 (artExpr1)
    COMP    reduce using rule 71 (artExpr1)
    ARTOP1  reduce using rule 71 (artExpr1)
    IN      reduce using rule 71 (artExpr1)
    DISJ    reduce using rule 71 (artExpr1)
    CONJ    reduce using rule 71 (artExpr1)
    ';'     reduce using rule 71 (artExpr1)


State 127

   73 artExpr2: artExpr2 ARTOP2 minusFactor .

    RELOP   reduce using rule 73 (artExpr2)
    COMP    reduce using rule 73 (artExpr2)
    ARTOP1  reduce using rule 73 (artExpr2)
    ARTOP2  reduce using rule 73 (artExpr2)
    IN      reduce using rule 73 (artExpr2)
    DISJ    reduce using rule 73 (artExpr2)
    CONJ    reduce using rule 73 (artExpr2)
    ';'     reduce using rule 73 (artExpr2)


State 128

   83 factor: SETOP '(' simpleExpr ')' .

    RELOP   reduce using rule 83 (factor)
    COMP    reduce using rule 83 (factor)
    ARTOP1  reduce using rule 83 (factor)
    ARTOP2  reduce using rule 83 (factor)
    IN      reduce using rule 83 (factor)
    DISJ    reduce using rule 83 (factor)
    CONJ    reduce using rule 83 (factor)
    ';'     reduce using rule 83 (factor)


State 129

   42 cond: '(' error ')' .

    error    reduce using rule 42 (cond)
    TYPE     reduce using rule 42 (cond)
    SETOP    reduce using rule 42 (cond)
    ARTOP1   reduce using rule 42 (cond)
    ID       reduce using rule 42 (cond)
    IF       reduce using rule 42 (cond)
    FOR      reduce using rule 42 (cond)
    RETURN   reduce using rule 42 (cond)
    FORALL   reduce using rule 42 (cond)
    IS_SET   reduce using rule 42 (cond)
    EXISTS   reduce using rule 42 (cond)
    NEG      reduce using rule 42 (cond)
    READ     reduce using rule 42 (cond)
    WRITE    reduce using rule 42 (cond)
    WRITELN  reduce using rule 42 (cond)
    INTEGER  reduce using rule 42 (cond)
    FLOAT    reduce using rule 42 (cond)
    EMPTY    reduce using rule 42 (cond)
    ';'      reduce using rule 42 (cond)
    '{'      reduce using rule 42 (cond)
    '('      reduce using rule 42 (cond)


State 130

   41 cond: '(' expression ')' .

    error    reduce using rule 41 (cond)
    TYPE     reduce using rule 41 (cond)
    SETOP    reduce using rule 41 (cond)
    ARTOP1   reduce using rule 41 (cond)
    ID       reduce using rule 41 (cond)
    IF       reduce using rule 41 (cond)
    FOR      reduce using rule 41 (cond)
    RETURN   reduce using rule 41 (cond)
    FORALL   reduce using rule 41 (cond)
    IS_SET   reduce using rule 41 (cond)
    EXISTS   reduce using rule 41 (cond)
    NEG      reduce using rule 41 (cond)
    READ     reduce using rule 41 (cond)
    WRITE    reduce using rule 41 (cond)
    WRITELN  reduce using rule 41 (cond)
    INTEGER  reduce using rule 41 (cond)
    FLOAT    reduce using rule 41 (cond)
    EMPTY    reduce using rule 41 (cond)
    ';'      reduce using rule 41 (cond)
    '{'      reduce using rule 41 (cond)
    '('      reduce using rule 41 (cond)


State 131

   33 body: '{' . funcBody '}'

    error    reduce using rule 20 (funcBody)
    TYPE     reduce using rule 20 (funcBody)
    SETOP    reduce using rule 20 (funcBody)
    ARTOP1   reduce using rule 20 (funcBody)
    ID       reduce using rule 20 (funcBody)
    IF       reduce using rule 20 (funcBody)
    FOR      reduce using rule 20 (funcBody)
    RETURN   reduce using rule 20 (funcBody)
    FORALL   reduce using rule 20 (funcBody)
    IS_SET   reduce using rule 20 (funcBody)
    EXISTS   reduce using rule 20 (funcBody)
    NEG      reduce using rule 20 (funcBody)
    READ     reduce using rule 20 (funcBody)
    WRITE    reduce using rule 20 (funcBody)
    WRITELN  reduce using rule 20 (funcBody)
    INTEGER  reduce using rule 20 (funcBody)
    FLOAT    reduce using rule 20 (funcBody)
    EMPTY    reduce using rule 20 (funcBody)
    ';'      reduce using rule 20 (funcBody)
    '}'      reduce using rule 20 (funcBody)
    '('      reduce using rule 20 (funcBody)

    funcBody  go to state 148


State 132

   35 body: varDecl .

    error    reduce using rule 35 (body)
    TYPE     reduce using rule 35 (body)
    SETOP    reduce using rule 35 (body)
    ARTOP1   reduce using rule 35 (body)
    ID       reduce using rule 35 (body)
    IF       reduce using rule 35 (body)
    ELSE     reduce using rule 35 (body)
    FOR      reduce using rule 35 (body)
    RETURN   reduce using rule 35 (body)
    FORALL   reduce using rule 35 (body)
    IS_SET   reduce using rule 35 (body)
    EXISTS   reduce using rule 35 (body)
    NEG      reduce using rule 35 (body)
    READ     reduce using rule 35 (body)
    WRITE    reduce using rule 35 (body)
    WRITELN  reduce using rule 35 (body)
    INTEGER  reduce using rule 35 (body)
    FLOAT    reduce using rule 35 (body)
    EMPTY    reduce using rule 35 (body)
    ';'      reduce using rule 35 (body)
    '}'      reduce using rule 35 (body)
    '('      reduce using rule 35 (body)


State 133

   36 body: funcDecl .

    error    reduce using rule 36 (body)
    TYPE     reduce using rule 36 (body)
    SETOP    reduce using rule 36 (body)
    ARTOP1   reduce using rule 36 (body)
    ID       reduce using rule 36 (body)
    IF       reduce using rule 36 (body)
    ELSE     reduce using rule 36 (body)
    FOR      reduce using rule 36 (body)
    RETURN   reduce using rule 36 (body)
    FORALL   reduce using rule 36 (body)
    IS_SET   reduce using rule 36 (body)
    EXISTS   reduce using rule 36 (body)
    NEG      reduce using rule 36 (body)
    READ     reduce using rule 36 (body)
    WRITE    reduce using rule 36 (body)
    WRITELN  reduce using rule 36 (body)
    INTEGER  reduce using rule 36 (body)
    FLOAT    reduce using rule 36 (body)
    EMPTY    reduce using rule 36 (body)
    ';'      reduce using rule 36 (body)
    '}'      reduce using rule 36 (body)
    '('      reduce using rule 36 (body)


State 134

   34 body: stmt .

    error    reduce using rule 34 (body)
    TYPE     reduce using rule 34 (body)
    SETOP    reduce using rule 34 (body)
    ARTOP1   reduce using rule 34 (body)
    ID       reduce using rule 34 (body)
    IF       reduce using rule 34 (body)
    ELSE     reduce using rule 34 (body)
    FOR      reduce using rule 34 (body)
    RETURN   reduce using rule 34 (body)
    FORALL   reduce using rule 34 (body)
    IS_SET   reduce using rule 34 (body)
    EXISTS   reduce using rule 34 (body)
    NEG      reduce using rule 34 (body)
    READ     reduce using rule 34 (body)
    WRITE    reduce using rule 34 (body)
    WRITELN  reduce using rule 34 (body)
    INTEGER  reduce using rule 34 (body)
    FLOAT    reduce using rule 34 (body)
    EMPTY    reduce using rule 34 (body)
    ';'      reduce using rule 34 (body)
    '}'      reduce using rule 34 (body)
    '('      reduce using rule 34 (body)


State 135

   37 condStmt: IF cond prepareScope body .
   39         | IF cond prepareScope body . ELSE $@3 prepareScope body

    ELSE  shift, and go to state 149

    error    reduce using rule 37 (condStmt)
    TYPE     reduce using rule 37 (condStmt)
    SETOP    reduce using rule 37 (condStmt)
    ARTOP1   reduce using rule 37 (condStmt)
    ID       reduce using rule 37 (condStmt)
    IF       reduce using rule 37 (condStmt)
    FOR      reduce using rule 37 (condStmt)
    RETURN   reduce using rule 37 (condStmt)
    FORALL   reduce using rule 37 (condStmt)
    IS_SET   reduce using rule 37 (condStmt)
    EXISTS   reduce using rule 37 (condStmt)
    NEG      reduce using rule 37 (condStmt)
    READ     reduce using rule 37 (condStmt)
    WRITE    reduce using rule 37 (condStmt)
    WRITELN  reduce using rule 37 (condStmt)
    INTEGER  reduce using rule 37 (condStmt)
    FLOAT    reduce using rule 37 (condStmt)
    EMPTY    reduce using rule 37 (condStmt)
    ';'      reduce using rule 37 (condStmt)
    '}'      reduce using rule 37 (condStmt)
    '('      reduce using rule 37 (condStmt)


State 136

   32 iterStmt: FOR '(' error ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 150


State 137

   28 iterStmt: FOR '(' exprStmt exprStmt . ')' prepareScope body
   29         | FOR '(' exprStmt exprStmt . expression ')' prepareScope body

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 194
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    READ     shift, and go to state 195
    WRITE    shift, and go to state 196
    WRITELN  shift, and go to state 197
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181
    ')'      shift, and go to state 151

    expression   go to state 152
    assign       go to state 198
    var          go to state 199
    inExpr       go to state 200
    outExpr      go to state 201
    simpleExpr   go to state 202
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 138

   31 iterStmt: FORALL '(' error ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 153


State 139

   30 iterStmt: FORALL '(' simpleExpr ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 154


State 140

   81 factor: IS_SET '(' factor ')' .

    RELOP   reduce using rule 81 (factor)
    COMP    reduce using rule 81 (factor)
    ARTOP1  reduce using rule 81 (factor)
    ARTOP2  reduce using rule 81 (factor)
    IN      reduce using rule 81 (factor)
    DISJ    reduce using rule 81 (factor)
    CONJ    reduce using rule 81 (factor)
    ';'     reduce using rule 81 (factor)


State 141

   82 factor: EXISTS '(' simpleExpr ')' .

    RELOP   reduce using rule 82 (factor)
    COMP    reduce using rule 82 (factor)
    ARTOP1  reduce using rule 82 (factor)
    ARTOP2  reduce using rule 82 (factor)
    IN      reduce using rule 82 (factor)
    DISJ    reduce using rule 82 (factor)
    CONJ    reduce using rule 82 (factor)
    ';'     reduce using rule 82 (factor)


State 142

   53 inExpr: READ '(' var ')' .

    ';'  reduce using rule 53 (inExpr)


State 143

   54 outExpr: WRITE '(' output ')' .

    ';'  reduce using rule 54 (outExpr)


State 144

   55 outExpr: WRITELN '(' output ')' .

    ';'  reduce using rule 55 (outExpr)


State 145

   59 simpleExpr: simpleExpr . IN conjExpr
   92 paramList: simpleExpr .

    IN  shift, and go to state 254

    ','  reduce using rule 92 (paramList)
    ')'  reduce using rule 92 (paramList)


State 146

   88 call: var $@4 '(' params . ')'

    ')'  shift, and go to state 155


State 147

   90 params: paramList .
   91 paramList: paramList . ',' simpleExpr

    ','  shift, and go to state 156

    ')'  reduce using rule 90 (params)


State 148

   21 funcBody: funcBody . varDecl
   22         | funcBody . funcDecl
   23         | funcBody . stmt
   33 body: '{' funcBody . '}'

    error    shift, and go to state 32
    TYPE     shift, and go to state 170
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    RETURN   shift, and go to state 38
    FORALL   shift, and go to state 39
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 49
    '}'      shift, and go to state 157
    '('      shift, and go to state 51

    varDecl      go to state 52
    funcDecl     go to state 53
    stmt         go to state 54
    iterStmt     go to state 55
    condStmt     go to state 56
    returnStmt   go to state 57
    exprStmt     go to state 58
    expression   go to state 59
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 149

   39 condStmt: IF cond prepareScope body ELSE . $@3 prepareScope body

    error    reduce using rule 38 ($@3)
    TYPE     reduce using rule 38 ($@3)
    SETOP    reduce using rule 38 ($@3)
    ARTOP1   reduce using rule 38 ($@3)
    ID       reduce using rule 38 ($@3)
    IF       reduce using rule 38 ($@3)
    FOR      reduce using rule 38 ($@3)
    RETURN   reduce using rule 38 ($@3)
    FORALL   reduce using rule 38 ($@3)
    IS_SET   reduce using rule 38 ($@3)
    EXISTS   reduce using rule 38 ($@3)
    NEG      reduce using rule 38 ($@3)
    READ     reduce using rule 38 ($@3)
    WRITE    reduce using rule 38 ($@3)
    WRITELN  reduce using rule 38 ($@3)
    INTEGER  reduce using rule 38 ($@3)
    FLOAT    reduce using rule 38 ($@3)
    EMPTY    reduce using rule 38 ($@3)
    ';'      reduce using rule 38 ($@3)
    '{'      reduce using rule 38 ($@3)
    '('      reduce using rule 38 ($@3)

    $@3  go to state 158


State 150

   32 iterStmt: FOR '(' error ')' prepareScope . body

    error    shift, and go to state 32
    TYPE     shift, and go to state 170
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    RETURN   shift, and go to state 38
    FORALL   shift, and go to state 39
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 49
    '{'      shift, and go to state 255
    '('      shift, and go to state 51

    varDecl      go to state 256
    funcDecl     go to state 257
    stmt         go to state 258
    iterStmt     go to state 55
    body         go to state 159
    condStmt     go to state 56
    returnStmt   go to state 57
    exprStmt     go to state 58
    expression   go to state 59
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 151

   28 iterStmt: FOR '(' exprStmt exprStmt ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 160


State 152

   29 iterStmt: FOR '(' exprStmt exprStmt expression . ')' prepareScope body

    ')'  shift, and go to state 161


State 153

   31 iterStmt: FORALL '(' error ')' prepareScope . body

    error    shift, and go to state 32
    TYPE     shift, and go to state 170
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    RETURN   shift, and go to state 38
    FORALL   shift, and go to state 39
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 49
    '{'      shift, and go to state 255
    '('      shift, and go to state 51

    varDecl      go to state 256
    funcDecl     go to state 257
    stmt         go to state 258
    iterStmt     go to state 55
    body         go to state 162
    condStmt     go to state 56
    returnStmt   go to state 57
    exprStmt     go to state 58
    expression   go to state 59
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 154

   30 iterStmt: FORALL '(' simpleExpr ')' prepareScope . body

    error    shift, and go to state 32
    TYPE     shift, and go to state 170
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    RETURN   shift, and go to state 38
    FORALL   shift, and go to state 39
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 49
    '{'      shift, and go to state 255
    '('      shift, and go to state 51

    varDecl      go to state 256
    funcDecl     go to state 257
    stmt         go to state 258
    iterStmt     go to state 55
    body         go to state 163
    condStmt     go to state 56
    returnStmt   go to state 57
    exprStmt     go to state 58
    expression   go to state 59
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 155

   88 call: var $@4 '(' params ')' .

    RELOP   reduce using rule 88 (call)
    COMP    reduce using rule 88 (call)
    ARTOP1  reduce using rule 88 (call)
    ARTOP2  reduce using rule 88 (call)
    IN      reduce using rule 88 (call)
    DISJ    reduce using rule 88 (call)
    CONJ    reduce using rule 88 (call)
    ';'     reduce using rule 88 (call)


State 156

   91 paramList: paramList ',' . simpleExpr

    SETOP    shift, and go to state 232
    ARTOP1   shift, and go to state 233
    ID       shift, and go to state 234
    IS_SET   shift, and go to state 235
    EXISTS   shift, and go to state 236
    NEG      shift, and go to state 237
    INTEGER  shift, and go to state 238
    FLOAT    shift, and go to state 239
    EMPTY    shift, and go to state 240
    '('      shift, and go to state 241

    var          go to state 242
    simpleExpr   go to state 164
    conjExpr     go to state 243
    disjExpr     go to state 244
    negExpr      go to state 245
    compExpr     go to state 246
    relExpr      go to state 247
    artExpr1     go to state 248
    artExpr2     go to state 249
    minusFactor  go to state 250
    factor       go to state 251
    constant     go to state 252
    call         go to state 253


State 157

   33 body: '{' funcBody '}' .

    error    reduce using rule 33 (body)
    TYPE     reduce using rule 33 (body)
    SETOP    reduce using rule 33 (body)
    ARTOP1   reduce using rule 33 (body)
    ID       reduce using rule 33 (body)
    IF       reduce using rule 33 (body)
    ELSE     reduce using rule 33 (body)
    FOR      reduce using rule 33 (body)
    RETURN   reduce using rule 33 (body)
    FORALL   reduce using rule 33 (body)
    IS_SET   reduce using rule 33 (body)
    EXISTS   reduce using rule 33 (body)
    NEG      reduce using rule 33 (body)
    READ     reduce using rule 33 (body)
    WRITE    reduce using rule 33 (body)
    WRITELN  reduce using rule 33 (body)
    INTEGER  reduce using rule 33 (body)
    FLOAT    reduce using rule 33 (body)
    EMPTY    reduce using rule 33 (body)
    ';'      reduce using rule 33 (body)
    '}'      reduce using rule 33 (body)
    '('      reduce using rule 33 (body)


State 158

   39 condStmt: IF cond prepareScope body ELSE $@3 . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 165


State 159

   32 iterStmt: FOR '(' error ')' prepareScope body .

    error    reduce using rule 32 (iterStmt)
    TYPE     reduce using rule 32 (iterStmt)
    SETOP    reduce using rule 32 (iterStmt)
    ARTOP1   reduce using rule 32 (iterStmt)
    ID       reduce using rule 32 (iterStmt)
    IF       reduce using rule 32 (iterStmt)
    FOR      reduce using rule 32 (iterStmt)
    RETURN   reduce using rule 32 (iterStmt)
    FORALL   reduce using rule 32 (iterStmt)
    IS_SET   reduce using rule 32 (iterStmt)
    EXISTS   reduce using rule 32 (iterStmt)
    NEG      reduce using rule 32 (iterStmt)
    READ     reduce using rule 32 (iterStmt)
    WRITE    reduce using rule 32 (iterStmt)
    WRITELN  reduce using rule 32 (iterStmt)
    INTEGER  reduce using rule 32 (iterStmt)
    FLOAT    reduce using rule 32 (iterStmt)
    EMPTY    reduce using rule 32 (iterStmt)
    ';'      reduce using rule 32 (iterStmt)
    '}'      reduce using rule 32 (iterStmt)
    '('      reduce using rule 32 (iterStmt)


State 160

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope . body

    error    shift, and go to state 32
    TYPE     shift, and go to state 170
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    RETURN   shift, and go to state 38
    FORALL   shift, and go to state 39
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 49
    '{'      shift, and go to state 255
    '('      shift, and go to state 51

    varDecl      go to state 256
    funcDecl     go to state 257
    stmt         go to state 258
    iterStmt     go to state 55
    body         go to state 166
    condStmt     go to state 56
    returnStmt   go to state 57
    exprStmt     go to state 58
    expression   go to state 59
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 161

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 167


State 162

   31 iterStmt: FORALL '(' error ')' prepareScope body .

    error    reduce using rule 31 (iterStmt)
    TYPE     reduce using rule 31 (iterStmt)
    SETOP    reduce using rule 31 (iterStmt)
    ARTOP1   reduce using rule 31 (iterStmt)
    ID       reduce using rule 31 (iterStmt)
    IF       reduce using rule 31 (iterStmt)
    FOR      reduce using rule 31 (iterStmt)
    RETURN   reduce using rule 31 (iterStmt)
    FORALL   reduce using rule 31 (iterStmt)
    IS_SET   reduce using rule 31 (iterStmt)
    EXISTS   reduce using rule 31 (iterStmt)
    NEG      reduce using rule 31 (iterStmt)
    READ     reduce using rule 31 (iterStmt)
    WRITE    reduce using rule 31 (iterStmt)
    WRITELN  reduce using rule 31 (iterStmt)
    INTEGER  reduce using rule 31 (iterStmt)
    FLOAT    reduce using rule 31 (iterStmt)
    EMPTY    reduce using rule 31 (iterStmt)
    ';'      reduce using rule 31 (iterStmt)
    '}'      reduce using rule 31 (iterStmt)
    '('      reduce using rule 31 (iterStmt)


State 163

   30 iterStmt: FORALL '(' simpleExpr ')' prepareScope body .

    error    reduce using rule 30 (iterStmt)
    TYPE     reduce using rule 30 (iterStmt)
    SETOP    reduce using rule 30 (iterStmt)
    ARTOP1   reduce using rule 30 (iterStmt)
    ID       reduce using rule 30 (iterStmt)
    IF       reduce using rule 30 (iterStmt)
    FOR      reduce using rule 30 (iterStmt)
    RETURN   reduce using rule 30 (iterStmt)
    FORALL   reduce using rule 30 (iterStmt)
    IS_SET   reduce using rule 30 (iterStmt)
    EXISTS   reduce using rule 30 (iterStmt)
    NEG      reduce using rule 30 (iterStmt)
    READ     reduce using rule 30 (iterStmt)
    WRITE    reduce using rule 30 (iterStmt)
    WRITELN  reduce using rule 30 (iterStmt)
    INTEGER  reduce using rule 30 (iterStmt)
    FLOAT    reduce using rule 30 (iterStmt)
    EMPTY    reduce using rule 30 (iterStmt)
    ';'      reduce using rule 30 (iterStmt)
    '}'      reduce using rule 30 (iterStmt)
    '('      reduce using rule 30 (iterStmt)


State 164

   59 simpleExpr: simpleExpr . IN conjExpr
   91 paramList: paramList ',' simpleExpr .

    IN  shift, and go to state 254

    ','  reduce using rule 91 (paramList)
    ')'  reduce using rule 91 (paramList)


State 165

   39 condStmt: IF cond prepareScope body ELSE $@3 prepareScope . body

    error    shift, and go to state 32
    TYPE     shift, and go to state 170
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    RETURN   shift, and go to state 38
    FORALL   shift, and go to state 39
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 49
    '{'      shift, and go to state 255
    '('      shift, and go to state 51

    varDecl      go to state 256
    funcDecl     go to state 257
    stmt         go to state 258
    iterStmt     go to state 55
    body         go to state 168
    condStmt     go to state 56
    returnStmt   go to state 57
    exprStmt     go to state 58
    expression   go to state 59
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 166

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope body .

    error    reduce using rule 28 (iterStmt)
    TYPE     reduce using rule 28 (iterStmt)
    SETOP    reduce using rule 28 (iterStmt)
    ARTOP1   reduce using rule 28 (iterStmt)
    ID       reduce using rule 28 (iterStmt)
    IF       reduce using rule 28 (iterStmt)
    FOR      reduce using rule 28 (iterStmt)
    RETURN   reduce using rule 28 (iterStmt)
    FORALL   reduce using rule 28 (iterStmt)
    IS_SET   reduce using rule 28 (iterStmt)
    EXISTS   reduce using rule 28 (iterStmt)
    NEG      reduce using rule 28 (iterStmt)
    READ     reduce using rule 28 (iterStmt)
    WRITE    reduce using rule 28 (iterStmt)
    WRITELN  reduce using rule 28 (iterStmt)
    INTEGER  reduce using rule 28 (iterStmt)
    FLOAT    reduce using rule 28 (iterStmt)
    EMPTY    reduce using rule 28 (iterStmt)
    ';'      reduce using rule 28 (iterStmt)
    '}'      reduce using rule 28 (iterStmt)
    '('      reduce using rule 28 (iterStmt)


State 167

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' prepareScope . body

    error    shift, and go to state 32
    TYPE     shift, and go to state 170
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    RETURN   shift, and go to state 38
    FORALL   shift, and go to state 39
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 49
    '{'      shift, and go to state 255
    '('      shift, and go to state 51

    varDecl      go to state 256
    funcDecl     go to state 257
    stmt         go to state 258
    iterStmt     go to state 55
    body         go to state 169
    condStmt     go to state 56
    returnStmt   go to state 57
    exprStmt     go to state 58
    expression   go to state 59
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 168

   39 condStmt: IF cond prepareScope body ELSE $@3 prepareScope body .

    error    reduce using rule 39 (condStmt)
    TYPE     reduce using rule 39 (condStmt)
    SETOP    reduce using rule 39 (condStmt)
    ARTOP1   reduce using rule 39 (condStmt)
    ID       reduce using rule 39 (condStmt)
    IF       reduce using rule 39 (condStmt)
    FOR      reduce using rule 39 (condStmt)
    RETURN   reduce using rule 39 (condStmt)
    FORALL   reduce using rule 39 (condStmt)
    IS_SET   reduce using rule 39 (condStmt)
    EXISTS   reduce using rule 39 (condStmt)
    NEG      reduce using rule 39 (condStmt)
    READ     reduce using rule 39 (condStmt)
    WRITE    reduce using rule 39 (condStmt)
    WRITELN  reduce using rule 39 (condStmt)
    INTEGER  reduce using rule 39 (condStmt)
    FLOAT    reduce using rule 39 (condStmt)
    EMPTY    reduce using rule 39 (condStmt)
    ';'      reduce using rule 39 (condStmt)
    '}'      reduce using rule 39 (condStmt)
    '('      reduce using rule 39 (condStmt)


State 169

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' prepareScope body .

    error    reduce using rule 29 (iterStmt)
    TYPE     reduce using rule 29 (iterStmt)
    SETOP    reduce using rule 29 (iterStmt)
    ARTOP1   reduce using rule 29 (iterStmt)
    ID       reduce using rule 29 (iterStmt)
    IF       reduce using rule 29 (iterStmt)
    FOR      reduce using rule 29 (iterStmt)
    RETURN   reduce using rule 29 (iterStmt)
    FORALL   reduce using rule 29 (iterStmt)
    IS_SET   reduce using rule 29 (iterStmt)
    EXISTS   reduce using rule 29 (iterStmt)
    NEG      reduce using rule 29 (iterStmt)
    READ     reduce using rule 29 (iterStmt)
    WRITE    reduce using rule 29 (iterStmt)
    WRITELN  reduce using rule 29 (iterStmt)
    INTEGER  reduce using rule 29 (iterStmt)
    FLOAT    reduce using rule 29 (iterStmt)
    EMPTY    reduce using rule 29 (iterStmt)
    ';'      reduce using rule 29 (iterStmt)
    '}'      reduce using rule 29 (iterStmt)
    '('      reduce using rule 29 (iterStmt)


State 170

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error
   13 funcDecl: TYPE . ID $@1 arguments $@2 '{' funcBody '}'

    error  shift, and go to state 259
    ID     shift, and go to state 260

    varList  go to state 261
    new_id   go to state 11


State 171

   52 var: ID .
   77 factor: ID .

    RELOP   reduce using rule 77 (factor)
    COMP    reduce using rule 77 (factor)
    ARTOP1  reduce using rule 77 (factor)
    ARTOP2  reduce using rule 77 (factor)
    IN      reduce using rule 77 (factor)
    DISJ    reduce using rule 77 (factor)
    CONJ    reduce using rule 77 (factor)
    ';'     reduce using rule 77 (factor)
    '('     reduce using rule 52 (var)


State 172

   83 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 262


State 173

   75 minusFactor: ARTOP1 . factor

    SETOP    shift, and go to state 172
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var       go to state 182
    factor    go to state 263
    constant  go to state 192
    call      go to state 193


State 174

   52 var: ID .
   77 factor: ID .

    RELOP   reduce using rule 77 (factor)
    COMP    reduce using rule 77 (factor)
    ARTOP1  reduce using rule 77 (factor)
    ARTOP2  reduce using rule 77 (factor)
    IN      reduce using rule 77 (factor)
    DISJ    reduce using rule 77 (factor)
    CONJ    reduce using rule 77 (factor)
    '('     reduce using rule 52 (var)
    ')'     reduce using rule 77 (factor)


State 175

   81 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 264


State 176

   82 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 265


State 177

   65 negExpr: NEG . negExpr

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    negExpr      go to state 266
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 178

   84 constant: INTEGER .

    RELOP   reduce using rule 84 (constant)
    COMP    reduce using rule 84 (constant)
    ARTOP1  reduce using rule 84 (constant)
    ARTOP2  reduce using rule 84 (constant)
    IN      reduce using rule 84 (constant)
    DISJ    reduce using rule 84 (constant)
    CONJ    reduce using rule 84 (constant)
    ')'     reduce using rule 84 (constant)


State 179

   85 constant: FLOAT .

    RELOP   reduce using rule 85 (constant)
    COMP    reduce using rule 85 (constant)
    ARTOP1  reduce using rule 85 (constant)
    ARTOP2  reduce using rule 85 (constant)
    IN      reduce using rule 85 (constant)
    DISJ    reduce using rule 85 (constant)
    CONJ    reduce using rule 85 (constant)
    ')'     reduce using rule 85 (constant)


State 180

   86 constant: EMPTY .

    RELOP   reduce using rule 86 (constant)
    COMP    reduce using rule 86 (constant)
    ARTOP1  reduce using rule 86 (constant)
    ARTOP2  reduce using rule 86 (constant)
    IN      reduce using rule 86 (constant)
    DISJ    reduce using rule 86 (constant)
    CONJ    reduce using rule 86 (constant)
    ')'     reduce using rule 86 (constant)


State 181

   78 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 267
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 182

   88 call: var . $@4 '(' params ')'

    '('  reduce using rule 87 ($@4)

    $@4  go to state 268


State 183

   60 simpleExpr: conjExpr .
   61 conjExpr: conjExpr . CONJ disjExpr

    CONJ  shift, and go to state 269

    IN   reduce using rule 60 (simpleExpr)
    ')'  reduce using rule 60 (simpleExpr)


State 184

   62 conjExpr: disjExpr .
   63 disjExpr: disjExpr . DISJ negExpr

    DISJ  shift, and go to state 270

    IN    reduce using rule 62 (conjExpr)
    CONJ  reduce using rule 62 (conjExpr)
    ')'   reduce using rule 62 (conjExpr)


State 185

   64 disjExpr: negExpr .

    IN    reduce using rule 64 (disjExpr)
    DISJ  reduce using rule 64 (disjExpr)
    CONJ  reduce using rule 64 (disjExpr)
    ')'   reduce using rule 64 (disjExpr)


State 186

   66 negExpr: compExpr .
   67 compExpr: compExpr . COMP relExpr

    COMP  shift, and go to state 271

    IN    reduce using rule 66 (negExpr)
    DISJ  reduce using rule 66 (negExpr)
    CONJ  reduce using rule 66 (negExpr)
    ')'   reduce using rule 66 (negExpr)


State 187

   68 compExpr: relExpr .
   69 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 272

    COMP  reduce using rule 68 (compExpr)
    IN    reduce using rule 68 (compExpr)
    DISJ  reduce using rule 68 (compExpr)
    CONJ  reduce using rule 68 (compExpr)
    ')'   reduce using rule 68 (compExpr)


State 188

   70 relExpr: artExpr1 .
   71 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 273

    RELOP  reduce using rule 70 (relExpr)
    COMP   reduce using rule 70 (relExpr)
    IN     reduce using rule 70 (relExpr)
    DISJ   reduce using rule 70 (relExpr)
    CONJ   reduce using rule 70 (relExpr)
    ')'    reduce using rule 70 (relExpr)


State 189

   72 artExpr1: artExpr2 .
   73 artExpr2: artExpr2 . ARTOP2 minusFactor

    ARTOP2  shift, and go to state 274

    RELOP   reduce using rule 72 (artExpr1)
    COMP    reduce using rule 72 (artExpr1)
    ARTOP1  reduce using rule 72 (artExpr1)
    IN      reduce using rule 72 (artExpr1)
    DISJ    reduce using rule 72 (artExpr1)
    CONJ    reduce using rule 72 (artExpr1)
    ')'     reduce using rule 72 (artExpr1)


State 190

   74 artExpr2: minusFactor .

    RELOP   reduce using rule 74 (artExpr2)
    COMP    reduce using rule 74 (artExpr2)
    ARTOP1  reduce using rule 74 (artExpr2)
    ARTOP2  reduce using rule 74 (artExpr2)
    IN      reduce using rule 74 (artExpr2)
    DISJ    reduce using rule 74 (artExpr2)
    CONJ    reduce using rule 74 (artExpr2)
    ')'     reduce using rule 74 (artExpr2)


State 191

   76 minusFactor: factor .

    RELOP   reduce using rule 76 (minusFactor)
    COMP    reduce using rule 76 (minusFactor)
    ARTOP1  reduce using rule 76 (minusFactor)
    ARTOP2  reduce using rule 76 (minusFactor)
    IN      reduce using rule 76 (minusFactor)
    DISJ    reduce using rule 76 (minusFactor)
    CONJ    reduce using rule 76 (minusFactor)
    ')'     reduce using rule 76 (minusFactor)


State 192

   79 factor: constant .

    RELOP   reduce using rule 79 (factor)
    COMP    reduce using rule 79 (factor)
    ARTOP1  reduce using rule 79 (factor)
    ARTOP2  reduce using rule 79 (factor)
    IN      reduce using rule 79 (factor)
    DISJ    reduce using rule 79 (factor)
    CONJ    reduce using rule 79 (factor)
    ')'     reduce using rule 79 (factor)


State 193

   80 factor: call .

    RELOP   reduce using rule 80 (factor)
    COMP    reduce using rule 80 (factor)
    ARTOP1  reduce using rule 80 (factor)
    ARTOP2  reduce using rule 80 (factor)
    IN      reduce using rule 80 (factor)
    DISJ    reduce using rule 80 (factor)
    CONJ    reduce using rule 80 (factor)
    ')'     reduce using rule 80 (factor)


State 194

   52 var: ID .
   77 factor: ID .

    RELOP   reduce using rule 77 (factor)
    COMP    reduce using rule 77 (factor)
    ARTOP1  reduce using rule 77 (factor)
    ARTOP2  reduce using rule 77 (factor)
    IN      reduce using rule 77 (factor)
    DISJ    reduce using rule 77 (factor)
    CONJ    reduce using rule 77 (factor)
    '('     reduce using rule 52 (var)
    ')'     reduce using rule 77 (factor)
    '='     reduce using rule 52 (var)


State 195

   53 inExpr: READ . '(' var ')'

    '('  shift, and go to state 275


State 196

   54 outExpr: WRITE . '(' output ')'

    '('  shift, and go to state 276


State 197

   55 outExpr: WRITELN . '(' output ')'

    '('  shift, and go to state 277


State 198

   47 expression: assign .

    ')'  reduce using rule 47 (expression)


State 199

   51 assign: var . '=' simpleExpr
   88 call: var . $@4 '(' params ')'

    '='  shift, and go to state 278

    '('  reduce using rule 87 ($@4)

    $@4  go to state 268


State 200

   48 expression: inExpr .

    ')'  reduce using rule 48 (expression)


State 201

   49 expression: outExpr .

    ')'  reduce using rule 49 (expression)


State 202

   50 expression: simpleExpr .
   59 simpleExpr: simpleExpr . IN conjExpr

    IN  shift, and go to state 216

    ')'  reduce using rule 50 (expression)


State 203

   46 exprStmt: ';' .

    error    reduce using rule 46 (exprStmt)
    SETOP    reduce using rule 46 (exprStmt)
    ARTOP1   reduce using rule 46 (exprStmt)
    ID       reduce using rule 46 (exprStmt)
    IS_SET   reduce using rule 46 (exprStmt)
    EXISTS   reduce using rule 46 (exprStmt)
    NEG      reduce using rule 46 (exprStmt)
    READ     reduce using rule 46 (exprStmt)
    WRITE    reduce using rule 46 (exprStmt)
    WRITELN  reduce using rule 46 (exprStmt)
    INTEGER  reduce using rule 46 (exprStmt)
    FLOAT    reduce using rule 46 (exprStmt)
    EMPTY    reduce using rule 46 (exprStmt)
    ';'      reduce using rule 46 (exprStmt)
    '('      reduce using rule 46 (exprStmt)


State 204

   44 exprStmt: expression . ';'

    ';'  shift, and go to state 279


State 205

   83 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 280


State 206

   52 var: ID .
   77 factor: ID .

    '('  reduce using rule 52 (var)
    ')'  reduce using rule 77 (factor)


State 207

   81 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 281


State 208

   82 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 282


State 209

   84 constant: INTEGER .

    ')'  reduce using rule 84 (constant)


State 210

   85 constant: FLOAT .

    ')'  reduce using rule 85 (constant)


State 211

   86 constant: EMPTY .

    ')'  reduce using rule 86 (constant)


State 212

   78 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 283
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 213

   88 call: var . $@4 '(' params ')'

    '('  reduce using rule 87 ($@4)

    $@4  go to state 284


State 214

   79 factor: constant .

    ')'  reduce using rule 79 (factor)


State 215

   80 factor: call .

    ')'  reduce using rule 80 (factor)


State 216

   59 simpleExpr: simpleExpr IN . conjExpr

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    conjExpr     go to state 285
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 217

   45 exprStmt: error .

    error    reduce using rule 45 (exprStmt)
    TYPE     reduce using rule 45 (exprStmt)
    SETOP    reduce using rule 45 (exprStmt)
    ARTOP1   reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IF       reduce using rule 45 (exprStmt)
    ELSE     reduce using rule 45 (exprStmt)
    FOR      reduce using rule 45 (exprStmt)
    RETURN   reduce using rule 45 (exprStmt)
    FORALL   reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    ';'      reduce using rule 45 (exprStmt)
    '}'      reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)


State 218

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error
   13 funcDecl: TYPE . ID $@1 arguments $@2 '{' funcBody '}'

    error  shift, and go to state 286
    ID     shift, and go to state 287

    varList  go to state 288
    new_id   go to state 11


State 219

   37 condStmt: IF . cond prepareScope body
   39         | IF . cond prepareScope body ELSE $@3 prepareScope body

    '('  shift, and go to state 79

    cond  go to state 289


State 220

   28 iterStmt: FOR . '(' exprStmt exprStmt ')' prepareScope body
   29         | FOR . '(' exprStmt exprStmt expression ')' prepareScope body
   32         | FOR . '(' error ')' prepareScope body

    '('  shift, and go to state 290


State 221

   43 returnStmt: RETURN . exprStmt

    error    shift, and go to state 217
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 223
    '('      shift, and go to state 51

    exprStmt     go to state 291
    expression   go to state 228
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 222

   30 iterStmt: FORALL . '(' simpleExpr ')' prepareScope body
   31         | FORALL . '(' error ')' prepareScope body

    '('  shift, and go to state 292


State 223

   46 exprStmt: ';' .

    error    reduce using rule 46 (exprStmt)
    TYPE     reduce using rule 46 (exprStmt)
    SETOP    reduce using rule 46 (exprStmt)
    ARTOP1   reduce using rule 46 (exprStmt)
    ID       reduce using rule 46 (exprStmt)
    IF       reduce using rule 46 (exprStmt)
    ELSE     reduce using rule 46 (exprStmt)
    FOR      reduce using rule 46 (exprStmt)
    RETURN   reduce using rule 46 (exprStmt)
    FORALL   reduce using rule 46 (exprStmt)
    IS_SET   reduce using rule 46 (exprStmt)
    EXISTS   reduce using rule 46 (exprStmt)
    NEG      reduce using rule 46 (exprStmt)
    READ     reduce using rule 46 (exprStmt)
    WRITE    reduce using rule 46 (exprStmt)
    WRITELN  reduce using rule 46 (exprStmt)
    INTEGER  reduce using rule 46 (exprStmt)
    FLOAT    reduce using rule 46 (exprStmt)
    EMPTY    reduce using rule 46 (exprStmt)
    ';'      reduce using rule 46 (exprStmt)
    '}'      reduce using rule 46 (exprStmt)
    '('      reduce using rule 46 (exprStmt)


State 224

   26 stmt: iterStmt .

    error    reduce using rule 26 (stmt)
    TYPE     reduce using rule 26 (stmt)
    SETOP    reduce using rule 26 (stmt)
    ARTOP1   reduce using rule 26 (stmt)
    ID       reduce using rule 26 (stmt)
    IF       reduce using rule 26 (stmt)
    ELSE     reduce using rule 26 (stmt)
    FOR      reduce using rule 26 (stmt)
    RETURN   reduce using rule 26 (stmt)
    FORALL   reduce using rule 26 (stmt)
    IS_SET   reduce using rule 26 (stmt)
    EXISTS   reduce using rule 26 (stmt)
    NEG      reduce using rule 26 (stmt)
    READ     reduce using rule 26 (stmt)
    WRITE    reduce using rule 26 (stmt)
    WRITELN  reduce using rule 26 (stmt)
    INTEGER  reduce using rule 26 (stmt)
    FLOAT    reduce using rule 26 (stmt)
    EMPTY    reduce using rule 26 (stmt)
    ';'      reduce using rule 26 (stmt)
    '}'      reduce using rule 26 (stmt)
    '('      reduce using rule 26 (stmt)


State 225

   27 stmt: condStmt .

    error    reduce using rule 27 (stmt)
    TYPE     reduce using rule 27 (stmt)
    SETOP    reduce using rule 27 (stmt)
    ARTOP1   reduce using rule 27 (stmt)
    ID       reduce using rule 27 (stmt)
    IF       reduce using rule 27 (stmt)
    ELSE     reduce using rule 27 (stmt)
    FOR      reduce using rule 27 (stmt)
    RETURN   reduce using rule 27 (stmt)
    FORALL   reduce using rule 27 (stmt)
    IS_SET   reduce using rule 27 (stmt)
    EXISTS   reduce using rule 27 (stmt)
    NEG      reduce using rule 27 (stmt)
    READ     reduce using rule 27 (stmt)
    WRITE    reduce using rule 27 (stmt)
    WRITELN  reduce using rule 27 (stmt)
    INTEGER  reduce using rule 27 (stmt)
    FLOAT    reduce using rule 27 (stmt)
    EMPTY    reduce using rule 27 (stmt)
    ';'      reduce using rule 27 (stmt)
    '}'      reduce using rule 27 (stmt)
    '('      reduce using rule 27 (stmt)


State 226

   25 stmt: returnStmt .

    error    reduce using rule 25 (stmt)
    TYPE     reduce using rule 25 (stmt)
    SETOP    reduce using rule 25 (stmt)
    ARTOP1   reduce using rule 25 (stmt)
    ID       reduce using rule 25 (stmt)
    IF       reduce using rule 25 (stmt)
    ELSE     reduce using rule 25 (stmt)
    FOR      reduce using rule 25 (stmt)
    RETURN   reduce using rule 25 (stmt)
    FORALL   reduce using rule 25 (stmt)
    IS_SET   reduce using rule 25 (stmt)
    EXISTS   reduce using rule 25 (stmt)
    NEG      reduce using rule 25 (stmt)
    READ     reduce using rule 25 (stmt)
    WRITE    reduce using rule 25 (stmt)
    WRITELN  reduce using rule 25 (stmt)
    INTEGER  reduce using rule 25 (stmt)
    FLOAT    reduce using rule 25 (stmt)
    EMPTY    reduce using rule 25 (stmt)
    ';'      reduce using rule 25 (stmt)
    '}'      reduce using rule 25 (stmt)
    '('      reduce using rule 25 (stmt)


State 227

   24 stmt: exprStmt .

    error    reduce using rule 24 (stmt)
    TYPE     reduce using rule 24 (stmt)
    SETOP    reduce using rule 24 (stmt)
    ARTOP1   reduce using rule 24 (stmt)
    ID       reduce using rule 24 (stmt)
    IF       reduce using rule 24 (stmt)
    ELSE     reduce using rule 24 (stmt)
    FOR      reduce using rule 24 (stmt)
    RETURN   reduce using rule 24 (stmt)
    FORALL   reduce using rule 24 (stmt)
    IS_SET   reduce using rule 24 (stmt)
    EXISTS   reduce using rule 24 (stmt)
    NEG      reduce using rule 24 (stmt)
    READ     reduce using rule 24 (stmt)
    WRITE    reduce using rule 24 (stmt)
    WRITELN  reduce using rule 24 (stmt)
    INTEGER  reduce using rule 24 (stmt)
    FLOAT    reduce using rule 24 (stmt)
    EMPTY    reduce using rule 24 (stmt)
    ';'      reduce using rule 24 (stmt)
    '}'      reduce using rule 24 (stmt)
    '('      reduce using rule 24 (stmt)


State 228

   44 exprStmt: expression . ';'

    ';'  shift, and go to state 293


State 229

   45 exprStmt: error .

    SETOP    reduce using rule 45 (exprStmt)
    ARTOP1   reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)
    ')'      reduce using rule 45 (exprStmt)


State 230

   46 exprStmt: ';' .

    SETOP    reduce using rule 46 (exprStmt)
    ARTOP1   reduce using rule 46 (exprStmt)
    ID       reduce using rule 46 (exprStmt)
    IS_SET   reduce using rule 46 (exprStmt)
    EXISTS   reduce using rule 46 (exprStmt)
    NEG      reduce using rule 46 (exprStmt)
    READ     reduce using rule 46 (exprStmt)
    WRITE    reduce using rule 46 (exprStmt)
    WRITELN  reduce using rule 46 (exprStmt)
    INTEGER  reduce using rule 46 (exprStmt)
    FLOAT    reduce using rule 46 (exprStmt)
    EMPTY    reduce using rule 46 (exprStmt)
    '('      reduce using rule 46 (exprStmt)
    ')'      reduce using rule 46 (exprStmt)


State 231

   44 exprStmt: expression . ';'

    ';'  shift, and go to state 294


State 232

   83 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 295


State 233

   75 minusFactor: ARTOP1 . factor

    SETOP    shift, and go to state 232
    ID       shift, and go to state 234
    IS_SET   shift, and go to state 235
    EXISTS   shift, and go to state 236
    INTEGER  shift, and go to state 238
    FLOAT    shift, and go to state 239
    EMPTY    shift, and go to state 240
    '('      shift, and go to state 241

    var       go to state 242
    factor    go to state 296
    constant  go to state 252
    call      go to state 253


State 234

   52 var: ID .
   77 factor: ID .

    RELOP   reduce using rule 77 (factor)
    COMP    reduce using rule 77 (factor)
    ARTOP1  reduce using rule 77 (factor)
    ARTOP2  reduce using rule 77 (factor)
    IN      reduce using rule 77 (factor)
    DISJ    reduce using rule 77 (factor)
    CONJ    reduce using rule 77 (factor)
    ','     reduce using rule 77 (factor)
    '('     reduce using rule 52 (var)
    ')'     reduce using rule 77 (factor)


State 235

   81 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 297


State 236

   82 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 298


State 237

   65 negExpr: NEG . negExpr

    SETOP    shift, and go to state 232
    ARTOP1   shift, and go to state 233
    ID       shift, and go to state 234
    IS_SET   shift, and go to state 235
    EXISTS   shift, and go to state 236
    NEG      shift, and go to state 237
    INTEGER  shift, and go to state 238
    FLOAT    shift, and go to state 239
    EMPTY    shift, and go to state 240
    '('      shift, and go to state 241

    var          go to state 242
    negExpr      go to state 299
    compExpr     go to state 246
    relExpr      go to state 247
    artExpr1     go to state 248
    artExpr2     go to state 249
    minusFactor  go to state 250
    factor       go to state 251
    constant     go to state 252
    call         go to state 253


State 238

   84 constant: INTEGER .

    RELOP   reduce using rule 84 (constant)
    COMP    reduce using rule 84 (constant)
    ARTOP1  reduce using rule 84 (constant)
    ARTOP2  reduce using rule 84 (constant)
    IN      reduce using rule 84 (constant)
    DISJ    reduce using rule 84 (constant)
    CONJ    reduce using rule 84 (constant)
    ','     reduce using rule 84 (constant)
    ')'     reduce using rule 84 (constant)


State 239

   85 constant: FLOAT .

    RELOP   reduce using rule 85 (constant)
    COMP    reduce using rule 85 (constant)
    ARTOP1  reduce using rule 85 (constant)
    ARTOP2  reduce using rule 85 (constant)
    IN      reduce using rule 85 (constant)
    DISJ    reduce using rule 85 (constant)
    CONJ    reduce using rule 85 (constant)
    ','     reduce using rule 85 (constant)
    ')'     reduce using rule 85 (constant)


State 240

   86 constant: EMPTY .

    RELOP   reduce using rule 86 (constant)
    COMP    reduce using rule 86 (constant)
    ARTOP1  reduce using rule 86 (constant)
    ARTOP2  reduce using rule 86 (constant)
    IN      reduce using rule 86 (constant)
    DISJ    reduce using rule 86 (constant)
    CONJ    reduce using rule 86 (constant)
    ','     reduce using rule 86 (constant)
    ')'     reduce using rule 86 (constant)


State 241

   78 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 300
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 242

   88 call: var . $@4 '(' params ')'

    '('  reduce using rule 87 ($@4)

    $@4  go to state 301


State 243

   60 simpleExpr: conjExpr .
   61 conjExpr: conjExpr . CONJ disjExpr

    CONJ  shift, and go to state 302

    IN   reduce using rule 60 (simpleExpr)
    ','  reduce using rule 60 (simpleExpr)
    ')'  reduce using rule 60 (simpleExpr)


State 244

   62 conjExpr: disjExpr .
   63 disjExpr: disjExpr . DISJ negExpr

    DISJ  shift, and go to state 303

    IN    reduce using rule 62 (conjExpr)
    CONJ  reduce using rule 62 (conjExpr)
    ','   reduce using rule 62 (conjExpr)
    ')'   reduce using rule 62 (conjExpr)


State 245

   64 disjExpr: negExpr .

    IN    reduce using rule 64 (disjExpr)
    DISJ  reduce using rule 64 (disjExpr)
    CONJ  reduce using rule 64 (disjExpr)
    ','   reduce using rule 64 (disjExpr)
    ')'   reduce using rule 64 (disjExpr)


State 246

   66 negExpr: compExpr .
   67 compExpr: compExpr . COMP relExpr

    COMP  shift, and go to state 304

    IN    reduce using rule 66 (negExpr)
    DISJ  reduce using rule 66 (negExpr)
    CONJ  reduce using rule 66 (negExpr)
    ','   reduce using rule 66 (negExpr)
    ')'   reduce using rule 66 (negExpr)


State 247

   68 compExpr: relExpr .
   69 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 305

    COMP  reduce using rule 68 (compExpr)
    IN    reduce using rule 68 (compExpr)
    DISJ  reduce using rule 68 (compExpr)
    CONJ  reduce using rule 68 (compExpr)
    ','   reduce using rule 68 (compExpr)
    ')'   reduce using rule 68 (compExpr)


State 248

   70 relExpr: artExpr1 .
   71 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 306

    RELOP  reduce using rule 70 (relExpr)
    COMP   reduce using rule 70 (relExpr)
    IN     reduce using rule 70 (relExpr)
    DISJ   reduce using rule 70 (relExpr)
    CONJ   reduce using rule 70 (relExpr)
    ','    reduce using rule 70 (relExpr)
    ')'    reduce using rule 70 (relExpr)


State 249

   72 artExpr1: artExpr2 .
   73 artExpr2: artExpr2 . ARTOP2 minusFactor

    ARTOP2  shift, and go to state 307

    RELOP   reduce using rule 72 (artExpr1)
    COMP    reduce using rule 72 (artExpr1)
    ARTOP1  reduce using rule 72 (artExpr1)
    IN      reduce using rule 72 (artExpr1)
    DISJ    reduce using rule 72 (artExpr1)
    CONJ    reduce using rule 72 (artExpr1)
    ','     reduce using rule 72 (artExpr1)
    ')'     reduce using rule 72 (artExpr1)


State 250

   74 artExpr2: minusFactor .

    RELOP   reduce using rule 74 (artExpr2)
    COMP    reduce using rule 74 (artExpr2)
    ARTOP1  reduce using rule 74 (artExpr2)
    ARTOP2  reduce using rule 74 (artExpr2)
    IN      reduce using rule 74 (artExpr2)
    DISJ    reduce using rule 74 (artExpr2)
    CONJ    reduce using rule 74 (artExpr2)
    ','     reduce using rule 74 (artExpr2)
    ')'     reduce using rule 74 (artExpr2)


State 251

   76 minusFactor: factor .

    RELOP   reduce using rule 76 (minusFactor)
    COMP    reduce using rule 76 (minusFactor)
    ARTOP1  reduce using rule 76 (minusFactor)
    ARTOP2  reduce using rule 76 (minusFactor)
    IN      reduce using rule 76 (minusFactor)
    DISJ    reduce using rule 76 (minusFactor)
    CONJ    reduce using rule 76 (minusFactor)
    ','     reduce using rule 76 (minusFactor)
    ')'     reduce using rule 76 (minusFactor)


State 252

   79 factor: constant .

    RELOP   reduce using rule 79 (factor)
    COMP    reduce using rule 79 (factor)
    ARTOP1  reduce using rule 79 (factor)
    ARTOP2  reduce using rule 79 (factor)
    IN      reduce using rule 79 (factor)
    DISJ    reduce using rule 79 (factor)
    CONJ    reduce using rule 79 (factor)
    ','     reduce using rule 79 (factor)
    ')'     reduce using rule 79 (factor)


State 253

   80 factor: call .

    RELOP   reduce using rule 80 (factor)
    COMP    reduce using rule 80 (factor)
    ARTOP1  reduce using rule 80 (factor)
    ARTOP2  reduce using rule 80 (factor)
    IN      reduce using rule 80 (factor)
    DISJ    reduce using rule 80 (factor)
    CONJ    reduce using rule 80 (factor)
    ','     reduce using rule 80 (factor)
    ')'     reduce using rule 80 (factor)


State 254

   59 simpleExpr: simpleExpr IN . conjExpr

    SETOP    shift, and go to state 232
    ARTOP1   shift, and go to state 233
    ID       shift, and go to state 234
    IS_SET   shift, and go to state 235
    EXISTS   shift, and go to state 236
    NEG      shift, and go to state 237
    INTEGER  shift, and go to state 238
    FLOAT    shift, and go to state 239
    EMPTY    shift, and go to state 240
    '('      shift, and go to state 241

    var          go to state 242
    conjExpr     go to state 308
    disjExpr     go to state 244
    negExpr      go to state 245
    compExpr     go to state 246
    relExpr      go to state 247
    artExpr1     go to state 248
    artExpr2     go to state 249
    minusFactor  go to state 250
    factor       go to state 251
    constant     go to state 252
    call         go to state 253


State 255

   33 body: '{' . funcBody '}'

    error    reduce using rule 20 (funcBody)
    TYPE     reduce using rule 20 (funcBody)
    SETOP    reduce using rule 20 (funcBody)
    ARTOP1   reduce using rule 20 (funcBody)
    ID       reduce using rule 20 (funcBody)
    IF       reduce using rule 20 (funcBody)
    FOR      reduce using rule 20 (funcBody)
    RETURN   reduce using rule 20 (funcBody)
    FORALL   reduce using rule 20 (funcBody)
    IS_SET   reduce using rule 20 (funcBody)
    EXISTS   reduce using rule 20 (funcBody)
    NEG      reduce using rule 20 (funcBody)
    READ     reduce using rule 20 (funcBody)
    WRITE    reduce using rule 20 (funcBody)
    WRITELN  reduce using rule 20 (funcBody)
    INTEGER  reduce using rule 20 (funcBody)
    FLOAT    reduce using rule 20 (funcBody)
    EMPTY    reduce using rule 20 (funcBody)
    ';'      reduce using rule 20 (funcBody)
    '}'      reduce using rule 20 (funcBody)
    '('      reduce using rule 20 (funcBody)

    funcBody  go to state 309


State 256

   35 body: varDecl .

    error    reduce using rule 35 (body)
    TYPE     reduce using rule 35 (body)
    SETOP    reduce using rule 35 (body)
    ARTOP1   reduce using rule 35 (body)
    ID       reduce using rule 35 (body)
    IF       reduce using rule 35 (body)
    FOR      reduce using rule 35 (body)
    RETURN   reduce using rule 35 (body)
    FORALL   reduce using rule 35 (body)
    IS_SET   reduce using rule 35 (body)
    EXISTS   reduce using rule 35 (body)
    NEG      reduce using rule 35 (body)
    READ     reduce using rule 35 (body)
    WRITE    reduce using rule 35 (body)
    WRITELN  reduce using rule 35 (body)
    INTEGER  reduce using rule 35 (body)
    FLOAT    reduce using rule 35 (body)
    EMPTY    reduce using rule 35 (body)
    ';'      reduce using rule 35 (body)
    '}'      reduce using rule 35 (body)
    '('      reduce using rule 35 (body)


State 257

   36 body: funcDecl .

    error    reduce using rule 36 (body)
    TYPE     reduce using rule 36 (body)
    SETOP    reduce using rule 36 (body)
    ARTOP1   reduce using rule 36 (body)
    ID       reduce using rule 36 (body)
    IF       reduce using rule 36 (body)
    FOR      reduce using rule 36 (body)
    RETURN   reduce using rule 36 (body)
    FORALL   reduce using rule 36 (body)
    IS_SET   reduce using rule 36 (body)
    EXISTS   reduce using rule 36 (body)
    NEG      reduce using rule 36 (body)
    READ     reduce using rule 36 (body)
    WRITE    reduce using rule 36 (body)
    WRITELN  reduce using rule 36 (body)
    INTEGER  reduce using rule 36 (body)
    FLOAT    reduce using rule 36 (body)
    EMPTY    reduce using rule 36 (body)
    ';'      reduce using rule 36 (body)
    '}'      reduce using rule 36 (body)
    '('      reduce using rule 36 (body)


State 258

   34 body: stmt .

    error    reduce using rule 34 (body)
    TYPE     reduce using rule 34 (body)
    SETOP    reduce using rule 34 (body)
    ARTOP1   reduce using rule 34 (body)
    ID       reduce using rule 34 (body)
    IF       reduce using rule 34 (body)
    FOR      reduce using rule 34 (body)
    RETURN   reduce using rule 34 (body)
    FORALL   reduce using rule 34 (body)
    IS_SET   reduce using rule 34 (body)
    EXISTS   reduce using rule 34 (body)
    NEG      reduce using rule 34 (body)
    READ     reduce using rule 34 (body)
    WRITE    reduce using rule 34 (body)
    WRITELN  reduce using rule 34 (body)
    INTEGER  reduce using rule 34 (body)
    FLOAT    reduce using rule 34 (body)
    EMPTY    reduce using rule 34 (body)
    ';'      reduce using rule 34 (body)
    '}'      reduce using rule 34 (body)
    '('      reduce using rule 34 (body)


State 259

    7 varDecl: TYPE error .

    error    reduce using rule 7 (varDecl)
    TYPE     reduce using rule 7 (varDecl)
    SETOP    reduce using rule 7 (varDecl)
    ARTOP1   reduce using rule 7 (varDecl)
    ID       reduce using rule 7 (varDecl)
    IF       reduce using rule 7 (varDecl)
    FOR      reduce using rule 7 (varDecl)
    RETURN   reduce using rule 7 (varDecl)
    FORALL   reduce using rule 7 (varDecl)
    IS_SET   reduce using rule 7 (varDecl)
    EXISTS   reduce using rule 7 (varDecl)
    NEG      reduce using rule 7 (varDecl)
    READ     reduce using rule 7 (varDecl)
    WRITE    reduce using rule 7 (varDecl)
    WRITELN  reduce using rule 7 (varDecl)
    INTEGER  reduce using rule 7 (varDecl)
    FLOAT    reduce using rule 7 (varDecl)
    EMPTY    reduce using rule 7 (varDecl)
    ';'      reduce using rule 7 (varDecl)
    '}'      reduce using rule 7 (varDecl)
    '('      reduce using rule 7 (varDecl)


State 260

   10 new_id: ID .
   13 funcDecl: TYPE ID . $@1 arguments $@2 '{' funcBody '}'

    ';'  reduce using rule 10 (new_id)
    ','  reduce using rule 10 (new_id)
    '('  reduce using rule 11 ($@1)

    $@1  go to state 310


State 261

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 311
    ','  shift, and go to state 14


State 262

   83 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 312
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 263

   75 minusFactor: ARTOP1 factor .

    RELOP   reduce using rule 75 (minusFactor)
    COMP    reduce using rule 75 (minusFactor)
    ARTOP1  reduce using rule 75 (minusFactor)
    ARTOP2  reduce using rule 75 (minusFactor)
    IN      reduce using rule 75 (minusFactor)
    DISJ    reduce using rule 75 (minusFactor)
    CONJ    reduce using rule 75 (minusFactor)
    ')'     reduce using rule 75 (minusFactor)


State 264

   81 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 205
    ID       shift, and go to state 206
    IS_SET   shift, and go to state 207
    EXISTS   shift, and go to state 208
    INTEGER  shift, and go to state 209
    FLOAT    shift, and go to state 210
    EMPTY    shift, and go to state 211
    '('      shift, and go to state 212

    var       go to state 213
    factor    go to state 313
    constant  go to state 214
    call      go to state 215


State 265

   82 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 314
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 266

   65 negExpr: NEG negExpr .

    IN    reduce using rule 65 (negExpr)
    DISJ  reduce using rule 65 (negExpr)
    CONJ  reduce using rule 65 (negExpr)
    ')'   reduce using rule 65 (negExpr)


State 267

   59 simpleExpr: simpleExpr . IN conjExpr
   78 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 216
    ')'  shift, and go to state 315


State 268

   88 call: var $@4 . '(' params ')'

    '('  shift, and go to state 316


State 269

   61 conjExpr: conjExpr CONJ . disjExpr

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    disjExpr     go to state 317
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 270

   63 disjExpr: disjExpr DISJ . negExpr

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    negExpr      go to state 318
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 271

   67 compExpr: compExpr COMP . relExpr

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    relExpr      go to state 319
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 272

   69 relExpr: relExpr RELOP . artExpr1

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    artExpr1     go to state 320
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 273

   71 artExpr1: artExpr1 ARTOP1 . artExpr2

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    artExpr2     go to state 321
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 274

   73 artExpr2: artExpr2 ARTOP2 . minusFactor

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    minusFactor  go to state 322
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 275

   53 inExpr: READ '(' . var ')'

    ID  shift, and go to state 111

    var  go to state 323


State 276

   54 outExpr: WRITE '(' . output ')'

    ID      shift, and go to state 111
    CHAR    shift, and go to state 113
    STRING  shift, and go to state 114

    var     go to state 115
    output  go to state 324


State 277

   55 outExpr: WRITELN '(' . output ')'

    ID      shift, and go to state 111
    CHAR    shift, and go to state 113
    STRING  shift, and go to state 114

    var     go to state 115
    output  go to state 325


State 278

   51 assign: var '=' . simpleExpr

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 326
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 279

   44 exprStmt: expression ';' .

    error    reduce using rule 44 (exprStmt)
    SETOP    reduce using rule 44 (exprStmt)
    ARTOP1   reduce using rule 44 (exprStmt)
    ID       reduce using rule 44 (exprStmt)
    IS_SET   reduce using rule 44 (exprStmt)
    EXISTS   reduce using rule 44 (exprStmt)
    NEG      reduce using rule 44 (exprStmt)
    READ     reduce using rule 44 (exprStmt)
    WRITE    reduce using rule 44 (exprStmt)
    WRITELN  reduce using rule 44 (exprStmt)
    INTEGER  reduce using rule 44 (exprStmt)
    FLOAT    reduce using rule 44 (exprStmt)
    EMPTY    reduce using rule 44 (exprStmt)
    ';'      reduce using rule 44 (exprStmt)
    '('      reduce using rule 44 (exprStmt)


State 280

   83 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 327
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 281

   81 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 205
    ID       shift, and go to state 206
    IS_SET   shift, and go to state 207
    EXISTS   shift, and go to state 208
    INTEGER  shift, and go to state 209
    FLOAT    shift, and go to state 210
    EMPTY    shift, and go to state 211
    '('      shift, and go to state 212

    var       go to state 213
    factor    go to state 328
    constant  go to state 214
    call      go to state 215


State 282

   82 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 329
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 283

   59 simpleExpr: simpleExpr . IN conjExpr
   78 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 216
    ')'  shift, and go to state 330


State 284

   88 call: var $@4 . '(' params ')'

    '('  shift, and go to state 331


State 285

   59 simpleExpr: simpleExpr IN conjExpr .
   61 conjExpr: conjExpr . CONJ disjExpr

    CONJ  shift, and go to state 269

    IN   reduce using rule 59 (simpleExpr)
    ')'  reduce using rule 59 (simpleExpr)


State 286

    7 varDecl: TYPE error .

    error    reduce using rule 7 (varDecl)
    TYPE     reduce using rule 7 (varDecl)
    SETOP    reduce using rule 7 (varDecl)
    ARTOP1   reduce using rule 7 (varDecl)
    ID       reduce using rule 7 (varDecl)
    IF       reduce using rule 7 (varDecl)
    ELSE     reduce using rule 7 (varDecl)
    FOR      reduce using rule 7 (varDecl)
    RETURN   reduce using rule 7 (varDecl)
    FORALL   reduce using rule 7 (varDecl)
    IS_SET   reduce using rule 7 (varDecl)
    EXISTS   reduce using rule 7 (varDecl)
    NEG      reduce using rule 7 (varDecl)
    READ     reduce using rule 7 (varDecl)
    WRITE    reduce using rule 7 (varDecl)
    WRITELN  reduce using rule 7 (varDecl)
    INTEGER  reduce using rule 7 (varDecl)
    FLOAT    reduce using rule 7 (varDecl)
    EMPTY    reduce using rule 7 (varDecl)
    ';'      reduce using rule 7 (varDecl)
    '}'      reduce using rule 7 (varDecl)
    '('      reduce using rule 7 (varDecl)


State 287

   10 new_id: ID .
   13 funcDecl: TYPE ID . $@1 arguments $@2 '{' funcBody '}'

    ';'  reduce using rule 10 (new_id)
    ','  reduce using rule 10 (new_id)
    '('  reduce using rule 11 ($@1)

    $@1  go to state 332


State 288

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 333
    ','  shift, and go to state 14


State 289

   37 condStmt: IF cond . prepareScope body
   39         | IF cond . prepareScope body ELSE $@3 prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 334


State 290

   28 iterStmt: FOR '(' . exprStmt exprStmt ')' prepareScope body
   29         | FOR '(' . exprStmt exprStmt expression ')' prepareScope body
   32         | FOR '(' . error ')' prepareScope body

    error    shift, and go to state 335
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 203
    '('      shift, and go to state 51

    exprStmt     go to state 336
    expression   go to state 204
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 291

   43 returnStmt: RETURN exprStmt .

    error    reduce using rule 43 (returnStmt)
    TYPE     reduce using rule 43 (returnStmt)
    SETOP    reduce using rule 43 (returnStmt)
    ARTOP1   reduce using rule 43 (returnStmt)
    ID       reduce using rule 43 (returnStmt)
    IF       reduce using rule 43 (returnStmt)
    ELSE     reduce using rule 43 (returnStmt)
    FOR      reduce using rule 43 (returnStmt)
    RETURN   reduce using rule 43 (returnStmt)
    FORALL   reduce using rule 43 (returnStmt)
    IS_SET   reduce using rule 43 (returnStmt)
    EXISTS   reduce using rule 43 (returnStmt)
    NEG      reduce using rule 43 (returnStmt)
    READ     reduce using rule 43 (returnStmt)
    WRITE    reduce using rule 43 (returnStmt)
    WRITELN  reduce using rule 43 (returnStmt)
    INTEGER  reduce using rule 43 (returnStmt)
    FLOAT    reduce using rule 43 (returnStmt)
    EMPTY    reduce using rule 43 (returnStmt)
    ';'      reduce using rule 43 (returnStmt)
    '}'      reduce using rule 43 (returnStmt)
    '('      reduce using rule 43 (returnStmt)


State 292

   30 iterStmt: FORALL '(' . simpleExpr ')' prepareScope body
   31         | FORALL '(' . error ')' prepareScope body

    error    shift, and go to state 337
    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 338
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 293

   44 exprStmt: expression ';' .

    error    reduce using rule 44 (exprStmt)
    TYPE     reduce using rule 44 (exprStmt)
    SETOP    reduce using rule 44 (exprStmt)
    ARTOP1   reduce using rule 44 (exprStmt)
    ID       reduce using rule 44 (exprStmt)
    IF       reduce using rule 44 (exprStmt)
    ELSE     reduce using rule 44 (exprStmt)
    FOR      reduce using rule 44 (exprStmt)
    RETURN   reduce using rule 44 (exprStmt)
    FORALL   reduce using rule 44 (exprStmt)
    IS_SET   reduce using rule 44 (exprStmt)
    EXISTS   reduce using rule 44 (exprStmt)
    NEG      reduce using rule 44 (exprStmt)
    READ     reduce using rule 44 (exprStmt)
    WRITE    reduce using rule 44 (exprStmt)
    WRITELN  reduce using rule 44 (exprStmt)
    INTEGER  reduce using rule 44 (exprStmt)
    FLOAT    reduce using rule 44 (exprStmt)
    EMPTY    reduce using rule 44 (exprStmt)
    ';'      reduce using rule 44 (exprStmt)
    '}'      reduce using rule 44 (exprStmt)
    '('      reduce using rule 44 (exprStmt)


State 294

   44 exprStmt: expression ';' .

    SETOP    reduce using rule 44 (exprStmt)
    ARTOP1   reduce using rule 44 (exprStmt)
    ID       reduce using rule 44 (exprStmt)
    IS_SET   reduce using rule 44 (exprStmt)
    EXISTS   reduce using rule 44 (exprStmt)
    NEG      reduce using rule 44 (exprStmt)
    READ     reduce using rule 44 (exprStmt)
    WRITE    reduce using rule 44 (exprStmt)
    WRITELN  reduce using rule 44 (exprStmt)
    INTEGER  reduce using rule 44 (exprStmt)
    FLOAT    reduce using rule 44 (exprStmt)
    EMPTY    reduce using rule 44 (exprStmt)
    '('      reduce using rule 44 (exprStmt)
    ')'      reduce using rule 44 (exprStmt)


State 295

   83 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 339
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 296

   75 minusFactor: ARTOP1 factor .

    RELOP   reduce using rule 75 (minusFactor)
    COMP    reduce using rule 75 (minusFactor)
    ARTOP1  reduce using rule 75 (minusFactor)
    ARTOP2  reduce using rule 75 (minusFactor)
    IN      reduce using rule 75 (minusFactor)
    DISJ    reduce using rule 75 (minusFactor)
    CONJ    reduce using rule 75 (minusFactor)
    ','     reduce using rule 75 (minusFactor)
    ')'     reduce using rule 75 (minusFactor)


State 297

   81 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 205
    ID       shift, and go to state 206
    IS_SET   shift, and go to state 207
    EXISTS   shift, and go to state 208
    INTEGER  shift, and go to state 209
    FLOAT    shift, and go to state 210
    EMPTY    shift, and go to state 211
    '('      shift, and go to state 212

    var       go to state 213
    factor    go to state 340
    constant  go to state 214
    call      go to state 215


State 298

   82 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181

    var          go to state 182
    simpleExpr   go to state 341
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 299

   65 negExpr: NEG negExpr .

    IN    reduce using rule 65 (negExpr)
    DISJ  reduce using rule 65 (negExpr)
    CONJ  reduce using rule 65 (negExpr)
    ','   reduce using rule 65 (negExpr)
    ')'   reduce using rule 65 (negExpr)


State 300

   59 simpleExpr: simpleExpr . IN conjExpr
   78 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 216
    ')'  shift, and go to state 342


State 301

   88 call: var $@4 . '(' params ')'

    '('  shift, and go to state 343


State 302

   61 conjExpr: conjExpr CONJ . disjExpr

    SETOP    shift, and go to state 232
    ARTOP1   shift, and go to state 233
    ID       shift, and go to state 234
    IS_SET   shift, and go to state 235
    EXISTS   shift, and go to state 236
    NEG      shift, and go to state 237
    INTEGER  shift, and go to state 238
    FLOAT    shift, and go to state 239
    EMPTY    shift, and go to state 240
    '('      shift, and go to state 241

    var          go to state 242
    disjExpr     go to state 344
    negExpr      go to state 245
    compExpr     go to state 246
    relExpr      go to state 247
    artExpr1     go to state 248
    artExpr2     go to state 249
    minusFactor  go to state 250
    factor       go to state 251
    constant     go to state 252
    call         go to state 253


State 303

   63 disjExpr: disjExpr DISJ . negExpr

    SETOP    shift, and go to state 232
    ARTOP1   shift, and go to state 233
    ID       shift, and go to state 234
    IS_SET   shift, and go to state 235
    EXISTS   shift, and go to state 236
    NEG      shift, and go to state 237
    INTEGER  shift, and go to state 238
    FLOAT    shift, and go to state 239
    EMPTY    shift, and go to state 240
    '('      shift, and go to state 241

    var          go to state 242
    negExpr      go to state 345
    compExpr     go to state 246
    relExpr      go to state 247
    artExpr1     go to state 248
    artExpr2     go to state 249
    minusFactor  go to state 250
    factor       go to state 251
    constant     go to state 252
    call         go to state 253


State 304

   67 compExpr: compExpr COMP . relExpr

    SETOP    shift, and go to state 232
    ARTOP1   shift, and go to state 233
    ID       shift, and go to state 234
    IS_SET   shift, and go to state 235
    EXISTS   shift, and go to state 236
    INTEGER  shift, and go to state 238
    FLOAT    shift, and go to state 239
    EMPTY    shift, and go to state 240
    '('      shift, and go to state 241

    var          go to state 242
    relExpr      go to state 346
    artExpr1     go to state 248
    artExpr2     go to state 249
    minusFactor  go to state 250
    factor       go to state 251
    constant     go to state 252
    call         go to state 253


State 305

   69 relExpr: relExpr RELOP . artExpr1

    SETOP    shift, and go to state 232
    ARTOP1   shift, and go to state 233
    ID       shift, and go to state 234
    IS_SET   shift, and go to state 235
    EXISTS   shift, and go to state 236
    INTEGER  shift, and go to state 238
    FLOAT    shift, and go to state 239
    EMPTY    shift, and go to state 240
    '('      shift, and go to state 241

    var          go to state 242
    artExpr1     go to state 347
    artExpr2     go to state 249
    minusFactor  go to state 250
    factor       go to state 251
    constant     go to state 252
    call         go to state 253


State 306

   71 artExpr1: artExpr1 ARTOP1 . artExpr2

    SETOP    shift, and go to state 232
    ARTOP1   shift, and go to state 233
    ID       shift, and go to state 234
    IS_SET   shift, and go to state 235
    EXISTS   shift, and go to state 236
    INTEGER  shift, and go to state 238
    FLOAT    shift, and go to state 239
    EMPTY    shift, and go to state 240
    '('      shift, and go to state 241

    var          go to state 242
    artExpr2     go to state 348
    minusFactor  go to state 250
    factor       go to state 251
    constant     go to state 252
    call         go to state 253


State 307

   73 artExpr2: artExpr2 ARTOP2 . minusFactor

    SETOP    shift, and go to state 232
    ARTOP1   shift, and go to state 233
    ID       shift, and go to state 234
    IS_SET   shift, and go to state 235
    EXISTS   shift, and go to state 236
    INTEGER  shift, and go to state 238
    FLOAT    shift, and go to state 239
    EMPTY    shift, and go to state 240
    '('      shift, and go to state 241

    var          go to state 242
    minusFactor  go to state 349
    factor       go to state 251
    constant     go to state 252
    call         go to state 253


State 308

   59 simpleExpr: simpleExpr IN conjExpr .
   61 conjExpr: conjExpr . CONJ disjExpr

    CONJ  shift, and go to state 302

    IN   reduce using rule 59 (simpleExpr)
    ','  reduce using rule 59 (simpleExpr)
    ')'  reduce using rule 59 (simpleExpr)


State 309

   21 funcBody: funcBody . varDecl
   22         | funcBody . funcDecl
   23         | funcBody . stmt
   33 body: '{' funcBody . '}'

    error    shift, and go to state 32
    TYPE     shift, and go to state 170
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    RETURN   shift, and go to state 38
    FORALL   shift, and go to state 39
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 49
    '}'      shift, and go to state 350
    '('      shift, and go to state 51

    varDecl      go to state 52
    funcDecl     go to state 53
    stmt         go to state 54
    iterStmt     go to state 55
    condStmt     go to state 56
    returnStmt   go to state 57
    exprStmt     go to state 58
    expression   go to state 59
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 310

   13 funcDecl: TYPE ID $@1 . arguments $@2 '{' funcBody '}'

    '('  shift, and go to state 15

    arguments  go to state 351


State 311

    6 varDecl: TYPE varList ';' .

    error    reduce using rule 6 (varDecl)
    TYPE     reduce using rule 6 (varDecl)
    SETOP    reduce using rule 6 (varDecl)
    ARTOP1   reduce using rule 6 (varDecl)
    ID       reduce using rule 6 (varDecl)
    IF       reduce using rule 6 (varDecl)
    FOR      reduce using rule 6 (varDecl)
    RETURN   reduce using rule 6 (varDecl)
    FORALL   reduce using rule 6 (varDecl)
    IS_SET   reduce using rule 6 (varDecl)
    EXISTS   reduce using rule 6 (varDecl)
    NEG      reduce using rule 6 (varDecl)
    READ     reduce using rule 6 (varDecl)
    WRITE    reduce using rule 6 (varDecl)
    WRITELN  reduce using rule 6 (varDecl)
    INTEGER  reduce using rule 6 (varDecl)
    FLOAT    reduce using rule 6 (varDecl)
    EMPTY    reduce using rule 6 (varDecl)
    ';'      reduce using rule 6 (varDecl)
    '}'      reduce using rule 6 (varDecl)
    '('      reduce using rule 6 (varDecl)


State 312

   59 simpleExpr: simpleExpr . IN conjExpr
   83 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 216
    ')'  shift, and go to state 352


State 313

   81 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 353


State 314

   59 simpleExpr: simpleExpr . IN conjExpr
   82 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 216
    ')'  shift, and go to state 354


State 315

   78 factor: '(' simpleExpr ')' .

    RELOP   reduce using rule 78 (factor)
    COMP    reduce using rule 78 (factor)
    ARTOP1  reduce using rule 78 (factor)
    ARTOP2  reduce using rule 78 (factor)
    IN      reduce using rule 78 (factor)
    DISJ    reduce using rule 78 (factor)
    CONJ    reduce using rule 78 (factor)
    ')'     reduce using rule 78 (factor)


State 316

   88 call: var $@4 '(' . params ')'

    SETOP    shift, and go to state 232
    ARTOP1   shift, and go to state 233
    ID       shift, and go to state 234
    IS_SET   shift, and go to state 235
    EXISTS   shift, and go to state 236
    NEG      shift, and go to state 237
    INTEGER  shift, and go to state 238
    FLOAT    shift, and go to state 239
    EMPTY    shift, and go to state 240
    '('      shift, and go to state 241

    ')'  reduce using rule 89 (params)

    var          go to state 242
    simpleExpr   go to state 145
    conjExpr     go to state 243
    disjExpr     go to state 244
    negExpr      go to state 245
    compExpr     go to state 246
    relExpr      go to state 247
    artExpr1     go to state 248
    artExpr2     go to state 249
    minusFactor  go to state 250
    factor       go to state 251
    constant     go to state 252
    call         go to state 253
    params       go to state 355
    paramList    go to state 147


State 317

   61 conjExpr: conjExpr CONJ disjExpr .
   63 disjExpr: disjExpr . DISJ negExpr

    DISJ  shift, and go to state 270

    IN    reduce using rule 61 (conjExpr)
    CONJ  reduce using rule 61 (conjExpr)
    ')'   reduce using rule 61 (conjExpr)


State 318

   63 disjExpr: disjExpr DISJ negExpr .

    IN    reduce using rule 63 (disjExpr)
    DISJ  reduce using rule 63 (disjExpr)
    CONJ  reduce using rule 63 (disjExpr)
    ')'   reduce using rule 63 (disjExpr)


State 319

   67 compExpr: compExpr COMP relExpr .
   69 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 272

    COMP  reduce using rule 67 (compExpr)
    IN    reduce using rule 67 (compExpr)
    DISJ  reduce using rule 67 (compExpr)
    CONJ  reduce using rule 67 (compExpr)
    ')'   reduce using rule 67 (compExpr)


State 320

   69 relExpr: relExpr RELOP artExpr1 .
   71 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 273

    RELOP  reduce using rule 69 (relExpr)
    COMP   reduce using rule 69 (relExpr)
    IN     reduce using rule 69 (relExpr)
    DISJ   reduce using rule 69 (relExpr)
    CONJ   reduce using rule 69 (relExpr)
    ')'    reduce using rule 69 (relExpr)


State 321

   71 artExpr1: artExpr1 ARTOP1 artExpr2 .
   73 artExpr2: artExpr2 . ARTOP2 minusFactor

    ARTOP2  shift, and go to state 274

    RELOP   reduce using rule 71 (artExpr1)
    COMP    reduce using rule 71 (artExpr1)
    ARTOP1  reduce using rule 71 (artExpr1)
    IN      reduce using rule 71 (artExpr1)
    DISJ    reduce using rule 71 (artExpr1)
    CONJ    reduce using rule 71 (artExpr1)
    ')'     reduce using rule 71 (artExpr1)


State 322

   73 artExpr2: artExpr2 ARTOP2 minusFactor .

    RELOP   reduce using rule 73 (artExpr2)
    COMP    reduce using rule 73 (artExpr2)
    ARTOP1  reduce using rule 73 (artExpr2)
    ARTOP2  reduce using rule 73 (artExpr2)
    IN      reduce using rule 73 (artExpr2)
    DISJ    reduce using rule 73 (artExpr2)
    CONJ    reduce using rule 73 (artExpr2)
    ')'     reduce using rule 73 (artExpr2)


State 323

   53 inExpr: READ '(' var . ')'

    ')'  shift, and go to state 356


State 324

   54 outExpr: WRITE '(' output . ')'

    ')'  shift, and go to state 357


State 325

   55 outExpr: WRITELN '(' output . ')'

    ')'  shift, and go to state 358


State 326

   51 assign: var '=' simpleExpr .
   59 simpleExpr: simpleExpr . IN conjExpr

    IN  shift, and go to state 216

    ')'  reduce using rule 51 (assign)


State 327

   59 simpleExpr: simpleExpr . IN conjExpr
   83 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 216
    ')'  shift, and go to state 359


State 328

   81 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 360


State 329

   59 simpleExpr: simpleExpr . IN conjExpr
   82 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 216
    ')'  shift, and go to state 361


State 330

   78 factor: '(' simpleExpr ')' .

    ')'  reduce using rule 78 (factor)


State 331

   88 call: var $@4 '(' . params ')'

    SETOP    shift, and go to state 232
    ARTOP1   shift, and go to state 233
    ID       shift, and go to state 234
    IS_SET   shift, and go to state 235
    EXISTS   shift, and go to state 236
    NEG      shift, and go to state 237
    INTEGER  shift, and go to state 238
    FLOAT    shift, and go to state 239
    EMPTY    shift, and go to state 240
    '('      shift, and go to state 241

    ')'  reduce using rule 89 (params)

    var          go to state 242
    simpleExpr   go to state 145
    conjExpr     go to state 243
    disjExpr     go to state 244
    negExpr      go to state 245
    compExpr     go to state 246
    relExpr      go to state 247
    artExpr1     go to state 248
    artExpr2     go to state 249
    minusFactor  go to state 250
    factor       go to state 251
    constant     go to state 252
    call         go to state 253
    params       go to state 362
    paramList    go to state 147


State 332

   13 funcDecl: TYPE ID $@1 . arguments $@2 '{' funcBody '}'

    '('  shift, and go to state 15

    arguments  go to state 363


State 333

    6 varDecl: TYPE varList ';' .

    error    reduce using rule 6 (varDecl)
    TYPE     reduce using rule 6 (varDecl)
    SETOP    reduce using rule 6 (varDecl)
    ARTOP1   reduce using rule 6 (varDecl)
    ID       reduce using rule 6 (varDecl)
    IF       reduce using rule 6 (varDecl)
    ELSE     reduce using rule 6 (varDecl)
    FOR      reduce using rule 6 (varDecl)
    RETURN   reduce using rule 6 (varDecl)
    FORALL   reduce using rule 6 (varDecl)
    IS_SET   reduce using rule 6 (varDecl)
    EXISTS   reduce using rule 6 (varDecl)
    NEG      reduce using rule 6 (varDecl)
    READ     reduce using rule 6 (varDecl)
    WRITE    reduce using rule 6 (varDecl)
    WRITELN  reduce using rule 6 (varDecl)
    INTEGER  reduce using rule 6 (varDecl)
    FLOAT    reduce using rule 6 (varDecl)
    EMPTY    reduce using rule 6 (varDecl)
    ';'      reduce using rule 6 (varDecl)
    '}'      reduce using rule 6 (varDecl)
    '('      reduce using rule 6 (varDecl)


State 334

   37 condStmt: IF cond prepareScope . body
   39         | IF cond prepareScope . body ELSE $@3 prepareScope body

    error    shift, and go to state 217
    TYPE     shift, and go to state 218
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 219
    FOR      shift, and go to state 220
    RETURN   shift, and go to state 221
    FORALL   shift, and go to state 222
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 223
    '{'      shift, and go to state 131
    '('      shift, and go to state 51

    varDecl      go to state 132
    funcDecl     go to state 133
    stmt         go to state 134
    iterStmt     go to state 224
    body         go to state 364
    condStmt     go to state 225
    returnStmt   go to state 226
    exprStmt     go to state 227
    expression   go to state 228
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 335

   32 iterStmt: FOR '(' error . ')' prepareScope body
   45 exprStmt: error .

    ')'  shift, and go to state 365

    error    reduce using rule 45 (exprStmt)
    SETOP    reduce using rule 45 (exprStmt)
    ARTOP1   reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    ';'      reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)


State 336

   28 iterStmt: FOR '(' exprStmt . exprStmt ')' prepareScope body
   29         | FOR '(' exprStmt . exprStmt expression ')' prepareScope body

    error    shift, and go to state 229
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 230
    '('      shift, and go to state 51

    exprStmt     go to state 366
    expression   go to state 231
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 337

   31 iterStmt: FORALL '(' error . ')' prepareScope body

    ')'  shift, and go to state 367


State 338

   30 iterStmt: FORALL '(' simpleExpr . ')' prepareScope body
   59 simpleExpr: simpleExpr . IN conjExpr

    IN   shift, and go to state 216
    ')'  shift, and go to state 368


State 339

   59 simpleExpr: simpleExpr . IN conjExpr
   83 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 216
    ')'  shift, and go to state 369


State 340

   81 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 370


State 341

   59 simpleExpr: simpleExpr . IN conjExpr
   82 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 216
    ')'  shift, and go to state 371


State 342

   78 factor: '(' simpleExpr ')' .

    RELOP   reduce using rule 78 (factor)
    COMP    reduce using rule 78 (factor)
    ARTOP1  reduce using rule 78 (factor)
    ARTOP2  reduce using rule 78 (factor)
    IN      reduce using rule 78 (factor)
    DISJ    reduce using rule 78 (factor)
    CONJ    reduce using rule 78 (factor)
    ','     reduce using rule 78 (factor)
    ')'     reduce using rule 78 (factor)


State 343

   88 call: var $@4 '(' . params ')'

    SETOP    shift, and go to state 232
    ARTOP1   shift, and go to state 233
    ID       shift, and go to state 234
    IS_SET   shift, and go to state 235
    EXISTS   shift, and go to state 236
    NEG      shift, and go to state 237
    INTEGER  shift, and go to state 238
    FLOAT    shift, and go to state 239
    EMPTY    shift, and go to state 240
    '('      shift, and go to state 241

    ')'  reduce using rule 89 (params)

    var          go to state 242
    simpleExpr   go to state 145
    conjExpr     go to state 243
    disjExpr     go to state 244
    negExpr      go to state 245
    compExpr     go to state 246
    relExpr      go to state 247
    artExpr1     go to state 248
    artExpr2     go to state 249
    minusFactor  go to state 250
    factor       go to state 251
    constant     go to state 252
    call         go to state 253
    params       go to state 372
    paramList    go to state 147


State 344

   61 conjExpr: conjExpr CONJ disjExpr .
   63 disjExpr: disjExpr . DISJ negExpr

    DISJ  shift, and go to state 303

    IN    reduce using rule 61 (conjExpr)
    CONJ  reduce using rule 61 (conjExpr)
    ','   reduce using rule 61 (conjExpr)
    ')'   reduce using rule 61 (conjExpr)


State 345

   63 disjExpr: disjExpr DISJ negExpr .

    IN    reduce using rule 63 (disjExpr)
    DISJ  reduce using rule 63 (disjExpr)
    CONJ  reduce using rule 63 (disjExpr)
    ','   reduce using rule 63 (disjExpr)
    ')'   reduce using rule 63 (disjExpr)


State 346

   67 compExpr: compExpr COMP relExpr .
   69 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 305

    COMP  reduce using rule 67 (compExpr)
    IN    reduce using rule 67 (compExpr)
    DISJ  reduce using rule 67 (compExpr)
    CONJ  reduce using rule 67 (compExpr)
    ','   reduce using rule 67 (compExpr)
    ')'   reduce using rule 67 (compExpr)


State 347

   69 relExpr: relExpr RELOP artExpr1 .
   71 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 306

    RELOP  reduce using rule 69 (relExpr)
    COMP   reduce using rule 69 (relExpr)
    IN     reduce using rule 69 (relExpr)
    DISJ   reduce using rule 69 (relExpr)
    CONJ   reduce using rule 69 (relExpr)
    ','    reduce using rule 69 (relExpr)
    ')'    reduce using rule 69 (relExpr)


State 348

   71 artExpr1: artExpr1 ARTOP1 artExpr2 .
   73 artExpr2: artExpr2 . ARTOP2 minusFactor

    ARTOP2  shift, and go to state 307

    RELOP   reduce using rule 71 (artExpr1)
    COMP    reduce using rule 71 (artExpr1)
    ARTOP1  reduce using rule 71 (artExpr1)
    IN      reduce using rule 71 (artExpr1)
    DISJ    reduce using rule 71 (artExpr1)
    CONJ    reduce using rule 71 (artExpr1)
    ','     reduce using rule 71 (artExpr1)
    ')'     reduce using rule 71 (artExpr1)


State 349

   73 artExpr2: artExpr2 ARTOP2 minusFactor .

    RELOP   reduce using rule 73 (artExpr2)
    COMP    reduce using rule 73 (artExpr2)
    ARTOP1  reduce using rule 73 (artExpr2)
    ARTOP2  reduce using rule 73 (artExpr2)
    IN      reduce using rule 73 (artExpr2)
    DISJ    reduce using rule 73 (artExpr2)
    CONJ    reduce using rule 73 (artExpr2)
    ','     reduce using rule 73 (artExpr2)
    ')'     reduce using rule 73 (artExpr2)


State 350

   33 body: '{' funcBody '}' .

    error    reduce using rule 33 (body)
    TYPE     reduce using rule 33 (body)
    SETOP    reduce using rule 33 (body)
    ARTOP1   reduce using rule 33 (body)
    ID       reduce using rule 33 (body)
    IF       reduce using rule 33 (body)
    FOR      reduce using rule 33 (body)
    RETURN   reduce using rule 33 (body)
    FORALL   reduce using rule 33 (body)
    IS_SET   reduce using rule 33 (body)
    EXISTS   reduce using rule 33 (body)
    NEG      reduce using rule 33 (body)
    READ     reduce using rule 33 (body)
    WRITE    reduce using rule 33 (body)
    WRITELN  reduce using rule 33 (body)
    INTEGER  reduce using rule 33 (body)
    FLOAT    reduce using rule 33 (body)
    EMPTY    reduce using rule 33 (body)
    ';'      reduce using rule 33 (body)
    '}'      reduce using rule 33 (body)
    '('      reduce using rule 33 (body)


State 351

   13 funcDecl: TYPE ID $@1 arguments . $@2 '{' funcBody '}'

    '{'  reduce using rule 12 ($@2)

    $@2  go to state 373


State 352

   83 factor: SETOP '(' simpleExpr ')' .

    RELOP   reduce using rule 83 (factor)
    COMP    reduce using rule 83 (factor)
    ARTOP1  reduce using rule 83 (factor)
    ARTOP2  reduce using rule 83 (factor)
    IN      reduce using rule 83 (factor)
    DISJ    reduce using rule 83 (factor)
    CONJ    reduce using rule 83 (factor)
    ')'     reduce using rule 83 (factor)


State 353

   81 factor: IS_SET '(' factor ')' .

    RELOP   reduce using rule 81 (factor)
    COMP    reduce using rule 81 (factor)
    ARTOP1  reduce using rule 81 (factor)
    ARTOP2  reduce using rule 81 (factor)
    IN      reduce using rule 81 (factor)
    DISJ    reduce using rule 81 (factor)
    CONJ    reduce using rule 81 (factor)
    ')'     reduce using rule 81 (factor)


State 354

   82 factor: EXISTS '(' simpleExpr ')' .

    RELOP   reduce using rule 82 (factor)
    COMP    reduce using rule 82 (factor)
    ARTOP1  reduce using rule 82 (factor)
    ARTOP2  reduce using rule 82 (factor)
    IN      reduce using rule 82 (factor)
    DISJ    reduce using rule 82 (factor)
    CONJ    reduce using rule 82 (factor)
    ')'     reduce using rule 82 (factor)


State 355

   88 call: var $@4 '(' params . ')'

    ')'  shift, and go to state 374


State 356

   53 inExpr: READ '(' var ')' .

    ')'  reduce using rule 53 (inExpr)


State 357

   54 outExpr: WRITE '(' output ')' .

    ')'  reduce using rule 54 (outExpr)


State 358

   55 outExpr: WRITELN '(' output ')' .

    ')'  reduce using rule 55 (outExpr)


State 359

   83 factor: SETOP '(' simpleExpr ')' .

    ')'  reduce using rule 83 (factor)


State 360

   81 factor: IS_SET '(' factor ')' .

    ')'  reduce using rule 81 (factor)


State 361

   82 factor: EXISTS '(' simpleExpr ')' .

    ')'  reduce using rule 82 (factor)


State 362

   88 call: var $@4 '(' params . ')'

    ')'  shift, and go to state 375


State 363

   13 funcDecl: TYPE ID $@1 arguments . $@2 '{' funcBody '}'

    '{'  reduce using rule 12 ($@2)

    $@2  go to state 376


State 364

   37 condStmt: IF cond prepareScope body .
   39         | IF cond prepareScope body . ELSE $@3 prepareScope body

    ELSE  shift, and go to state 377

    error    reduce using rule 37 (condStmt)
    TYPE     reduce using rule 37 (condStmt)
    SETOP    reduce using rule 37 (condStmt)
    ARTOP1   reduce using rule 37 (condStmt)
    ID       reduce using rule 37 (condStmt)
    IF       reduce using rule 37 (condStmt)
    FOR      reduce using rule 37 (condStmt)
    RETURN   reduce using rule 37 (condStmt)
    FORALL   reduce using rule 37 (condStmt)
    IS_SET   reduce using rule 37 (condStmt)
    EXISTS   reduce using rule 37 (condStmt)
    NEG      reduce using rule 37 (condStmt)
    READ     reduce using rule 37 (condStmt)
    WRITE    reduce using rule 37 (condStmt)
    WRITELN  reduce using rule 37 (condStmt)
    INTEGER  reduce using rule 37 (condStmt)
    FLOAT    reduce using rule 37 (condStmt)
    EMPTY    reduce using rule 37 (condStmt)
    ';'      reduce using rule 37 (condStmt)
    '}'      reduce using rule 37 (condStmt)
    '('      reduce using rule 37 (condStmt)


State 365

   32 iterStmt: FOR '(' error ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 378


State 366

   28 iterStmt: FOR '(' exprStmt exprStmt . ')' prepareScope body
   29         | FOR '(' exprStmt exprStmt . expression ')' prepareScope body

    SETOP    shift, and go to state 172
    ARTOP1   shift, and go to state 173
    ID       shift, and go to state 194
    IS_SET   shift, and go to state 175
    EXISTS   shift, and go to state 176
    NEG      shift, and go to state 177
    READ     shift, and go to state 195
    WRITE    shift, and go to state 196
    WRITELN  shift, and go to state 197
    INTEGER  shift, and go to state 178
    FLOAT    shift, and go to state 179
    EMPTY    shift, and go to state 180
    '('      shift, and go to state 181
    ')'      shift, and go to state 379

    expression   go to state 380
    assign       go to state 198
    var          go to state 199
    inExpr       go to state 200
    outExpr      go to state 201
    simpleExpr   go to state 202
    conjExpr     go to state 183
    disjExpr     go to state 184
    negExpr      go to state 185
    compExpr     go to state 186
    relExpr      go to state 187
    artExpr1     go to state 188
    artExpr2     go to state 189
    minusFactor  go to state 190
    factor       go to state 191
    constant     go to state 192
    call         go to state 193


State 367

   31 iterStmt: FORALL '(' error ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 381


State 368

   30 iterStmt: FORALL '(' simpleExpr ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 382


State 369

   83 factor: SETOP '(' simpleExpr ')' .

    RELOP   reduce using rule 83 (factor)
    COMP    reduce using rule 83 (factor)
    ARTOP1  reduce using rule 83 (factor)
    ARTOP2  reduce using rule 83 (factor)
    IN      reduce using rule 83 (factor)
    DISJ    reduce using rule 83 (factor)
    CONJ    reduce using rule 83 (factor)
    ','     reduce using rule 83 (factor)
    ')'     reduce using rule 83 (factor)


State 370

   81 factor: IS_SET '(' factor ')' .

    RELOP   reduce using rule 81 (factor)
    COMP    reduce using rule 81 (factor)
    ARTOP1  reduce using rule 81 (factor)
    ARTOP2  reduce using rule 81 (factor)
    IN      reduce using rule 81 (factor)
    DISJ    reduce using rule 81 (factor)
    CONJ    reduce using rule 81 (factor)
    ','     reduce using rule 81 (factor)
    ')'     reduce using rule 81 (factor)


State 371

   82 factor: EXISTS '(' simpleExpr ')' .

    RELOP   reduce using rule 82 (factor)
    COMP    reduce using rule 82 (factor)
    ARTOP1  reduce using rule 82 (factor)
    ARTOP2  reduce using rule 82 (factor)
    IN      reduce using rule 82 (factor)
    DISJ    reduce using rule 82 (factor)
    CONJ    reduce using rule 82 (factor)
    ','     reduce using rule 82 (factor)
    ')'     reduce using rule 82 (factor)


State 372

   88 call: var $@4 '(' params . ')'

    ')'  shift, and go to state 383


State 373

   13 funcDecl: TYPE ID $@1 arguments $@2 . '{' funcBody '}'

    '{'  shift, and go to state 384


State 374

   88 call: var $@4 '(' params ')' .

    RELOP   reduce using rule 88 (call)
    COMP    reduce using rule 88 (call)
    ARTOP1  reduce using rule 88 (call)
    ARTOP2  reduce using rule 88 (call)
    IN      reduce using rule 88 (call)
    DISJ    reduce using rule 88 (call)
    CONJ    reduce using rule 88 (call)
    ')'     reduce using rule 88 (call)


State 375

   88 call: var $@4 '(' params ')' .

    ')'  reduce using rule 88 (call)


State 376

   13 funcDecl: TYPE ID $@1 arguments $@2 . '{' funcBody '}'

    '{'  shift, and go to state 385


State 377

   39 condStmt: IF cond prepareScope body ELSE . $@3 prepareScope body

    error    reduce using rule 38 ($@3)
    TYPE     reduce using rule 38 ($@3)
    SETOP    reduce using rule 38 ($@3)
    ARTOP1   reduce using rule 38 ($@3)
    ID       reduce using rule 38 ($@3)
    IF       reduce using rule 38 ($@3)
    FOR      reduce using rule 38 ($@3)
    RETURN   reduce using rule 38 ($@3)
    FORALL   reduce using rule 38 ($@3)
    IS_SET   reduce using rule 38 ($@3)
    EXISTS   reduce using rule 38 ($@3)
    NEG      reduce using rule 38 ($@3)
    READ     reduce using rule 38 ($@3)
    WRITE    reduce using rule 38 ($@3)
    WRITELN  reduce using rule 38 ($@3)
    INTEGER  reduce using rule 38 ($@3)
    FLOAT    reduce using rule 38 ($@3)
    EMPTY    reduce using rule 38 ($@3)
    ';'      reduce using rule 38 ($@3)
    '{'      reduce using rule 38 ($@3)
    '('      reduce using rule 38 ($@3)

    $@3  go to state 386


State 378

   32 iterStmt: FOR '(' error ')' prepareScope . body

    error    shift, and go to state 217
    TYPE     shift, and go to state 218
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 219
    FOR      shift, and go to state 220
    RETURN   shift, and go to state 221
    FORALL   shift, and go to state 222
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 223
    '{'      shift, and go to state 131
    '('      shift, and go to state 51

    varDecl      go to state 132
    funcDecl     go to state 133
    stmt         go to state 134
    iterStmt     go to state 224
    body         go to state 387
    condStmt     go to state 225
    returnStmt   go to state 226
    exprStmt     go to state 227
    expression   go to state 228
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 379

   28 iterStmt: FOR '(' exprStmt exprStmt ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 388


State 380

   29 iterStmt: FOR '(' exprStmt exprStmt expression . ')' prepareScope body

    ')'  shift, and go to state 389


State 381

   31 iterStmt: FORALL '(' error ')' prepareScope . body

    error    shift, and go to state 217
    TYPE     shift, and go to state 218
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 219
    FOR      shift, and go to state 220
    RETURN   shift, and go to state 221
    FORALL   shift, and go to state 222
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 223
    '{'      shift, and go to state 131
    '('      shift, and go to state 51

    varDecl      go to state 132
    funcDecl     go to state 133
    stmt         go to state 134
    iterStmt     go to state 224
    body         go to state 390
    condStmt     go to state 225
    returnStmt   go to state 226
    exprStmt     go to state 227
    expression   go to state 228
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 382

   30 iterStmt: FORALL '(' simpleExpr ')' prepareScope . body

    error    shift, and go to state 217
    TYPE     shift, and go to state 218
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 219
    FOR      shift, and go to state 220
    RETURN   shift, and go to state 221
    FORALL   shift, and go to state 222
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 223
    '{'      shift, and go to state 131
    '('      shift, and go to state 51

    varDecl      go to state 132
    funcDecl     go to state 133
    stmt         go to state 134
    iterStmt     go to state 224
    body         go to state 391
    condStmt     go to state 225
    returnStmt   go to state 226
    exprStmt     go to state 227
    expression   go to state 228
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 383

   88 call: var $@4 '(' params ')' .

    RELOP   reduce using rule 88 (call)
    COMP    reduce using rule 88 (call)
    ARTOP1  reduce using rule 88 (call)
    ARTOP2  reduce using rule 88 (call)
    IN      reduce using rule 88 (call)
    DISJ    reduce using rule 88 (call)
    CONJ    reduce using rule 88 (call)
    ','     reduce using rule 88 (call)
    ')'     reduce using rule 88 (call)


State 384

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' . funcBody '}'

    error    reduce using rule 20 (funcBody)
    TYPE     reduce using rule 20 (funcBody)
    SETOP    reduce using rule 20 (funcBody)
    ARTOP1   reduce using rule 20 (funcBody)
    ID       reduce using rule 20 (funcBody)
    IF       reduce using rule 20 (funcBody)
    FOR      reduce using rule 20 (funcBody)
    RETURN   reduce using rule 20 (funcBody)
    FORALL   reduce using rule 20 (funcBody)
    IS_SET   reduce using rule 20 (funcBody)
    EXISTS   reduce using rule 20 (funcBody)
    NEG      reduce using rule 20 (funcBody)
    READ     reduce using rule 20 (funcBody)
    WRITE    reduce using rule 20 (funcBody)
    WRITELN  reduce using rule 20 (funcBody)
    INTEGER  reduce using rule 20 (funcBody)
    FLOAT    reduce using rule 20 (funcBody)
    EMPTY    reduce using rule 20 (funcBody)
    ';'      reduce using rule 20 (funcBody)
    '}'      reduce using rule 20 (funcBody)
    '('      reduce using rule 20 (funcBody)

    funcBody  go to state 392


State 385

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' . funcBody '}'

    error    reduce using rule 20 (funcBody)
    TYPE     reduce using rule 20 (funcBody)
    SETOP    reduce using rule 20 (funcBody)
    ARTOP1   reduce using rule 20 (funcBody)
    ID       reduce using rule 20 (funcBody)
    IF       reduce using rule 20 (funcBody)
    FOR      reduce using rule 20 (funcBody)
    RETURN   reduce using rule 20 (funcBody)
    FORALL   reduce using rule 20 (funcBody)
    IS_SET   reduce using rule 20 (funcBody)
    EXISTS   reduce using rule 20 (funcBody)
    NEG      reduce using rule 20 (funcBody)
    READ     reduce using rule 20 (funcBody)
    WRITE    reduce using rule 20 (funcBody)
    WRITELN  reduce using rule 20 (funcBody)
    INTEGER  reduce using rule 20 (funcBody)
    FLOAT    reduce using rule 20 (funcBody)
    EMPTY    reduce using rule 20 (funcBody)
    ';'      reduce using rule 20 (funcBody)
    '}'      reduce using rule 20 (funcBody)
    '('      reduce using rule 20 (funcBody)

    funcBody  go to state 393


State 386

   39 condStmt: IF cond prepareScope body ELSE $@3 . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 394


State 387

   32 iterStmt: FOR '(' error ')' prepareScope body .

    error    reduce using rule 32 (iterStmt)
    TYPE     reduce using rule 32 (iterStmt)
    SETOP    reduce using rule 32 (iterStmt)
    ARTOP1   reduce using rule 32 (iterStmt)
    ID       reduce using rule 32 (iterStmt)
    IF       reduce using rule 32 (iterStmt)
    ELSE     reduce using rule 32 (iterStmt)
    FOR      reduce using rule 32 (iterStmt)
    RETURN   reduce using rule 32 (iterStmt)
    FORALL   reduce using rule 32 (iterStmt)
    IS_SET   reduce using rule 32 (iterStmt)
    EXISTS   reduce using rule 32 (iterStmt)
    NEG      reduce using rule 32 (iterStmt)
    READ     reduce using rule 32 (iterStmt)
    WRITE    reduce using rule 32 (iterStmt)
    WRITELN  reduce using rule 32 (iterStmt)
    INTEGER  reduce using rule 32 (iterStmt)
    FLOAT    reduce using rule 32 (iterStmt)
    EMPTY    reduce using rule 32 (iterStmt)
    ';'      reduce using rule 32 (iterStmt)
    '}'      reduce using rule 32 (iterStmt)
    '('      reduce using rule 32 (iterStmt)


State 388

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope . body

    error    shift, and go to state 217
    TYPE     shift, and go to state 218
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 219
    FOR      shift, and go to state 220
    RETURN   shift, and go to state 221
    FORALL   shift, and go to state 222
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 223
    '{'      shift, and go to state 131
    '('      shift, and go to state 51

    varDecl      go to state 132
    funcDecl     go to state 133
    stmt         go to state 134
    iterStmt     go to state 224
    body         go to state 395
    condStmt     go to state 225
    returnStmt   go to state 226
    exprStmt     go to state 227
    expression   go to state 228
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 389

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 396


State 390

   31 iterStmt: FORALL '(' error ')' prepareScope body .

    error    reduce using rule 31 (iterStmt)
    TYPE     reduce using rule 31 (iterStmt)
    SETOP    reduce using rule 31 (iterStmt)
    ARTOP1   reduce using rule 31 (iterStmt)
    ID       reduce using rule 31 (iterStmt)
    IF       reduce using rule 31 (iterStmt)
    ELSE     reduce using rule 31 (iterStmt)
    FOR      reduce using rule 31 (iterStmt)
    RETURN   reduce using rule 31 (iterStmt)
    FORALL   reduce using rule 31 (iterStmt)
    IS_SET   reduce using rule 31 (iterStmt)
    EXISTS   reduce using rule 31 (iterStmt)
    NEG      reduce using rule 31 (iterStmt)
    READ     reduce using rule 31 (iterStmt)
    WRITE    reduce using rule 31 (iterStmt)
    WRITELN  reduce using rule 31 (iterStmt)
    INTEGER  reduce using rule 31 (iterStmt)
    FLOAT    reduce using rule 31 (iterStmt)
    EMPTY    reduce using rule 31 (iterStmt)
    ';'      reduce using rule 31 (iterStmt)
    '}'      reduce using rule 31 (iterStmt)
    '('      reduce using rule 31 (iterStmt)


State 391

   30 iterStmt: FORALL '(' simpleExpr ')' prepareScope body .

    error    reduce using rule 30 (iterStmt)
    TYPE     reduce using rule 30 (iterStmt)
    SETOP    reduce using rule 30 (iterStmt)
    ARTOP1   reduce using rule 30 (iterStmt)
    ID       reduce using rule 30 (iterStmt)
    IF       reduce using rule 30 (iterStmt)
    ELSE     reduce using rule 30 (iterStmt)
    FOR      reduce using rule 30 (iterStmt)
    RETURN   reduce using rule 30 (iterStmt)
    FORALL   reduce using rule 30 (iterStmt)
    IS_SET   reduce using rule 30 (iterStmt)
    EXISTS   reduce using rule 30 (iterStmt)
    NEG      reduce using rule 30 (iterStmt)
    READ     reduce using rule 30 (iterStmt)
    WRITE    reduce using rule 30 (iterStmt)
    WRITELN  reduce using rule 30 (iterStmt)
    INTEGER  reduce using rule 30 (iterStmt)
    FLOAT    reduce using rule 30 (iterStmt)
    EMPTY    reduce using rule 30 (iterStmt)
    ';'      reduce using rule 30 (iterStmt)
    '}'      reduce using rule 30 (iterStmt)
    '('      reduce using rule 30 (iterStmt)


State 392

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody . '}'
   21 funcBody: funcBody . varDecl
   22         | funcBody . funcDecl
   23         | funcBody . stmt

    error    shift, and go to state 32
    TYPE     shift, and go to state 170
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    RETURN   shift, and go to state 38
    FORALL   shift, and go to state 39
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 49
    '}'      shift, and go to state 397
    '('      shift, and go to state 51

    varDecl      go to state 52
    funcDecl     go to state 53
    stmt         go to state 54
    iterStmt     go to state 55
    condStmt     go to state 56
    returnStmt   go to state 57
    exprStmt     go to state 58
    expression   go to state 59
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 393

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody . '}'
   21 funcBody: funcBody . varDecl
   22         | funcBody . funcDecl
   23         | funcBody . stmt

    error    shift, and go to state 32
    TYPE     shift, and go to state 170
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 36
    FOR      shift, and go to state 37
    RETURN   shift, and go to state 38
    FORALL   shift, and go to state 39
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 49
    '}'      shift, and go to state 398
    '('      shift, and go to state 51

    varDecl      go to state 52
    funcDecl     go to state 53
    stmt         go to state 54
    iterStmt     go to state 55
    condStmt     go to state 56
    returnStmt   go to state 57
    exprStmt     go to state 58
    expression   go to state 59
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 394

   39 condStmt: IF cond prepareScope body ELSE $@3 prepareScope . body

    error    shift, and go to state 217
    TYPE     shift, and go to state 218
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 219
    FOR      shift, and go to state 220
    RETURN   shift, and go to state 221
    FORALL   shift, and go to state 222
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 223
    '{'      shift, and go to state 131
    '('      shift, and go to state 51

    varDecl      go to state 132
    funcDecl     go to state 133
    stmt         go to state 134
    iterStmt     go to state 224
    body         go to state 399
    condStmt     go to state 225
    returnStmt   go to state 226
    exprStmt     go to state 227
    expression   go to state 228
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 395

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope body .

    error    reduce using rule 28 (iterStmt)
    TYPE     reduce using rule 28 (iterStmt)
    SETOP    reduce using rule 28 (iterStmt)
    ARTOP1   reduce using rule 28 (iterStmt)
    ID       reduce using rule 28 (iterStmt)
    IF       reduce using rule 28 (iterStmt)
    ELSE     reduce using rule 28 (iterStmt)
    FOR      reduce using rule 28 (iterStmt)
    RETURN   reduce using rule 28 (iterStmt)
    FORALL   reduce using rule 28 (iterStmt)
    IS_SET   reduce using rule 28 (iterStmt)
    EXISTS   reduce using rule 28 (iterStmt)
    NEG      reduce using rule 28 (iterStmt)
    READ     reduce using rule 28 (iterStmt)
    WRITE    reduce using rule 28 (iterStmt)
    WRITELN  reduce using rule 28 (iterStmt)
    INTEGER  reduce using rule 28 (iterStmt)
    FLOAT    reduce using rule 28 (iterStmt)
    EMPTY    reduce using rule 28 (iterStmt)
    ';'      reduce using rule 28 (iterStmt)
    '}'      reduce using rule 28 (iterStmt)
    '('      reduce using rule 28 (iterStmt)


State 396

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' prepareScope . body

    error    shift, and go to state 217
    TYPE     shift, and go to state 218
    SETOP    shift, and go to state 33
    ARTOP1   shift, and go to state 34
    ID       shift, and go to state 35
    IF       shift, and go to state 219
    FOR      shift, and go to state 220
    RETURN   shift, and go to state 221
    FORALL   shift, and go to state 222
    IS_SET   shift, and go to state 40
    EXISTS   shift, and go to state 41
    NEG      shift, and go to state 42
    READ     shift, and go to state 43
    WRITE    shift, and go to state 44
    WRITELN  shift, and go to state 45
    INTEGER  shift, and go to state 46
    FLOAT    shift, and go to state 47
    EMPTY    shift, and go to state 48
    ';'      shift, and go to state 223
    '{'      shift, and go to state 131
    '('      shift, and go to state 51

    varDecl      go to state 132
    funcDecl     go to state 133
    stmt         go to state 134
    iterStmt     go to state 224
    body         go to state 400
    condStmt     go to state 225
    returnStmt   go to state 226
    exprStmt     go to state 227
    expression   go to state 228
    assign       go to state 60
    var          go to state 61
    inExpr       go to state 62
    outExpr      go to state 63
    simpleExpr   go to state 64
    conjExpr     go to state 65
    disjExpr     go to state 66
    negExpr      go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    minusFactor  go to state 72
    factor       go to state 73
    constant     go to state 74
    call         go to state 75


State 397

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody '}' .

    error    reduce using rule 13 (funcDecl)
    TYPE     reduce using rule 13 (funcDecl)
    SETOP    reduce using rule 13 (funcDecl)
    ARTOP1   reduce using rule 13 (funcDecl)
    ID       reduce using rule 13 (funcDecl)
    IF       reduce using rule 13 (funcDecl)
    FOR      reduce using rule 13 (funcDecl)
    RETURN   reduce using rule 13 (funcDecl)
    FORALL   reduce using rule 13 (funcDecl)
    IS_SET   reduce using rule 13 (funcDecl)
    EXISTS   reduce using rule 13 (funcDecl)
    NEG      reduce using rule 13 (funcDecl)
    READ     reduce using rule 13 (funcDecl)
    WRITE    reduce using rule 13 (funcDecl)
    WRITELN  reduce using rule 13 (funcDecl)
    INTEGER  reduce using rule 13 (funcDecl)
    FLOAT    reduce using rule 13 (funcDecl)
    EMPTY    reduce using rule 13 (funcDecl)
    ';'      reduce using rule 13 (funcDecl)
    '}'      reduce using rule 13 (funcDecl)
    '('      reduce using rule 13 (funcDecl)


State 398

   13 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody '}' .

    error    reduce using rule 13 (funcDecl)
    TYPE     reduce using rule 13 (funcDecl)
    SETOP    reduce using rule 13 (funcDecl)
    ARTOP1   reduce using rule 13 (funcDecl)
    ID       reduce using rule 13 (funcDecl)
    IF       reduce using rule 13 (funcDecl)
    ELSE     reduce using rule 13 (funcDecl)
    FOR      reduce using rule 13 (funcDecl)
    RETURN   reduce using rule 13 (funcDecl)
    FORALL   reduce using rule 13 (funcDecl)
    IS_SET   reduce using rule 13 (funcDecl)
    EXISTS   reduce using rule 13 (funcDecl)
    NEG      reduce using rule 13 (funcDecl)
    READ     reduce using rule 13 (funcDecl)
    WRITE    reduce using rule 13 (funcDecl)
    WRITELN  reduce using rule 13 (funcDecl)
    INTEGER  reduce using rule 13 (funcDecl)
    FLOAT    reduce using rule 13 (funcDecl)
    EMPTY    reduce using rule 13 (funcDecl)
    ';'      reduce using rule 13 (funcDecl)
    '}'      reduce using rule 13 (funcDecl)
    '('      reduce using rule 13 (funcDecl)


State 399

   39 condStmt: IF cond prepareScope body ELSE $@3 prepareScope body .

    error    reduce using rule 39 (condStmt)
    TYPE     reduce using rule 39 (condStmt)
    SETOP    reduce using rule 39 (condStmt)
    ARTOP1   reduce using rule 39 (condStmt)
    ID       reduce using rule 39 (condStmt)
    IF       reduce using rule 39 (condStmt)
    ELSE     reduce using rule 39 (condStmt)
    FOR      reduce using rule 39 (condStmt)
    RETURN   reduce using rule 39 (condStmt)
    FORALL   reduce using rule 39 (condStmt)
    IS_SET   reduce using rule 39 (condStmt)
    EXISTS   reduce using rule 39 (condStmt)
    NEG      reduce using rule 39 (condStmt)
    READ     reduce using rule 39 (condStmt)
    WRITE    reduce using rule 39 (condStmt)
    WRITELN  reduce using rule 39 (condStmt)
    INTEGER  reduce using rule 39 (condStmt)
    FLOAT    reduce using rule 39 (condStmt)
    EMPTY    reduce using rule 39 (condStmt)
    ';'      reduce using rule 39 (condStmt)
    '}'      reduce using rule 39 (condStmt)
    '('      reduce using rule 39 (condStmt)


State 400

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' prepareScope body .

    error    reduce using rule 29 (iterStmt)
    TYPE     reduce using rule 29 (iterStmt)
    SETOP    reduce using rule 29 (iterStmt)
    ARTOP1   reduce using rule 29 (iterStmt)
    ID       reduce using rule 29 (iterStmt)
    IF       reduce using rule 29 (iterStmt)
    ELSE     reduce using rule 29 (iterStmt)
    FOR      reduce using rule 29 (iterStmt)
    RETURN   reduce using rule 29 (iterStmt)
    FORALL   reduce using rule 29 (iterStmt)
    IS_SET   reduce using rule 29 (iterStmt)
    EXISTS   reduce using rule 29 (iterStmt)
    NEG      reduce using rule 29 (iterStmt)
    READ     reduce using rule 29 (iterStmt)
    WRITE    reduce using rule 29 (iterStmt)
    WRITELN  reduce using rule 29 (iterStmt)
    INTEGER  reduce using rule 29 (iterStmt)
    FLOAT    reduce using rule 29 (iterStmt)
    EMPTY    reduce using rule 29 (iterStmt)
    ';'      reduce using rule 29 (iterStmt)
    '}'      reduce using rule 29 (iterStmt)
    '('      reduce using rule 29 (iterStmt)
