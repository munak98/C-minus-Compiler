Grammar

    0 $accept: begin $end

    1 begin: program

    2 program: program declaration
    3        | error
    4        | %empty

    5 declaration: varDecl
    6            | funcDecl

    7 varDecl: TYPE varList ';'
    8        | TYPE error

    9 varList: varList ',' new_id
   10        | new_id

   11 new_id: ID

   12 $@1: %empty

   13 $@2: %empty

   14 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody '}'

   15 arguments: '(' ')'
   16          | '(' argsList ')'
   17          | '(' error ')'

   18 argsList: argsList ',' arg
   19         | arg

   20 arg: TYPE ID

   21 funcBody: %empty
   22         | funcBody varDecl
   23         | funcBody stmt

   24 stmt: exprStmt
   25     | returnStmt
   26     | iterStmt
   27     | condStmt

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope body
   29         | FOR '(' exprStmt exprStmt expression ')' prepareScope body
   30         | FORALL '(' simpleExpr ')' prepareScope body
   31         | FORALL '(' error ')' prepareScope body
   32         | FOR '(' error ')' prepareScope body

   33 body: '{' funcBody '}'
   34     | stmt
   35     | varDecl
   36     | funcDecl

   37 condStmt: IF cond prepareScope body

   38 $@3: %empty

   39 condStmt: IF cond prepareScope body ELSE $@3 prepareScope body

   40 prepareScope: %empty

   41 cond: '(' expression ')'
   42     | '(' error ')'

   43 returnStmt: RETURN exprStmt

   44 exprStmt: expression ';'
   45         | error
   46         | ';'

   47 expression: assign
   48           | inExpr
   49           | outExpr
   50           | simpleExpr

   51 assign: var '=' simpleExpr

   52 var: ID

   53 inExpr: READ '(' var ')'

   54 outExpr: WRITE '(' output ')'
   55        | WRITELN '(' output ')'

   56 output: simpleExpr
   57       | CHAR
   58       | STRING

   59 simpleExpr: simpleExpr IN conjExpr
   60           | conjExpr

   61 conjExpr: conjExpr CONJ disjExpr
   62         | disjExpr

   63 disjExpr: disjExpr DISJ compExpr
   64         | compExpr

   65 compExpr: compExpr COMP relExpr
   66         | relExpr

   67 relExpr: relExpr RELOP artExpr1
   68        | artExpr1

   69 artExpr1: artExpr1 ARTOP1 artExpr2
   70         | artExpr2

   71 artExpr2: artExpr2 ARTOP2 negExpr
   72         | negExpr

   73 negExpr: NEG negExpr
   74        | minusFactor

   75 minusFactor: ARTOP1 factor
   76            | factor

   77 factor: ID
   78       | '(' simpleExpr ')'
   79       | constant
   80       | call
   81       | IS_SET '(' factor ')'
   82       | EXISTS '(' simpleExpr ')'
   83       | SETOP '(' simpleExpr ')'

   84 constant: INTEGER
   85         | FLOAT
   86         | EMPTY

   87 $@4: %empty

   88 call: var $@4 '(' params ')'

   89 params: %empty
   90       | paramList

   91 paramList: paramList ',' simpleExpr
   92          | simpleExpr


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 15 16 17 28 29 30 31 32 41 42 53 54 55 78 81 82 83 88
    ')' (41) 15 16 17 28 29 30 31 32 41 42 53 54 55 78 81 82 83 88
    ',' (44) 9 18 91
    ';' (59) 7 44 46
    '=' (61) 51
    '{' (123) 14 33
    '}' (125) 14 33
    error (256) 3 8 17 31 32 42 45
    TYPE <ival> (258) 7 8 14 20
    RELOP <ival> (259) 67
    COMP <ival> (260) 65
    SETOP <ival> (261) 83
    ARTOP1 <ival> (262) 69 75
    ARTOP2 <ival> (263) 71
    ID <sval> (264) 11 14 20 52 77
    IF (265) 37 39
    ELSE (266) 39
    FOR (267) 28 29 32
    RETURN (268) 43
    FORALL (269) 30 31
    IN (270) 59
    IS_SET (271) 81
    EXISTS (272) 82
    DISJ (273) 63
    CONJ (274) 61
    NEG (275) 73
    READ (276) 53
    WRITE (277) 54
    WRITELN (278) 55
    INTEGER <ival> (279) 84
    FLOAT <fval> (280) 85
    STRING <sval> (281) 58
    CHAR <sval> (282) 57
    EMPTY (283) 86
    THEN (284)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    begin (38)
        on left: 1
        on right: 0
    program <tnode> (39)
        on left: 2 3 4
        on right: 1 2
    declaration <tnode> (40)
        on left: 5 6
        on right: 2
    varDecl <tnode> (41)
        on left: 7 8
        on right: 5 22 35
    varList <tnode> (42)
        on left: 9 10
        on right: 7 9
    new_id <tnode> (43)
        on left: 11
        on right: 9 10
    funcDecl <tnode> (44)
        on left: 14
        on right: 6 36
    $@1 (45)
        on left: 12
        on right: 14
    $@2 (46)
        on left: 13
        on right: 14
    arguments <tnode> (47)
        on left: 15 16 17
        on right: 14
    argsList <tnode> (48)
        on left: 18 19
        on right: 16 18
    arg <tnode> (49)
        on left: 20
        on right: 18 19
    funcBody <tnode> (50)
        on left: 21 22 23
        on right: 14 22 23 33
    stmt <tnode> (51)
        on left: 24 25 26 27
        on right: 23 34
    iterStmt <tnode> (52)
        on left: 28 29 30 31 32
        on right: 26
    body <tnode> (53)
        on left: 33 34 35 36
        on right: 28 29 30 31 32 37 39
    condStmt <tnode> (54)
        on left: 37 39
        on right: 27
    $@3 (55)
        on left: 38
        on right: 39
    prepareScope (56)
        on left: 40
        on right: 28 29 30 31 32 37 39
    cond <tnode> (57)
        on left: 41 42
        on right: 37 39
    returnStmt <tnode> (58)
        on left: 43
        on right: 25
    exprStmt <tnode> (59)
        on left: 44 45 46
        on right: 24 28 29 43
    expression <tnode> (60)
        on left: 47 48 49 50
        on right: 29 41 44
    assign <tnode> (61)
        on left: 51
        on right: 47
    var <tnode> (62)
        on left: 52
        on right: 51 53 88
    inExpr <tnode> (63)
        on left: 53
        on right: 48
    outExpr <tnode> (64)
        on left: 54 55
        on right: 49
    output <tnode> (65)
        on left: 56 57 58
        on right: 54 55
    simpleExpr <tnode> (66)
        on left: 59 60
        on right: 30 50 51 56 59 78 82 83 91 92
    conjExpr <tnode> (67)
        on left: 61 62
        on right: 59 60 61
    disjExpr <tnode> (68)
        on left: 63 64
        on right: 61 62 63
    compExpr <tnode> (69)
        on left: 65 66
        on right: 63 64 65
    relExpr <tnode> (70)
        on left: 67 68
        on right: 65 66 67
    artExpr1 <tnode> (71)
        on left: 69 70
        on right: 67 68 69
    artExpr2 <tnode> (72)
        on left: 71 72
        on right: 69 70 71
    negExpr <tnode> (73)
        on left: 73 74
        on right: 71 72 73
    minusFactor <tnode> (74)
        on left: 75 76
        on right: 74
    factor <tnode> (75)
        on left: 77 78 79 80 81 82 83
        on right: 75 76 81
    constant <tnode> (76)
        on left: 84 85 86
        on right: 79
    call <tnode> (77)
        on left: 88
        on right: 80
    $@4 (78)
        on left: 87
        on right: 88
    params <tnode> (79)
        on left: 89 90
        on right: 88
    paramList <tnode> (80)
        on left: 91 92
        on right: 90 91


State 0

    0 $accept: . begin $end

    error  shift, and go to state 1

    $end  reduce using rule 4 (program)
    TYPE  reduce using rule 4 (program)

    begin    go to state 2
    program  go to state 3


State 1

    3 program: error .

    $end  reduce using rule 3 (program)
    TYPE  reduce using rule 3 (program)


State 2

    0 $accept: begin . $end

    $end  shift, and go to state 4


State 3

    1 begin: program .
    2 program: program . declaration

    TYPE  shift, and go to state 5

    $end  reduce using rule 1 (begin)

    declaration  go to state 6
    varDecl      go to state 7
    funcDecl     go to state 8


State 4

    0 $accept: begin $end .

    $default  accept


State 5

    7 varDecl: TYPE . varList ';'
    8        | TYPE . error
   14 funcDecl: TYPE . ID $@1 arguments $@2 '{' funcBody '}'

    error  shift, and go to state 9
    ID     shift, and go to state 10

    varList  go to state 11
    new_id   go to state 12


State 6

    2 program: program declaration .

    $end  reduce using rule 2 (program)
    TYPE  reduce using rule 2 (program)


State 7

    5 declaration: varDecl .

    $end  reduce using rule 5 (declaration)
    TYPE  reduce using rule 5 (declaration)


State 8

    6 declaration: funcDecl .

    $end  reduce using rule 6 (declaration)
    TYPE  reduce using rule 6 (declaration)


State 9

    8 varDecl: TYPE error .

    $end  reduce using rule 8 (varDecl)
    TYPE  reduce using rule 8 (varDecl)


State 10

   11 new_id: ID .
   14 funcDecl: TYPE ID . $@1 arguments $@2 '{' funcBody '}'

    ';'  reduce using rule 11 (new_id)
    ','  reduce using rule 11 (new_id)
    '('  reduce using rule 12 ($@1)

    $@1  go to state 13


State 11

    7 varDecl: TYPE varList . ';'
    9 varList: varList . ',' new_id

    ';'  shift, and go to state 14
    ','  shift, and go to state 15


State 12

   10 varList: new_id .

    ';'  reduce using rule 10 (varList)
    ','  reduce using rule 10 (varList)


State 13

   14 funcDecl: TYPE ID $@1 . arguments $@2 '{' funcBody '}'

    '('  shift, and go to state 16

    arguments  go to state 17


State 14

    7 varDecl: TYPE varList ';' .

    $end  reduce using rule 7 (varDecl)
    TYPE  reduce using rule 7 (varDecl)


State 15

    9 varList: varList ',' . new_id

    ID  shift, and go to state 18

    new_id  go to state 19


State 16

   15 arguments: '(' . ')'
   16          | '(' . argsList ')'
   17          | '(' . error ')'

    error  shift, and go to state 20
    TYPE   shift, and go to state 21
    ')'    shift, and go to state 22

    argsList  go to state 23
    arg       go to state 24


State 17

   14 funcDecl: TYPE ID $@1 arguments . $@2 '{' funcBody '}'

    '{'  reduce using rule 13 ($@2)

    $@2  go to state 25


State 18

   11 new_id: ID .

    ';'  reduce using rule 11 (new_id)
    ','  reduce using rule 11 (new_id)


State 19

    9 varList: varList ',' new_id .

    ';'  reduce using rule 9 (varList)
    ','  reduce using rule 9 (varList)


State 20

   17 arguments: '(' error . ')'

    ')'  shift, and go to state 26


State 21

   20 arg: TYPE . ID

    ID  shift, and go to state 27


State 22

   15 arguments: '(' ')' .

    '{'  reduce using rule 15 (arguments)


State 23

   16 arguments: '(' argsList . ')'
   18 argsList: argsList . ',' arg

    ','  shift, and go to state 28
    ')'  shift, and go to state 29


State 24

   19 argsList: arg .

    ','  reduce using rule 19 (argsList)
    ')'  reduce using rule 19 (argsList)


State 25

   14 funcDecl: TYPE ID $@1 arguments $@2 . '{' funcBody '}'

    '{'  shift, and go to state 30


State 26

   17 arguments: '(' error ')' .

    '{'  reduce using rule 17 (arguments)


State 27

   20 arg: TYPE ID .

    ','  reduce using rule 20 (arg)
    ')'  reduce using rule 20 (arg)


State 28

   18 argsList: argsList ',' . arg

    TYPE  shift, and go to state 21

    arg  go to state 31


State 29

   16 arguments: '(' argsList ')' .

    '{'  reduce using rule 16 (arguments)


State 30

   14 funcDecl: TYPE ID $@1 arguments $@2 '{' . funcBody '}'

    error    reduce using rule 21 (funcBody)
    TYPE     reduce using rule 21 (funcBody)
    SETOP    reduce using rule 21 (funcBody)
    ARTOP1   reduce using rule 21 (funcBody)
    ID       reduce using rule 21 (funcBody)
    IF       reduce using rule 21 (funcBody)
    FOR      reduce using rule 21 (funcBody)
    RETURN   reduce using rule 21 (funcBody)
    FORALL   reduce using rule 21 (funcBody)
    IS_SET   reduce using rule 21 (funcBody)
    EXISTS   reduce using rule 21 (funcBody)
    NEG      reduce using rule 21 (funcBody)
    READ     reduce using rule 21 (funcBody)
    WRITE    reduce using rule 21 (funcBody)
    WRITELN  reduce using rule 21 (funcBody)
    INTEGER  reduce using rule 21 (funcBody)
    FLOAT    reduce using rule 21 (funcBody)
    EMPTY    reduce using rule 21 (funcBody)
    ';'      reduce using rule 21 (funcBody)
    '}'      reduce using rule 21 (funcBody)
    '('      reduce using rule 21 (funcBody)

    funcBody  go to state 32


State 31

   18 argsList: argsList ',' arg .

    ','  reduce using rule 18 (argsList)
    ')'  reduce using rule 18 (argsList)


State 32

   14 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody . '}'
   22 funcBody: funcBody . varDecl
   23         | funcBody . stmt

    error    shift, and go to state 33
    TYPE     shift, and go to state 34
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 38
    FOR      shift, and go to state 39
    RETURN   shift, and go to state 40
    FORALL   shift, and go to state 41
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 51
    '}'      shift, and go to state 52
    '('      shift, and go to state 53

    varDecl      go to state 54
    stmt         go to state 55
    iterStmt     go to state 56
    condStmt     go to state 57
    returnStmt   go to state 58
    exprStmt     go to state 59
    expression   go to state 60
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 33

   45 exprStmt: error .

    error    reduce using rule 45 (exprStmt)
    TYPE     reduce using rule 45 (exprStmt)
    SETOP    reduce using rule 45 (exprStmt)
    ARTOP1   reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IF       reduce using rule 45 (exprStmt)
    FOR      reduce using rule 45 (exprStmt)
    RETURN   reduce using rule 45 (exprStmt)
    FORALL   reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    ';'      reduce using rule 45 (exprStmt)
    '}'      reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)


State 34

    7 varDecl: TYPE . varList ';'
    8        | TYPE . error

    error  shift, and go to state 171
    ID     shift, and go to state 18

    varList  go to state 172
    new_id   go to state 12


State 35

   83 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 77


State 36

   75 minusFactor: ARTOP1 . factor

    SETOP    shift, and go to state 35
    ID       shift, and go to state 173
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    '('      shift, and go to state 53

    var       go to state 78
    factor    go to state 79
    constant  go to state 75
    call      go to state 76


State 37

   52 var: ID .
   77 factor: ID .

    RELOP   reduce using rule 77 (factor)
    COMP    reduce using rule 77 (factor)
    ARTOP1  reduce using rule 77 (factor)
    ARTOP2  reduce using rule 77 (factor)
    IN      reduce using rule 77 (factor)
    DISJ    reduce using rule 77 (factor)
    CONJ    reduce using rule 77 (factor)
    ';'     reduce using rule 77 (factor)
    '('     reduce using rule 52 (var)
    '='     reduce using rule 52 (var)


State 38

   37 condStmt: IF . cond prepareScope body
   39         | IF . cond prepareScope body ELSE $@3 prepareScope body

    '('  shift, and go to state 80

    cond  go to state 81


State 39

   28 iterStmt: FOR . '(' exprStmt exprStmt ')' prepareScope body
   29         | FOR . '(' exprStmt exprStmt expression ')' prepareScope body
   32         | FOR . '(' error ')' prepareScope body

    '('  shift, and go to state 82


State 40

   43 returnStmt: RETURN . exprStmt

    error    shift, and go to state 33
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 51
    '('      shift, and go to state 53

    exprStmt     go to state 83
    expression   go to state 60
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 41

   30 iterStmt: FORALL . '(' simpleExpr ')' prepareScope body
   31         | FORALL . '(' error ')' prepareScope body

    '('  shift, and go to state 84


State 42

   81 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 85


State 43

   82 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 86


State 44

   73 negExpr: NEG . negExpr

    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 173
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    '('      shift, and go to state 53

    var          go to state 78
    negExpr      go to state 87
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 45

   53 inExpr: READ . '(' var ')'

    '('  shift, and go to state 88


State 46

   54 outExpr: WRITE . '(' output ')'

    '('  shift, and go to state 89


State 47

   55 outExpr: WRITELN . '(' output ')'

    '('  shift, and go to state 90


State 48

   84 constant: INTEGER .

    RELOP   reduce using rule 84 (constant)
    COMP    reduce using rule 84 (constant)
    ARTOP1  reduce using rule 84 (constant)
    ARTOP2  reduce using rule 84 (constant)
    IN      reduce using rule 84 (constant)
    DISJ    reduce using rule 84 (constant)
    CONJ    reduce using rule 84 (constant)
    ';'     reduce using rule 84 (constant)


State 49

   85 constant: FLOAT .

    RELOP   reduce using rule 85 (constant)
    COMP    reduce using rule 85 (constant)
    ARTOP1  reduce using rule 85 (constant)
    ARTOP2  reduce using rule 85 (constant)
    IN      reduce using rule 85 (constant)
    DISJ    reduce using rule 85 (constant)
    CONJ    reduce using rule 85 (constant)
    ';'     reduce using rule 85 (constant)


State 50

   86 constant: EMPTY .

    RELOP   reduce using rule 86 (constant)
    COMP    reduce using rule 86 (constant)
    ARTOP1  reduce using rule 86 (constant)
    ARTOP2  reduce using rule 86 (constant)
    IN      reduce using rule 86 (constant)
    DISJ    reduce using rule 86 (constant)
    CONJ    reduce using rule 86 (constant)
    ';'     reduce using rule 86 (constant)


State 51

   46 exprStmt: ';' .

    error    reduce using rule 46 (exprStmt)
    TYPE     reduce using rule 46 (exprStmt)
    SETOP    reduce using rule 46 (exprStmt)
    ARTOP1   reduce using rule 46 (exprStmt)
    ID       reduce using rule 46 (exprStmt)
    IF       reduce using rule 46 (exprStmt)
    FOR      reduce using rule 46 (exprStmt)
    RETURN   reduce using rule 46 (exprStmt)
    FORALL   reduce using rule 46 (exprStmt)
    IS_SET   reduce using rule 46 (exprStmt)
    EXISTS   reduce using rule 46 (exprStmt)
    NEG      reduce using rule 46 (exprStmt)
    READ     reduce using rule 46 (exprStmt)
    WRITE    reduce using rule 46 (exprStmt)
    WRITELN  reduce using rule 46 (exprStmt)
    INTEGER  reduce using rule 46 (exprStmt)
    FLOAT    reduce using rule 46 (exprStmt)
    EMPTY    reduce using rule 46 (exprStmt)
    ';'      reduce using rule 46 (exprStmt)
    '}'      reduce using rule 46 (exprStmt)
    '('      reduce using rule 46 (exprStmt)


State 52

   14 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody '}' .

    $end  reduce using rule 14 (funcDecl)
    TYPE  reduce using rule 14 (funcDecl)


State 53

   78 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 91
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 54

   22 funcBody: funcBody varDecl .

    error    reduce using rule 22 (funcBody)
    TYPE     reduce using rule 22 (funcBody)
    SETOP    reduce using rule 22 (funcBody)
    ARTOP1   reduce using rule 22 (funcBody)
    ID       reduce using rule 22 (funcBody)
    IF       reduce using rule 22 (funcBody)
    FOR      reduce using rule 22 (funcBody)
    RETURN   reduce using rule 22 (funcBody)
    FORALL   reduce using rule 22 (funcBody)
    IS_SET   reduce using rule 22 (funcBody)
    EXISTS   reduce using rule 22 (funcBody)
    NEG      reduce using rule 22 (funcBody)
    READ     reduce using rule 22 (funcBody)
    WRITE    reduce using rule 22 (funcBody)
    WRITELN  reduce using rule 22 (funcBody)
    INTEGER  reduce using rule 22 (funcBody)
    FLOAT    reduce using rule 22 (funcBody)
    EMPTY    reduce using rule 22 (funcBody)
    ';'      reduce using rule 22 (funcBody)
    '}'      reduce using rule 22 (funcBody)
    '('      reduce using rule 22 (funcBody)


State 55

   23 funcBody: funcBody stmt .

    error    reduce using rule 23 (funcBody)
    TYPE     reduce using rule 23 (funcBody)
    SETOP    reduce using rule 23 (funcBody)
    ARTOP1   reduce using rule 23 (funcBody)
    ID       reduce using rule 23 (funcBody)
    IF       reduce using rule 23 (funcBody)
    FOR      reduce using rule 23 (funcBody)
    RETURN   reduce using rule 23 (funcBody)
    FORALL   reduce using rule 23 (funcBody)
    IS_SET   reduce using rule 23 (funcBody)
    EXISTS   reduce using rule 23 (funcBody)
    NEG      reduce using rule 23 (funcBody)
    READ     reduce using rule 23 (funcBody)
    WRITE    reduce using rule 23 (funcBody)
    WRITELN  reduce using rule 23 (funcBody)
    INTEGER  reduce using rule 23 (funcBody)
    FLOAT    reduce using rule 23 (funcBody)
    EMPTY    reduce using rule 23 (funcBody)
    ';'      reduce using rule 23 (funcBody)
    '}'      reduce using rule 23 (funcBody)
    '('      reduce using rule 23 (funcBody)


State 56

   26 stmt: iterStmt .

    error    reduce using rule 26 (stmt)
    TYPE     reduce using rule 26 (stmt)
    SETOP    reduce using rule 26 (stmt)
    ARTOP1   reduce using rule 26 (stmt)
    ID       reduce using rule 26 (stmt)
    IF       reduce using rule 26 (stmt)
    FOR      reduce using rule 26 (stmt)
    RETURN   reduce using rule 26 (stmt)
    FORALL   reduce using rule 26 (stmt)
    IS_SET   reduce using rule 26 (stmt)
    EXISTS   reduce using rule 26 (stmt)
    NEG      reduce using rule 26 (stmt)
    READ     reduce using rule 26 (stmt)
    WRITE    reduce using rule 26 (stmt)
    WRITELN  reduce using rule 26 (stmt)
    INTEGER  reduce using rule 26 (stmt)
    FLOAT    reduce using rule 26 (stmt)
    EMPTY    reduce using rule 26 (stmt)
    ';'      reduce using rule 26 (stmt)
    '}'      reduce using rule 26 (stmt)
    '('      reduce using rule 26 (stmt)


State 57

   27 stmt: condStmt .

    error    reduce using rule 27 (stmt)
    TYPE     reduce using rule 27 (stmt)
    SETOP    reduce using rule 27 (stmt)
    ARTOP1   reduce using rule 27 (stmt)
    ID       reduce using rule 27 (stmt)
    IF       reduce using rule 27 (stmt)
    FOR      reduce using rule 27 (stmt)
    RETURN   reduce using rule 27 (stmt)
    FORALL   reduce using rule 27 (stmt)
    IS_SET   reduce using rule 27 (stmt)
    EXISTS   reduce using rule 27 (stmt)
    NEG      reduce using rule 27 (stmt)
    READ     reduce using rule 27 (stmt)
    WRITE    reduce using rule 27 (stmt)
    WRITELN  reduce using rule 27 (stmt)
    INTEGER  reduce using rule 27 (stmt)
    FLOAT    reduce using rule 27 (stmt)
    EMPTY    reduce using rule 27 (stmt)
    ';'      reduce using rule 27 (stmt)
    '}'      reduce using rule 27 (stmt)
    '('      reduce using rule 27 (stmt)


State 58

   25 stmt: returnStmt .

    error    reduce using rule 25 (stmt)
    TYPE     reduce using rule 25 (stmt)
    SETOP    reduce using rule 25 (stmt)
    ARTOP1   reduce using rule 25 (stmt)
    ID       reduce using rule 25 (stmt)
    IF       reduce using rule 25 (stmt)
    FOR      reduce using rule 25 (stmt)
    RETURN   reduce using rule 25 (stmt)
    FORALL   reduce using rule 25 (stmt)
    IS_SET   reduce using rule 25 (stmt)
    EXISTS   reduce using rule 25 (stmt)
    NEG      reduce using rule 25 (stmt)
    READ     reduce using rule 25 (stmt)
    WRITE    reduce using rule 25 (stmt)
    WRITELN  reduce using rule 25 (stmt)
    INTEGER  reduce using rule 25 (stmt)
    FLOAT    reduce using rule 25 (stmt)
    EMPTY    reduce using rule 25 (stmt)
    ';'      reduce using rule 25 (stmt)
    '}'      reduce using rule 25 (stmt)
    '('      reduce using rule 25 (stmt)


State 59

   24 stmt: exprStmt .

    error    reduce using rule 24 (stmt)
    TYPE     reduce using rule 24 (stmt)
    SETOP    reduce using rule 24 (stmt)
    ARTOP1   reduce using rule 24 (stmt)
    ID       reduce using rule 24 (stmt)
    IF       reduce using rule 24 (stmt)
    FOR      reduce using rule 24 (stmt)
    RETURN   reduce using rule 24 (stmt)
    FORALL   reduce using rule 24 (stmt)
    IS_SET   reduce using rule 24 (stmt)
    EXISTS   reduce using rule 24 (stmt)
    NEG      reduce using rule 24 (stmt)
    READ     reduce using rule 24 (stmt)
    WRITE    reduce using rule 24 (stmt)
    WRITELN  reduce using rule 24 (stmt)
    INTEGER  reduce using rule 24 (stmt)
    FLOAT    reduce using rule 24 (stmt)
    EMPTY    reduce using rule 24 (stmt)
    ';'      reduce using rule 24 (stmt)
    '}'      reduce using rule 24 (stmt)
    '('      reduce using rule 24 (stmt)


State 60

   44 exprStmt: expression . ';'

    ';'  shift, and go to state 92


State 61

   47 expression: assign .

    ';'  reduce using rule 47 (expression)


State 62

   51 assign: var . '=' simpleExpr
   88 call: var . $@4 '(' params ')'

    '='  shift, and go to state 93

    '('  reduce using rule 87 ($@4)

    $@4  go to state 94


State 63

   48 expression: inExpr .

    ';'  reduce using rule 48 (expression)


State 64

   49 expression: outExpr .

    ';'  reduce using rule 49 (expression)


State 65

   50 expression: simpleExpr .
   59 simpleExpr: simpleExpr . IN conjExpr

    IN  shift, and go to state 95

    ';'  reduce using rule 50 (expression)


State 66

   60 simpleExpr: conjExpr .
   61 conjExpr: conjExpr . CONJ disjExpr

    CONJ  shift, and go to state 96

    IN   reduce using rule 60 (simpleExpr)
    ';'  reduce using rule 60 (simpleExpr)


State 67

   62 conjExpr: disjExpr .
   63 disjExpr: disjExpr . DISJ compExpr

    DISJ  shift, and go to state 97

    IN    reduce using rule 62 (conjExpr)
    CONJ  reduce using rule 62 (conjExpr)
    ';'   reduce using rule 62 (conjExpr)


State 68

   64 disjExpr: compExpr .
   65 compExpr: compExpr . COMP relExpr

    COMP  shift, and go to state 98

    IN    reduce using rule 64 (disjExpr)
    DISJ  reduce using rule 64 (disjExpr)
    CONJ  reduce using rule 64 (disjExpr)
    ';'   reduce using rule 64 (disjExpr)


State 69

   66 compExpr: relExpr .
   67 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 99

    COMP  reduce using rule 66 (compExpr)
    IN    reduce using rule 66 (compExpr)
    DISJ  reduce using rule 66 (compExpr)
    CONJ  reduce using rule 66 (compExpr)
    ';'   reduce using rule 66 (compExpr)


State 70

   68 relExpr: artExpr1 .
   69 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 100

    RELOP  reduce using rule 68 (relExpr)
    COMP   reduce using rule 68 (relExpr)
    IN     reduce using rule 68 (relExpr)
    DISJ   reduce using rule 68 (relExpr)
    CONJ   reduce using rule 68 (relExpr)
    ';'    reduce using rule 68 (relExpr)


State 71

   70 artExpr1: artExpr2 .
   71 artExpr2: artExpr2 . ARTOP2 negExpr

    ARTOP2  shift, and go to state 101

    RELOP   reduce using rule 70 (artExpr1)
    COMP    reduce using rule 70 (artExpr1)
    ARTOP1  reduce using rule 70 (artExpr1)
    IN      reduce using rule 70 (artExpr1)
    DISJ    reduce using rule 70 (artExpr1)
    CONJ    reduce using rule 70 (artExpr1)
    ';'     reduce using rule 70 (artExpr1)


State 72

   72 artExpr2: negExpr .

    RELOP   reduce using rule 72 (artExpr2)
    COMP    reduce using rule 72 (artExpr2)
    ARTOP1  reduce using rule 72 (artExpr2)
    ARTOP2  reduce using rule 72 (artExpr2)
    IN      reduce using rule 72 (artExpr2)
    DISJ    reduce using rule 72 (artExpr2)
    CONJ    reduce using rule 72 (artExpr2)
    ';'     reduce using rule 72 (artExpr2)


State 73

   74 negExpr: minusFactor .

    RELOP   reduce using rule 74 (negExpr)
    COMP    reduce using rule 74 (negExpr)
    ARTOP1  reduce using rule 74 (negExpr)
    ARTOP2  reduce using rule 74 (negExpr)
    IN      reduce using rule 74 (negExpr)
    DISJ    reduce using rule 74 (negExpr)
    CONJ    reduce using rule 74 (negExpr)
    ';'     reduce using rule 74 (negExpr)


State 74

   76 minusFactor: factor .

    RELOP   reduce using rule 76 (minusFactor)
    COMP    reduce using rule 76 (minusFactor)
    ARTOP1  reduce using rule 76 (minusFactor)
    ARTOP2  reduce using rule 76 (minusFactor)
    IN      reduce using rule 76 (minusFactor)
    DISJ    reduce using rule 76 (minusFactor)
    CONJ    reduce using rule 76 (minusFactor)
    ';'     reduce using rule 76 (minusFactor)


State 75

   79 factor: constant .

    RELOP   reduce using rule 79 (factor)
    COMP    reduce using rule 79 (factor)
    ARTOP1  reduce using rule 79 (factor)
    ARTOP2  reduce using rule 79 (factor)
    IN      reduce using rule 79 (factor)
    DISJ    reduce using rule 79 (factor)
    CONJ    reduce using rule 79 (factor)
    ';'     reduce using rule 79 (factor)


State 76

   80 factor: call .

    RELOP   reduce using rule 80 (factor)
    COMP    reduce using rule 80 (factor)
    ARTOP1  reduce using rule 80 (factor)
    ARTOP2  reduce using rule 80 (factor)
    IN      reduce using rule 80 (factor)
    DISJ    reduce using rule 80 (factor)
    CONJ    reduce using rule 80 (factor)
    ';'     reduce using rule 80 (factor)


State 77

   83 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 102
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 78

   88 call: var . $@4 '(' params ')'

    '('  reduce using rule 87 ($@4)

    $@4  go to state 94


State 79

   75 minusFactor: ARTOP1 factor .

    RELOP   reduce using rule 75 (minusFactor)
    COMP    reduce using rule 75 (minusFactor)
    ARTOP1  reduce using rule 75 (minusFactor)
    ARTOP2  reduce using rule 75 (minusFactor)
    IN      reduce using rule 75 (minusFactor)
    DISJ    reduce using rule 75 (minusFactor)
    CONJ    reduce using rule 75 (minusFactor)
    ';'     reduce using rule 75 (minusFactor)


State 80

   41 cond: '(' . expression ')'
   42     | '(' . error ')'

    error    shift, and go to state 103
    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 196
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    READ     shift, and go to state 197
    WRITE    shift, and go to state 198
    WRITELN  shift, and go to state 199
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    expression   go to state 104
    assign       go to state 200
    var          go to state 201
    inExpr       go to state 202
    outExpr      go to state 203
    simpleExpr   go to state 204
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 81

   37 condStmt: IF cond . prepareScope body
   39         | IF cond . prepareScope body ELSE $@3 prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 105


State 82

   28 iterStmt: FOR '(' . exprStmt exprStmt ')' prepareScope body
   29         | FOR '(' . exprStmt exprStmt expression ')' prepareScope body
   32         | FOR '(' . error ')' prepareScope body

    error    shift, and go to state 106
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 205
    '('      shift, and go to state 53

    exprStmt     go to state 107
    expression   go to state 206
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 83

   43 returnStmt: RETURN exprStmt .

    error    reduce using rule 43 (returnStmt)
    TYPE     reduce using rule 43 (returnStmt)
    SETOP    reduce using rule 43 (returnStmt)
    ARTOP1   reduce using rule 43 (returnStmt)
    ID       reduce using rule 43 (returnStmt)
    IF       reduce using rule 43 (returnStmt)
    FOR      reduce using rule 43 (returnStmt)
    RETURN   reduce using rule 43 (returnStmt)
    FORALL   reduce using rule 43 (returnStmt)
    IS_SET   reduce using rule 43 (returnStmt)
    EXISTS   reduce using rule 43 (returnStmt)
    NEG      reduce using rule 43 (returnStmt)
    READ     reduce using rule 43 (returnStmt)
    WRITE    reduce using rule 43 (returnStmt)
    WRITELN  reduce using rule 43 (returnStmt)
    INTEGER  reduce using rule 43 (returnStmt)
    FLOAT    reduce using rule 43 (returnStmt)
    EMPTY    reduce using rule 43 (returnStmt)
    ';'      reduce using rule 43 (returnStmt)
    '}'      reduce using rule 43 (returnStmt)
    '('      reduce using rule 43 (returnStmt)


State 84

   30 iterStmt: FORALL '(' . simpleExpr ')' prepareScope body
   31         | FORALL '(' . error ')' prepareScope body

    error    shift, and go to state 108
    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 109
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 85

   81 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 207
    ID       shift, and go to state 208
    IS_SET   shift, and go to state 209
    EXISTS   shift, and go to state 210
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    var       go to state 215
    factor    go to state 110
    constant  go to state 216
    call      go to state 217


State 86

   82 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 111
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 87

   73 negExpr: NEG negExpr .

    RELOP   reduce using rule 73 (negExpr)
    COMP    reduce using rule 73 (negExpr)
    ARTOP1  reduce using rule 73 (negExpr)
    ARTOP2  reduce using rule 73 (negExpr)
    IN      reduce using rule 73 (negExpr)
    DISJ    reduce using rule 73 (negExpr)
    CONJ    reduce using rule 73 (negExpr)
    ';'     reduce using rule 73 (negExpr)


State 88

   53 inExpr: READ '(' . var ')'

    ID  shift, and go to state 112

    var  go to state 113


State 89

   54 outExpr: WRITE '(' . output ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    STRING   shift, and go to state 114
    CHAR     shift, and go to state 115
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    output       go to state 116
    simpleExpr   go to state 117
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 90

   55 outExpr: WRITELN '(' . output ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    STRING   shift, and go to state 114
    CHAR     shift, and go to state 115
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    output       go to state 118
    simpleExpr   go to state 117
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 91

   59 simpleExpr: simpleExpr . IN conjExpr
   78 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 218
    ')'  shift, and go to state 119


State 92

   44 exprStmt: expression ';' .

    error    reduce using rule 44 (exprStmt)
    TYPE     reduce using rule 44 (exprStmt)
    SETOP    reduce using rule 44 (exprStmt)
    ARTOP1   reduce using rule 44 (exprStmt)
    ID       reduce using rule 44 (exprStmt)
    IF       reduce using rule 44 (exprStmt)
    FOR      reduce using rule 44 (exprStmt)
    RETURN   reduce using rule 44 (exprStmt)
    FORALL   reduce using rule 44 (exprStmt)
    IS_SET   reduce using rule 44 (exprStmt)
    EXISTS   reduce using rule 44 (exprStmt)
    NEG      reduce using rule 44 (exprStmt)
    READ     reduce using rule 44 (exprStmt)
    WRITE    reduce using rule 44 (exprStmt)
    WRITELN  reduce using rule 44 (exprStmt)
    INTEGER  reduce using rule 44 (exprStmt)
    FLOAT    reduce using rule 44 (exprStmt)
    EMPTY    reduce using rule 44 (exprStmt)
    ';'      reduce using rule 44 (exprStmt)
    '}'      reduce using rule 44 (exprStmt)
    '('      reduce using rule 44 (exprStmt)


State 93

   51 assign: var '=' . simpleExpr

    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 173
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    '('      shift, and go to state 53

    var          go to state 78
    simpleExpr   go to state 120
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 94

   88 call: var $@4 . '(' params ')'

    '('  shift, and go to state 121


State 95

   59 simpleExpr: simpleExpr IN . conjExpr

    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 173
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    '('      shift, and go to state 53

    var          go to state 78
    conjExpr     go to state 122
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 96

   61 conjExpr: conjExpr CONJ . disjExpr

    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 173
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    '('      shift, and go to state 53

    var          go to state 78
    disjExpr     go to state 123
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 97

   63 disjExpr: disjExpr DISJ . compExpr

    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 173
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    '('      shift, and go to state 53

    var          go to state 78
    compExpr     go to state 124
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 98

   65 compExpr: compExpr COMP . relExpr

    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 173
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    '('      shift, and go to state 53

    var          go to state 78
    relExpr      go to state 125
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 99

   67 relExpr: relExpr RELOP . artExpr1

    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 173
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    '('      shift, and go to state 53

    var          go to state 78
    artExpr1     go to state 126
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 100

   69 artExpr1: artExpr1 ARTOP1 . artExpr2

    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 173
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    '('      shift, and go to state 53

    var          go to state 78
    artExpr2     go to state 127
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 101

   71 artExpr2: artExpr2 ARTOP2 . negExpr

    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 173
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    '('      shift, and go to state 53

    var          go to state 78
    negExpr      go to state 128
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 102

   59 simpleExpr: simpleExpr . IN conjExpr
   83 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 218
    ')'  shift, and go to state 129


State 103

   42 cond: '(' error . ')'

    ')'  shift, and go to state 130


State 104

   41 cond: '(' expression . ')'

    ')'  shift, and go to state 131


State 105

   37 condStmt: IF cond prepareScope . body
   39         | IF cond prepareScope . body ELSE $@3 prepareScope body

    error    shift, and go to state 219
    TYPE     shift, and go to state 220
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 221
    FOR      shift, and go to state 222
    RETURN   shift, and go to state 223
    FORALL   shift, and go to state 224
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 225
    '{'      shift, and go to state 132
    '('      shift, and go to state 53

    varDecl      go to state 133
    funcDecl     go to state 134
    stmt         go to state 135
    iterStmt     go to state 226
    body         go to state 136
    condStmt     go to state 227
    returnStmt   go to state 228
    exprStmt     go to state 229
    expression   go to state 230
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 106

   32 iterStmt: FOR '(' error . ')' prepareScope body
   45 exprStmt: error .

    ')'  shift, and go to state 137

    error    reduce using rule 45 (exprStmt)
    SETOP    reduce using rule 45 (exprStmt)
    ARTOP1   reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    ';'      reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)


State 107

   28 iterStmt: FOR '(' exprStmt . exprStmt ')' prepareScope body
   29         | FOR '(' exprStmt . exprStmt expression ')' prepareScope body

    error    shift, and go to state 231
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 232
    '('      shift, and go to state 53

    exprStmt     go to state 138
    expression   go to state 233
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 108

   31 iterStmt: FORALL '(' error . ')' prepareScope body

    ')'  shift, and go to state 139


State 109

   30 iterStmt: FORALL '(' simpleExpr . ')' prepareScope body
   59 simpleExpr: simpleExpr . IN conjExpr

    IN   shift, and go to state 218
    ')'  shift, and go to state 140


State 110

   81 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 141


State 111

   59 simpleExpr: simpleExpr . IN conjExpr
   82 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 218
    ')'  shift, and go to state 142


State 112

   52 var: ID .

    ')'  reduce using rule 52 (var)


State 113

   53 inExpr: READ '(' var . ')'

    ')'  shift, and go to state 143


State 114

   58 output: STRING .

    ')'  reduce using rule 58 (output)


State 115

   57 output: CHAR .

    ')'  reduce using rule 57 (output)


State 116

   54 outExpr: WRITE '(' output . ')'

    ')'  shift, and go to state 144


State 117

   56 output: simpleExpr .
   59 simpleExpr: simpleExpr . IN conjExpr

    IN  shift, and go to state 218

    ')'  reduce using rule 56 (output)


State 118

   55 outExpr: WRITELN '(' output . ')'

    ')'  shift, and go to state 145


State 119

   78 factor: '(' simpleExpr ')' .

    RELOP   reduce using rule 78 (factor)
    COMP    reduce using rule 78 (factor)
    ARTOP1  reduce using rule 78 (factor)
    ARTOP2  reduce using rule 78 (factor)
    IN      reduce using rule 78 (factor)
    DISJ    reduce using rule 78 (factor)
    CONJ    reduce using rule 78 (factor)
    ';'     reduce using rule 78 (factor)


State 120

   51 assign: var '=' simpleExpr .
   59 simpleExpr: simpleExpr . IN conjExpr

    IN  shift, and go to state 95

    ';'  reduce using rule 51 (assign)


State 121

   88 call: var $@4 '(' . params ')'

    SETOP    shift, and go to state 234
    ARTOP1   shift, and go to state 235
    ID       shift, and go to state 236
    IS_SET   shift, and go to state 237
    EXISTS   shift, and go to state 238
    NEG      shift, and go to state 239
    INTEGER  shift, and go to state 240
    FLOAT    shift, and go to state 241
    EMPTY    shift, and go to state 242
    '('      shift, and go to state 243

    ')'  reduce using rule 89 (params)

    var          go to state 244
    simpleExpr   go to state 146
    conjExpr     go to state 245
    disjExpr     go to state 246
    compExpr     go to state 247
    relExpr      go to state 248
    artExpr1     go to state 249
    artExpr2     go to state 250
    negExpr      go to state 251
    minusFactor  go to state 252
    factor       go to state 253
    constant     go to state 254
    call         go to state 255
    params       go to state 147
    paramList    go to state 148


State 122

   59 simpleExpr: simpleExpr IN conjExpr .
   61 conjExpr: conjExpr . CONJ disjExpr

    CONJ  shift, and go to state 96

    IN   reduce using rule 59 (simpleExpr)
    ';'  reduce using rule 59 (simpleExpr)


State 123

   61 conjExpr: conjExpr CONJ disjExpr .
   63 disjExpr: disjExpr . DISJ compExpr

    DISJ  shift, and go to state 97

    IN    reduce using rule 61 (conjExpr)
    CONJ  reduce using rule 61 (conjExpr)
    ';'   reduce using rule 61 (conjExpr)


State 124

   63 disjExpr: disjExpr DISJ compExpr .
   65 compExpr: compExpr . COMP relExpr

    COMP  shift, and go to state 98

    IN    reduce using rule 63 (disjExpr)
    DISJ  reduce using rule 63 (disjExpr)
    CONJ  reduce using rule 63 (disjExpr)
    ';'   reduce using rule 63 (disjExpr)


State 125

   65 compExpr: compExpr COMP relExpr .
   67 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 99

    COMP  reduce using rule 65 (compExpr)
    IN    reduce using rule 65 (compExpr)
    DISJ  reduce using rule 65 (compExpr)
    CONJ  reduce using rule 65 (compExpr)
    ';'   reduce using rule 65 (compExpr)


State 126

   67 relExpr: relExpr RELOP artExpr1 .
   69 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 100

    RELOP  reduce using rule 67 (relExpr)
    COMP   reduce using rule 67 (relExpr)
    IN     reduce using rule 67 (relExpr)
    DISJ   reduce using rule 67 (relExpr)
    CONJ   reduce using rule 67 (relExpr)
    ';'    reduce using rule 67 (relExpr)


State 127

   69 artExpr1: artExpr1 ARTOP1 artExpr2 .
   71 artExpr2: artExpr2 . ARTOP2 negExpr

    ARTOP2  shift, and go to state 101

    RELOP   reduce using rule 69 (artExpr1)
    COMP    reduce using rule 69 (artExpr1)
    ARTOP1  reduce using rule 69 (artExpr1)
    IN      reduce using rule 69 (artExpr1)
    DISJ    reduce using rule 69 (artExpr1)
    CONJ    reduce using rule 69 (artExpr1)
    ';'     reduce using rule 69 (artExpr1)


State 128

   71 artExpr2: artExpr2 ARTOP2 negExpr .

    RELOP   reduce using rule 71 (artExpr2)
    COMP    reduce using rule 71 (artExpr2)
    ARTOP1  reduce using rule 71 (artExpr2)
    ARTOP2  reduce using rule 71 (artExpr2)
    IN      reduce using rule 71 (artExpr2)
    DISJ    reduce using rule 71 (artExpr2)
    CONJ    reduce using rule 71 (artExpr2)
    ';'     reduce using rule 71 (artExpr2)


State 129

   83 factor: SETOP '(' simpleExpr ')' .

    RELOP   reduce using rule 83 (factor)
    COMP    reduce using rule 83 (factor)
    ARTOP1  reduce using rule 83 (factor)
    ARTOP2  reduce using rule 83 (factor)
    IN      reduce using rule 83 (factor)
    DISJ    reduce using rule 83 (factor)
    CONJ    reduce using rule 83 (factor)
    ';'     reduce using rule 83 (factor)


State 130

   42 cond: '(' error ')' .

    error    reduce using rule 42 (cond)
    TYPE     reduce using rule 42 (cond)
    SETOP    reduce using rule 42 (cond)
    ARTOP1   reduce using rule 42 (cond)
    ID       reduce using rule 42 (cond)
    IF       reduce using rule 42 (cond)
    FOR      reduce using rule 42 (cond)
    RETURN   reduce using rule 42 (cond)
    FORALL   reduce using rule 42 (cond)
    IS_SET   reduce using rule 42 (cond)
    EXISTS   reduce using rule 42 (cond)
    NEG      reduce using rule 42 (cond)
    READ     reduce using rule 42 (cond)
    WRITE    reduce using rule 42 (cond)
    WRITELN  reduce using rule 42 (cond)
    INTEGER  reduce using rule 42 (cond)
    FLOAT    reduce using rule 42 (cond)
    EMPTY    reduce using rule 42 (cond)
    ';'      reduce using rule 42 (cond)
    '{'      reduce using rule 42 (cond)
    '('      reduce using rule 42 (cond)


State 131

   41 cond: '(' expression ')' .

    error    reduce using rule 41 (cond)
    TYPE     reduce using rule 41 (cond)
    SETOP    reduce using rule 41 (cond)
    ARTOP1   reduce using rule 41 (cond)
    ID       reduce using rule 41 (cond)
    IF       reduce using rule 41 (cond)
    FOR      reduce using rule 41 (cond)
    RETURN   reduce using rule 41 (cond)
    FORALL   reduce using rule 41 (cond)
    IS_SET   reduce using rule 41 (cond)
    EXISTS   reduce using rule 41 (cond)
    NEG      reduce using rule 41 (cond)
    READ     reduce using rule 41 (cond)
    WRITE    reduce using rule 41 (cond)
    WRITELN  reduce using rule 41 (cond)
    INTEGER  reduce using rule 41 (cond)
    FLOAT    reduce using rule 41 (cond)
    EMPTY    reduce using rule 41 (cond)
    ';'      reduce using rule 41 (cond)
    '{'      reduce using rule 41 (cond)
    '('      reduce using rule 41 (cond)


State 132

   33 body: '{' . funcBody '}'

    error    reduce using rule 21 (funcBody)
    TYPE     reduce using rule 21 (funcBody)
    SETOP    reduce using rule 21 (funcBody)
    ARTOP1   reduce using rule 21 (funcBody)
    ID       reduce using rule 21 (funcBody)
    IF       reduce using rule 21 (funcBody)
    FOR      reduce using rule 21 (funcBody)
    RETURN   reduce using rule 21 (funcBody)
    FORALL   reduce using rule 21 (funcBody)
    IS_SET   reduce using rule 21 (funcBody)
    EXISTS   reduce using rule 21 (funcBody)
    NEG      reduce using rule 21 (funcBody)
    READ     reduce using rule 21 (funcBody)
    WRITE    reduce using rule 21 (funcBody)
    WRITELN  reduce using rule 21 (funcBody)
    INTEGER  reduce using rule 21 (funcBody)
    FLOAT    reduce using rule 21 (funcBody)
    EMPTY    reduce using rule 21 (funcBody)
    ';'      reduce using rule 21 (funcBody)
    '}'      reduce using rule 21 (funcBody)
    '('      reduce using rule 21 (funcBody)

    funcBody  go to state 149


State 133

   35 body: varDecl .

    error    reduce using rule 35 (body)
    TYPE     reduce using rule 35 (body)
    SETOP    reduce using rule 35 (body)
    ARTOP1   reduce using rule 35 (body)
    ID       reduce using rule 35 (body)
    IF       reduce using rule 35 (body)
    ELSE     reduce using rule 35 (body)
    FOR      reduce using rule 35 (body)
    RETURN   reduce using rule 35 (body)
    FORALL   reduce using rule 35 (body)
    IS_SET   reduce using rule 35 (body)
    EXISTS   reduce using rule 35 (body)
    NEG      reduce using rule 35 (body)
    READ     reduce using rule 35 (body)
    WRITE    reduce using rule 35 (body)
    WRITELN  reduce using rule 35 (body)
    INTEGER  reduce using rule 35 (body)
    FLOAT    reduce using rule 35 (body)
    EMPTY    reduce using rule 35 (body)
    ';'      reduce using rule 35 (body)
    '}'      reduce using rule 35 (body)
    '('      reduce using rule 35 (body)


State 134

   36 body: funcDecl .

    error    reduce using rule 36 (body)
    TYPE     reduce using rule 36 (body)
    SETOP    reduce using rule 36 (body)
    ARTOP1   reduce using rule 36 (body)
    ID       reduce using rule 36 (body)
    IF       reduce using rule 36 (body)
    ELSE     reduce using rule 36 (body)
    FOR      reduce using rule 36 (body)
    RETURN   reduce using rule 36 (body)
    FORALL   reduce using rule 36 (body)
    IS_SET   reduce using rule 36 (body)
    EXISTS   reduce using rule 36 (body)
    NEG      reduce using rule 36 (body)
    READ     reduce using rule 36 (body)
    WRITE    reduce using rule 36 (body)
    WRITELN  reduce using rule 36 (body)
    INTEGER  reduce using rule 36 (body)
    FLOAT    reduce using rule 36 (body)
    EMPTY    reduce using rule 36 (body)
    ';'      reduce using rule 36 (body)
    '}'      reduce using rule 36 (body)
    '('      reduce using rule 36 (body)


State 135

   34 body: stmt .

    error    reduce using rule 34 (body)
    TYPE     reduce using rule 34 (body)
    SETOP    reduce using rule 34 (body)
    ARTOP1   reduce using rule 34 (body)
    ID       reduce using rule 34 (body)
    IF       reduce using rule 34 (body)
    ELSE     reduce using rule 34 (body)
    FOR      reduce using rule 34 (body)
    RETURN   reduce using rule 34 (body)
    FORALL   reduce using rule 34 (body)
    IS_SET   reduce using rule 34 (body)
    EXISTS   reduce using rule 34 (body)
    NEG      reduce using rule 34 (body)
    READ     reduce using rule 34 (body)
    WRITE    reduce using rule 34 (body)
    WRITELN  reduce using rule 34 (body)
    INTEGER  reduce using rule 34 (body)
    FLOAT    reduce using rule 34 (body)
    EMPTY    reduce using rule 34 (body)
    ';'      reduce using rule 34 (body)
    '}'      reduce using rule 34 (body)
    '('      reduce using rule 34 (body)


State 136

   37 condStmt: IF cond prepareScope body .
   39         | IF cond prepareScope body . ELSE $@3 prepareScope body

    ELSE  shift, and go to state 150

    error    reduce using rule 37 (condStmt)
    TYPE     reduce using rule 37 (condStmt)
    SETOP    reduce using rule 37 (condStmt)
    ARTOP1   reduce using rule 37 (condStmt)
    ID       reduce using rule 37 (condStmt)
    IF       reduce using rule 37 (condStmt)
    FOR      reduce using rule 37 (condStmt)
    RETURN   reduce using rule 37 (condStmt)
    FORALL   reduce using rule 37 (condStmt)
    IS_SET   reduce using rule 37 (condStmt)
    EXISTS   reduce using rule 37 (condStmt)
    NEG      reduce using rule 37 (condStmt)
    READ     reduce using rule 37 (condStmt)
    WRITE    reduce using rule 37 (condStmt)
    WRITELN  reduce using rule 37 (condStmt)
    INTEGER  reduce using rule 37 (condStmt)
    FLOAT    reduce using rule 37 (condStmt)
    EMPTY    reduce using rule 37 (condStmt)
    ';'      reduce using rule 37 (condStmt)
    '}'      reduce using rule 37 (condStmt)
    '('      reduce using rule 37 (condStmt)


State 137

   32 iterStmt: FOR '(' error ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 151


State 138

   28 iterStmt: FOR '(' exprStmt exprStmt . ')' prepareScope body
   29         | FOR '(' exprStmt exprStmt . expression ')' prepareScope body

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 196
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    READ     shift, and go to state 197
    WRITE    shift, and go to state 198
    WRITELN  shift, and go to state 199
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183
    ')'      shift, and go to state 152

    expression   go to state 153
    assign       go to state 200
    var          go to state 201
    inExpr       go to state 202
    outExpr      go to state 203
    simpleExpr   go to state 204
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 139

   31 iterStmt: FORALL '(' error ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 154


State 140

   30 iterStmt: FORALL '(' simpleExpr ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 155


State 141

   81 factor: IS_SET '(' factor ')' .

    RELOP   reduce using rule 81 (factor)
    COMP    reduce using rule 81 (factor)
    ARTOP1  reduce using rule 81 (factor)
    ARTOP2  reduce using rule 81 (factor)
    IN      reduce using rule 81 (factor)
    DISJ    reduce using rule 81 (factor)
    CONJ    reduce using rule 81 (factor)
    ';'     reduce using rule 81 (factor)


State 142

   82 factor: EXISTS '(' simpleExpr ')' .

    RELOP   reduce using rule 82 (factor)
    COMP    reduce using rule 82 (factor)
    ARTOP1  reduce using rule 82 (factor)
    ARTOP2  reduce using rule 82 (factor)
    IN      reduce using rule 82 (factor)
    DISJ    reduce using rule 82 (factor)
    CONJ    reduce using rule 82 (factor)
    ';'     reduce using rule 82 (factor)


State 143

   53 inExpr: READ '(' var ')' .

    ';'  reduce using rule 53 (inExpr)


State 144

   54 outExpr: WRITE '(' output ')' .

    ';'  reduce using rule 54 (outExpr)


State 145

   55 outExpr: WRITELN '(' output ')' .

    ';'  reduce using rule 55 (outExpr)


State 146

   59 simpleExpr: simpleExpr . IN conjExpr
   92 paramList: simpleExpr .

    IN  shift, and go to state 256

    ','  reduce using rule 92 (paramList)
    ')'  reduce using rule 92 (paramList)


State 147

   88 call: var $@4 '(' params . ')'

    ')'  shift, and go to state 156


State 148

   90 params: paramList .
   91 paramList: paramList . ',' simpleExpr

    ','  shift, and go to state 157

    ')'  reduce using rule 90 (params)


State 149

   22 funcBody: funcBody . varDecl
   23         | funcBody . stmt
   33 body: '{' funcBody . '}'

    error    shift, and go to state 33
    TYPE     shift, and go to state 34
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 38
    FOR      shift, and go to state 39
    RETURN   shift, and go to state 40
    FORALL   shift, and go to state 41
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 51
    '}'      shift, and go to state 158
    '('      shift, and go to state 53

    varDecl      go to state 54
    stmt         go to state 55
    iterStmt     go to state 56
    condStmt     go to state 57
    returnStmt   go to state 58
    exprStmt     go to state 59
    expression   go to state 60
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 150

   39 condStmt: IF cond prepareScope body ELSE . $@3 prepareScope body

    error    reduce using rule 38 ($@3)
    TYPE     reduce using rule 38 ($@3)
    SETOP    reduce using rule 38 ($@3)
    ARTOP1   reduce using rule 38 ($@3)
    ID       reduce using rule 38 ($@3)
    IF       reduce using rule 38 ($@3)
    FOR      reduce using rule 38 ($@3)
    RETURN   reduce using rule 38 ($@3)
    FORALL   reduce using rule 38 ($@3)
    IS_SET   reduce using rule 38 ($@3)
    EXISTS   reduce using rule 38 ($@3)
    NEG      reduce using rule 38 ($@3)
    READ     reduce using rule 38 ($@3)
    WRITE    reduce using rule 38 ($@3)
    WRITELN  reduce using rule 38 ($@3)
    INTEGER  reduce using rule 38 ($@3)
    FLOAT    reduce using rule 38 ($@3)
    EMPTY    reduce using rule 38 ($@3)
    ';'      reduce using rule 38 ($@3)
    '{'      reduce using rule 38 ($@3)
    '('      reduce using rule 38 ($@3)

    $@3  go to state 159


State 151

   32 iterStmt: FOR '(' error ')' prepareScope . body

    error    shift, and go to state 33
    TYPE     shift, and go to state 257
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 38
    FOR      shift, and go to state 39
    RETURN   shift, and go to state 40
    FORALL   shift, and go to state 41
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 51
    '{'      shift, and go to state 258
    '('      shift, and go to state 53

    varDecl      go to state 259
    funcDecl     go to state 260
    stmt         go to state 261
    iterStmt     go to state 56
    body         go to state 160
    condStmt     go to state 57
    returnStmt   go to state 58
    exprStmt     go to state 59
    expression   go to state 60
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 152

   28 iterStmt: FOR '(' exprStmt exprStmt ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 161


State 153

   29 iterStmt: FOR '(' exprStmt exprStmt expression . ')' prepareScope body

    ')'  shift, and go to state 162


State 154

   31 iterStmt: FORALL '(' error ')' prepareScope . body

    error    shift, and go to state 33
    TYPE     shift, and go to state 257
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 38
    FOR      shift, and go to state 39
    RETURN   shift, and go to state 40
    FORALL   shift, and go to state 41
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 51
    '{'      shift, and go to state 258
    '('      shift, and go to state 53

    varDecl      go to state 259
    funcDecl     go to state 260
    stmt         go to state 261
    iterStmt     go to state 56
    body         go to state 163
    condStmt     go to state 57
    returnStmt   go to state 58
    exprStmt     go to state 59
    expression   go to state 60
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 155

   30 iterStmt: FORALL '(' simpleExpr ')' prepareScope . body

    error    shift, and go to state 33
    TYPE     shift, and go to state 257
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 38
    FOR      shift, and go to state 39
    RETURN   shift, and go to state 40
    FORALL   shift, and go to state 41
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 51
    '{'      shift, and go to state 258
    '('      shift, and go to state 53

    varDecl      go to state 259
    funcDecl     go to state 260
    stmt         go to state 261
    iterStmt     go to state 56
    body         go to state 164
    condStmt     go to state 57
    returnStmt   go to state 58
    exprStmt     go to state 59
    expression   go to state 60
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 156

   88 call: var $@4 '(' params ')' .

    RELOP   reduce using rule 88 (call)
    COMP    reduce using rule 88 (call)
    ARTOP1  reduce using rule 88 (call)
    ARTOP2  reduce using rule 88 (call)
    IN      reduce using rule 88 (call)
    DISJ    reduce using rule 88 (call)
    CONJ    reduce using rule 88 (call)
    ';'     reduce using rule 88 (call)


State 157

   91 paramList: paramList ',' . simpleExpr

    SETOP    shift, and go to state 234
    ARTOP1   shift, and go to state 235
    ID       shift, and go to state 236
    IS_SET   shift, and go to state 237
    EXISTS   shift, and go to state 238
    NEG      shift, and go to state 239
    INTEGER  shift, and go to state 240
    FLOAT    shift, and go to state 241
    EMPTY    shift, and go to state 242
    '('      shift, and go to state 243

    var          go to state 244
    simpleExpr   go to state 165
    conjExpr     go to state 245
    disjExpr     go to state 246
    compExpr     go to state 247
    relExpr      go to state 248
    artExpr1     go to state 249
    artExpr2     go to state 250
    negExpr      go to state 251
    minusFactor  go to state 252
    factor       go to state 253
    constant     go to state 254
    call         go to state 255


State 158

   33 body: '{' funcBody '}' .

    error    reduce using rule 33 (body)
    TYPE     reduce using rule 33 (body)
    SETOP    reduce using rule 33 (body)
    ARTOP1   reduce using rule 33 (body)
    ID       reduce using rule 33 (body)
    IF       reduce using rule 33 (body)
    ELSE     reduce using rule 33 (body)
    FOR      reduce using rule 33 (body)
    RETURN   reduce using rule 33 (body)
    FORALL   reduce using rule 33 (body)
    IS_SET   reduce using rule 33 (body)
    EXISTS   reduce using rule 33 (body)
    NEG      reduce using rule 33 (body)
    READ     reduce using rule 33 (body)
    WRITE    reduce using rule 33 (body)
    WRITELN  reduce using rule 33 (body)
    INTEGER  reduce using rule 33 (body)
    FLOAT    reduce using rule 33 (body)
    EMPTY    reduce using rule 33 (body)
    ';'      reduce using rule 33 (body)
    '}'      reduce using rule 33 (body)
    '('      reduce using rule 33 (body)


State 159

   39 condStmt: IF cond prepareScope body ELSE $@3 . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 166


State 160

   32 iterStmt: FOR '(' error ')' prepareScope body .

    error    reduce using rule 32 (iterStmt)
    TYPE     reduce using rule 32 (iterStmt)
    SETOP    reduce using rule 32 (iterStmt)
    ARTOP1   reduce using rule 32 (iterStmt)
    ID       reduce using rule 32 (iterStmt)
    IF       reduce using rule 32 (iterStmt)
    FOR      reduce using rule 32 (iterStmt)
    RETURN   reduce using rule 32 (iterStmt)
    FORALL   reduce using rule 32 (iterStmt)
    IS_SET   reduce using rule 32 (iterStmt)
    EXISTS   reduce using rule 32 (iterStmt)
    NEG      reduce using rule 32 (iterStmt)
    READ     reduce using rule 32 (iterStmt)
    WRITE    reduce using rule 32 (iterStmt)
    WRITELN  reduce using rule 32 (iterStmt)
    INTEGER  reduce using rule 32 (iterStmt)
    FLOAT    reduce using rule 32 (iterStmt)
    EMPTY    reduce using rule 32 (iterStmt)
    ';'      reduce using rule 32 (iterStmt)
    '}'      reduce using rule 32 (iterStmt)
    '('      reduce using rule 32 (iterStmt)


State 161

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope . body

    error    shift, and go to state 33
    TYPE     shift, and go to state 257
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 38
    FOR      shift, and go to state 39
    RETURN   shift, and go to state 40
    FORALL   shift, and go to state 41
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 51
    '{'      shift, and go to state 258
    '('      shift, and go to state 53

    varDecl      go to state 259
    funcDecl     go to state 260
    stmt         go to state 261
    iterStmt     go to state 56
    body         go to state 167
    condStmt     go to state 57
    returnStmt   go to state 58
    exprStmt     go to state 59
    expression   go to state 60
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 162

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 168


State 163

   31 iterStmt: FORALL '(' error ')' prepareScope body .

    error    reduce using rule 31 (iterStmt)
    TYPE     reduce using rule 31 (iterStmt)
    SETOP    reduce using rule 31 (iterStmt)
    ARTOP1   reduce using rule 31 (iterStmt)
    ID       reduce using rule 31 (iterStmt)
    IF       reduce using rule 31 (iterStmt)
    FOR      reduce using rule 31 (iterStmt)
    RETURN   reduce using rule 31 (iterStmt)
    FORALL   reduce using rule 31 (iterStmt)
    IS_SET   reduce using rule 31 (iterStmt)
    EXISTS   reduce using rule 31 (iterStmt)
    NEG      reduce using rule 31 (iterStmt)
    READ     reduce using rule 31 (iterStmt)
    WRITE    reduce using rule 31 (iterStmt)
    WRITELN  reduce using rule 31 (iterStmt)
    INTEGER  reduce using rule 31 (iterStmt)
    FLOAT    reduce using rule 31 (iterStmt)
    EMPTY    reduce using rule 31 (iterStmt)
    ';'      reduce using rule 31 (iterStmt)
    '}'      reduce using rule 31 (iterStmt)
    '('      reduce using rule 31 (iterStmt)


State 164

   30 iterStmt: FORALL '(' simpleExpr ')' prepareScope body .

    error    reduce using rule 30 (iterStmt)
    TYPE     reduce using rule 30 (iterStmt)
    SETOP    reduce using rule 30 (iterStmt)
    ARTOP1   reduce using rule 30 (iterStmt)
    ID       reduce using rule 30 (iterStmt)
    IF       reduce using rule 30 (iterStmt)
    FOR      reduce using rule 30 (iterStmt)
    RETURN   reduce using rule 30 (iterStmt)
    FORALL   reduce using rule 30 (iterStmt)
    IS_SET   reduce using rule 30 (iterStmt)
    EXISTS   reduce using rule 30 (iterStmt)
    NEG      reduce using rule 30 (iterStmt)
    READ     reduce using rule 30 (iterStmt)
    WRITE    reduce using rule 30 (iterStmt)
    WRITELN  reduce using rule 30 (iterStmt)
    INTEGER  reduce using rule 30 (iterStmt)
    FLOAT    reduce using rule 30 (iterStmt)
    EMPTY    reduce using rule 30 (iterStmt)
    ';'      reduce using rule 30 (iterStmt)
    '}'      reduce using rule 30 (iterStmt)
    '('      reduce using rule 30 (iterStmt)


State 165

   59 simpleExpr: simpleExpr . IN conjExpr
   91 paramList: paramList ',' simpleExpr .

    IN  shift, and go to state 256

    ','  reduce using rule 91 (paramList)
    ')'  reduce using rule 91 (paramList)


State 166

   39 condStmt: IF cond prepareScope body ELSE $@3 prepareScope . body

    error    shift, and go to state 33
    TYPE     shift, and go to state 257
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 38
    FOR      shift, and go to state 39
    RETURN   shift, and go to state 40
    FORALL   shift, and go to state 41
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 51
    '{'      shift, and go to state 258
    '('      shift, and go to state 53

    varDecl      go to state 259
    funcDecl     go to state 260
    stmt         go to state 261
    iterStmt     go to state 56
    body         go to state 169
    condStmt     go to state 57
    returnStmt   go to state 58
    exprStmt     go to state 59
    expression   go to state 60
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 167

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope body .

    error    reduce using rule 28 (iterStmt)
    TYPE     reduce using rule 28 (iterStmt)
    SETOP    reduce using rule 28 (iterStmt)
    ARTOP1   reduce using rule 28 (iterStmt)
    ID       reduce using rule 28 (iterStmt)
    IF       reduce using rule 28 (iterStmt)
    FOR      reduce using rule 28 (iterStmt)
    RETURN   reduce using rule 28 (iterStmt)
    FORALL   reduce using rule 28 (iterStmt)
    IS_SET   reduce using rule 28 (iterStmt)
    EXISTS   reduce using rule 28 (iterStmt)
    NEG      reduce using rule 28 (iterStmt)
    READ     reduce using rule 28 (iterStmt)
    WRITE    reduce using rule 28 (iterStmt)
    WRITELN  reduce using rule 28 (iterStmt)
    INTEGER  reduce using rule 28 (iterStmt)
    FLOAT    reduce using rule 28 (iterStmt)
    EMPTY    reduce using rule 28 (iterStmt)
    ';'      reduce using rule 28 (iterStmt)
    '}'      reduce using rule 28 (iterStmt)
    '('      reduce using rule 28 (iterStmt)


State 168

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' prepareScope . body

    error    shift, and go to state 33
    TYPE     shift, and go to state 257
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 38
    FOR      shift, and go to state 39
    RETURN   shift, and go to state 40
    FORALL   shift, and go to state 41
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 51
    '{'      shift, and go to state 258
    '('      shift, and go to state 53

    varDecl      go to state 259
    funcDecl     go to state 260
    stmt         go to state 261
    iterStmt     go to state 56
    body         go to state 170
    condStmt     go to state 57
    returnStmt   go to state 58
    exprStmt     go to state 59
    expression   go to state 60
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 169

   39 condStmt: IF cond prepareScope body ELSE $@3 prepareScope body .

    error    reduce using rule 39 (condStmt)
    TYPE     reduce using rule 39 (condStmt)
    SETOP    reduce using rule 39 (condStmt)
    ARTOP1   reduce using rule 39 (condStmt)
    ID       reduce using rule 39 (condStmt)
    IF       reduce using rule 39 (condStmt)
    FOR      reduce using rule 39 (condStmt)
    RETURN   reduce using rule 39 (condStmt)
    FORALL   reduce using rule 39 (condStmt)
    IS_SET   reduce using rule 39 (condStmt)
    EXISTS   reduce using rule 39 (condStmt)
    NEG      reduce using rule 39 (condStmt)
    READ     reduce using rule 39 (condStmt)
    WRITE    reduce using rule 39 (condStmt)
    WRITELN  reduce using rule 39 (condStmt)
    INTEGER  reduce using rule 39 (condStmt)
    FLOAT    reduce using rule 39 (condStmt)
    EMPTY    reduce using rule 39 (condStmt)
    ';'      reduce using rule 39 (condStmt)
    '}'      reduce using rule 39 (condStmt)
    '('      reduce using rule 39 (condStmt)


State 170

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' prepareScope body .

    error    reduce using rule 29 (iterStmt)
    TYPE     reduce using rule 29 (iterStmt)
    SETOP    reduce using rule 29 (iterStmt)
    ARTOP1   reduce using rule 29 (iterStmt)
    ID       reduce using rule 29 (iterStmt)
    IF       reduce using rule 29 (iterStmt)
    FOR      reduce using rule 29 (iterStmt)
    RETURN   reduce using rule 29 (iterStmt)
    FORALL   reduce using rule 29 (iterStmt)
    IS_SET   reduce using rule 29 (iterStmt)
    EXISTS   reduce using rule 29 (iterStmt)
    NEG      reduce using rule 29 (iterStmt)
    READ     reduce using rule 29 (iterStmt)
    WRITE    reduce using rule 29 (iterStmt)
    WRITELN  reduce using rule 29 (iterStmt)
    INTEGER  reduce using rule 29 (iterStmt)
    FLOAT    reduce using rule 29 (iterStmt)
    EMPTY    reduce using rule 29 (iterStmt)
    ';'      reduce using rule 29 (iterStmt)
    '}'      reduce using rule 29 (iterStmt)
    '('      reduce using rule 29 (iterStmt)


State 171

    8 varDecl: TYPE error .

    error    reduce using rule 8 (varDecl)
    TYPE     reduce using rule 8 (varDecl)
    SETOP    reduce using rule 8 (varDecl)
    ARTOP1   reduce using rule 8 (varDecl)
    ID       reduce using rule 8 (varDecl)
    IF       reduce using rule 8 (varDecl)
    FOR      reduce using rule 8 (varDecl)
    RETURN   reduce using rule 8 (varDecl)
    FORALL   reduce using rule 8 (varDecl)
    IS_SET   reduce using rule 8 (varDecl)
    EXISTS   reduce using rule 8 (varDecl)
    NEG      reduce using rule 8 (varDecl)
    READ     reduce using rule 8 (varDecl)
    WRITE    reduce using rule 8 (varDecl)
    WRITELN  reduce using rule 8 (varDecl)
    INTEGER  reduce using rule 8 (varDecl)
    FLOAT    reduce using rule 8 (varDecl)
    EMPTY    reduce using rule 8 (varDecl)
    ';'      reduce using rule 8 (varDecl)
    '}'      reduce using rule 8 (varDecl)
    '('      reduce using rule 8 (varDecl)


State 172

    7 varDecl: TYPE varList . ';'
    9 varList: varList . ',' new_id

    ';'  shift, and go to state 262
    ','  shift, and go to state 15


State 173

   52 var: ID .
   77 factor: ID .

    RELOP   reduce using rule 77 (factor)
    COMP    reduce using rule 77 (factor)
    ARTOP1  reduce using rule 77 (factor)
    ARTOP2  reduce using rule 77 (factor)
    IN      reduce using rule 77 (factor)
    DISJ    reduce using rule 77 (factor)
    CONJ    reduce using rule 77 (factor)
    ';'     reduce using rule 77 (factor)
    '('     reduce using rule 52 (var)


State 174

   83 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 263


State 175

   75 minusFactor: ARTOP1 . factor

    SETOP    shift, and go to state 174
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var       go to state 184
    factor    go to state 264
    constant  go to state 194
    call      go to state 195


State 176

   52 var: ID .
   77 factor: ID .

    RELOP   reduce using rule 77 (factor)
    COMP    reduce using rule 77 (factor)
    ARTOP1  reduce using rule 77 (factor)
    ARTOP2  reduce using rule 77 (factor)
    IN      reduce using rule 77 (factor)
    DISJ    reduce using rule 77 (factor)
    CONJ    reduce using rule 77 (factor)
    '('     reduce using rule 52 (var)
    ')'     reduce using rule 77 (factor)


State 177

   81 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 265


State 178

   82 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 266


State 179

   73 negExpr: NEG . negExpr

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    negExpr      go to state 267
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 180

   84 constant: INTEGER .

    RELOP   reduce using rule 84 (constant)
    COMP    reduce using rule 84 (constant)
    ARTOP1  reduce using rule 84 (constant)
    ARTOP2  reduce using rule 84 (constant)
    IN      reduce using rule 84 (constant)
    DISJ    reduce using rule 84 (constant)
    CONJ    reduce using rule 84 (constant)
    ')'     reduce using rule 84 (constant)


State 181

   85 constant: FLOAT .

    RELOP   reduce using rule 85 (constant)
    COMP    reduce using rule 85 (constant)
    ARTOP1  reduce using rule 85 (constant)
    ARTOP2  reduce using rule 85 (constant)
    IN      reduce using rule 85 (constant)
    DISJ    reduce using rule 85 (constant)
    CONJ    reduce using rule 85 (constant)
    ')'     reduce using rule 85 (constant)


State 182

   86 constant: EMPTY .

    RELOP   reduce using rule 86 (constant)
    COMP    reduce using rule 86 (constant)
    ARTOP1  reduce using rule 86 (constant)
    ARTOP2  reduce using rule 86 (constant)
    IN      reduce using rule 86 (constant)
    DISJ    reduce using rule 86 (constant)
    CONJ    reduce using rule 86 (constant)
    ')'     reduce using rule 86 (constant)


State 183

   78 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 268
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 184

   88 call: var . $@4 '(' params ')'

    '('  reduce using rule 87 ($@4)

    $@4  go to state 269


State 185

   60 simpleExpr: conjExpr .
   61 conjExpr: conjExpr . CONJ disjExpr

    CONJ  shift, and go to state 270

    IN   reduce using rule 60 (simpleExpr)
    ')'  reduce using rule 60 (simpleExpr)


State 186

   62 conjExpr: disjExpr .
   63 disjExpr: disjExpr . DISJ compExpr

    DISJ  shift, and go to state 271

    IN    reduce using rule 62 (conjExpr)
    CONJ  reduce using rule 62 (conjExpr)
    ')'   reduce using rule 62 (conjExpr)


State 187

   64 disjExpr: compExpr .
   65 compExpr: compExpr . COMP relExpr

    COMP  shift, and go to state 272

    IN    reduce using rule 64 (disjExpr)
    DISJ  reduce using rule 64 (disjExpr)
    CONJ  reduce using rule 64 (disjExpr)
    ')'   reduce using rule 64 (disjExpr)


State 188

   66 compExpr: relExpr .
   67 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 273

    COMP  reduce using rule 66 (compExpr)
    IN    reduce using rule 66 (compExpr)
    DISJ  reduce using rule 66 (compExpr)
    CONJ  reduce using rule 66 (compExpr)
    ')'   reduce using rule 66 (compExpr)


State 189

   68 relExpr: artExpr1 .
   69 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 274

    RELOP  reduce using rule 68 (relExpr)
    COMP   reduce using rule 68 (relExpr)
    IN     reduce using rule 68 (relExpr)
    DISJ   reduce using rule 68 (relExpr)
    CONJ   reduce using rule 68 (relExpr)
    ')'    reduce using rule 68 (relExpr)


State 190

   70 artExpr1: artExpr2 .
   71 artExpr2: artExpr2 . ARTOP2 negExpr

    ARTOP2  shift, and go to state 275

    RELOP   reduce using rule 70 (artExpr1)
    COMP    reduce using rule 70 (artExpr1)
    ARTOP1  reduce using rule 70 (artExpr1)
    IN      reduce using rule 70 (artExpr1)
    DISJ    reduce using rule 70 (artExpr1)
    CONJ    reduce using rule 70 (artExpr1)
    ')'     reduce using rule 70 (artExpr1)


State 191

   72 artExpr2: negExpr .

    RELOP   reduce using rule 72 (artExpr2)
    COMP    reduce using rule 72 (artExpr2)
    ARTOP1  reduce using rule 72 (artExpr2)
    ARTOP2  reduce using rule 72 (artExpr2)
    IN      reduce using rule 72 (artExpr2)
    DISJ    reduce using rule 72 (artExpr2)
    CONJ    reduce using rule 72 (artExpr2)
    ')'     reduce using rule 72 (artExpr2)


State 192

   74 negExpr: minusFactor .

    RELOP   reduce using rule 74 (negExpr)
    COMP    reduce using rule 74 (negExpr)
    ARTOP1  reduce using rule 74 (negExpr)
    ARTOP2  reduce using rule 74 (negExpr)
    IN      reduce using rule 74 (negExpr)
    DISJ    reduce using rule 74 (negExpr)
    CONJ    reduce using rule 74 (negExpr)
    ')'     reduce using rule 74 (negExpr)


State 193

   76 minusFactor: factor .

    RELOP   reduce using rule 76 (minusFactor)
    COMP    reduce using rule 76 (minusFactor)
    ARTOP1  reduce using rule 76 (minusFactor)
    ARTOP2  reduce using rule 76 (minusFactor)
    IN      reduce using rule 76 (minusFactor)
    DISJ    reduce using rule 76 (minusFactor)
    CONJ    reduce using rule 76 (minusFactor)
    ')'     reduce using rule 76 (minusFactor)


State 194

   79 factor: constant .

    RELOP   reduce using rule 79 (factor)
    COMP    reduce using rule 79 (factor)
    ARTOP1  reduce using rule 79 (factor)
    ARTOP2  reduce using rule 79 (factor)
    IN      reduce using rule 79 (factor)
    DISJ    reduce using rule 79 (factor)
    CONJ    reduce using rule 79 (factor)
    ')'     reduce using rule 79 (factor)


State 195

   80 factor: call .

    RELOP   reduce using rule 80 (factor)
    COMP    reduce using rule 80 (factor)
    ARTOP1  reduce using rule 80 (factor)
    ARTOP2  reduce using rule 80 (factor)
    IN      reduce using rule 80 (factor)
    DISJ    reduce using rule 80 (factor)
    CONJ    reduce using rule 80 (factor)
    ')'     reduce using rule 80 (factor)


State 196

   52 var: ID .
   77 factor: ID .

    RELOP   reduce using rule 77 (factor)
    COMP    reduce using rule 77 (factor)
    ARTOP1  reduce using rule 77 (factor)
    ARTOP2  reduce using rule 77 (factor)
    IN      reduce using rule 77 (factor)
    DISJ    reduce using rule 77 (factor)
    CONJ    reduce using rule 77 (factor)
    '('     reduce using rule 52 (var)
    ')'     reduce using rule 77 (factor)
    '='     reduce using rule 52 (var)


State 197

   53 inExpr: READ . '(' var ')'

    '('  shift, and go to state 276


State 198

   54 outExpr: WRITE . '(' output ')'

    '('  shift, and go to state 277


State 199

   55 outExpr: WRITELN . '(' output ')'

    '('  shift, and go to state 278


State 200

   47 expression: assign .

    ')'  reduce using rule 47 (expression)


State 201

   51 assign: var . '=' simpleExpr
   88 call: var . $@4 '(' params ')'

    '='  shift, and go to state 279

    '('  reduce using rule 87 ($@4)

    $@4  go to state 269


State 202

   48 expression: inExpr .

    ')'  reduce using rule 48 (expression)


State 203

   49 expression: outExpr .

    ')'  reduce using rule 49 (expression)


State 204

   50 expression: simpleExpr .
   59 simpleExpr: simpleExpr . IN conjExpr

    IN  shift, and go to state 218

    ')'  reduce using rule 50 (expression)


State 205

   46 exprStmt: ';' .

    error    reduce using rule 46 (exprStmt)
    SETOP    reduce using rule 46 (exprStmt)
    ARTOP1   reduce using rule 46 (exprStmt)
    ID       reduce using rule 46 (exprStmt)
    IS_SET   reduce using rule 46 (exprStmt)
    EXISTS   reduce using rule 46 (exprStmt)
    NEG      reduce using rule 46 (exprStmt)
    READ     reduce using rule 46 (exprStmt)
    WRITE    reduce using rule 46 (exprStmt)
    WRITELN  reduce using rule 46 (exprStmt)
    INTEGER  reduce using rule 46 (exprStmt)
    FLOAT    reduce using rule 46 (exprStmt)
    EMPTY    reduce using rule 46 (exprStmt)
    ';'      reduce using rule 46 (exprStmt)
    '('      reduce using rule 46 (exprStmt)


State 206

   44 exprStmt: expression . ';'

    ';'  shift, and go to state 280


State 207

   83 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 281


State 208

   52 var: ID .
   77 factor: ID .

    '('  reduce using rule 52 (var)
    ')'  reduce using rule 77 (factor)


State 209

   81 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 282


State 210

   82 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 283


State 211

   84 constant: INTEGER .

    ')'  reduce using rule 84 (constant)


State 212

   85 constant: FLOAT .

    ')'  reduce using rule 85 (constant)


State 213

   86 constant: EMPTY .

    ')'  reduce using rule 86 (constant)


State 214

   78 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 284
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 215

   88 call: var . $@4 '(' params ')'

    '('  reduce using rule 87 ($@4)

    $@4  go to state 285


State 216

   79 factor: constant .

    ')'  reduce using rule 79 (factor)


State 217

   80 factor: call .

    ')'  reduce using rule 80 (factor)


State 218

   59 simpleExpr: simpleExpr IN . conjExpr

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    conjExpr     go to state 286
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 219

   45 exprStmt: error .

    error    reduce using rule 45 (exprStmt)
    TYPE     reduce using rule 45 (exprStmt)
    SETOP    reduce using rule 45 (exprStmt)
    ARTOP1   reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IF       reduce using rule 45 (exprStmt)
    ELSE     reduce using rule 45 (exprStmt)
    FOR      reduce using rule 45 (exprStmt)
    RETURN   reduce using rule 45 (exprStmt)
    FORALL   reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    ';'      reduce using rule 45 (exprStmt)
    '}'      reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)


State 220

    7 varDecl: TYPE . varList ';'
    8        | TYPE . error
   14 funcDecl: TYPE . ID $@1 arguments $@2 '{' funcBody '}'

    error  shift, and go to state 287
    ID     shift, and go to state 288

    varList  go to state 289
    new_id   go to state 12


State 221

   37 condStmt: IF . cond prepareScope body
   39         | IF . cond prepareScope body ELSE $@3 prepareScope body

    '('  shift, and go to state 80

    cond  go to state 290


State 222

   28 iterStmt: FOR . '(' exprStmt exprStmt ')' prepareScope body
   29         | FOR . '(' exprStmt exprStmt expression ')' prepareScope body
   32         | FOR . '(' error ')' prepareScope body

    '('  shift, and go to state 291


State 223

   43 returnStmt: RETURN . exprStmt

    error    shift, and go to state 219
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 225
    '('      shift, and go to state 53

    exprStmt     go to state 292
    expression   go to state 230
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 224

   30 iterStmt: FORALL . '(' simpleExpr ')' prepareScope body
   31         | FORALL . '(' error ')' prepareScope body

    '('  shift, and go to state 293


State 225

   46 exprStmt: ';' .

    error    reduce using rule 46 (exprStmt)
    TYPE     reduce using rule 46 (exprStmt)
    SETOP    reduce using rule 46 (exprStmt)
    ARTOP1   reduce using rule 46 (exprStmt)
    ID       reduce using rule 46 (exprStmt)
    IF       reduce using rule 46 (exprStmt)
    ELSE     reduce using rule 46 (exprStmt)
    FOR      reduce using rule 46 (exprStmt)
    RETURN   reduce using rule 46 (exprStmt)
    FORALL   reduce using rule 46 (exprStmt)
    IS_SET   reduce using rule 46 (exprStmt)
    EXISTS   reduce using rule 46 (exprStmt)
    NEG      reduce using rule 46 (exprStmt)
    READ     reduce using rule 46 (exprStmt)
    WRITE    reduce using rule 46 (exprStmt)
    WRITELN  reduce using rule 46 (exprStmt)
    INTEGER  reduce using rule 46 (exprStmt)
    FLOAT    reduce using rule 46 (exprStmt)
    EMPTY    reduce using rule 46 (exprStmt)
    ';'      reduce using rule 46 (exprStmt)
    '}'      reduce using rule 46 (exprStmt)
    '('      reduce using rule 46 (exprStmt)


State 226

   26 stmt: iterStmt .

    error    reduce using rule 26 (stmt)
    TYPE     reduce using rule 26 (stmt)
    SETOP    reduce using rule 26 (stmt)
    ARTOP1   reduce using rule 26 (stmt)
    ID       reduce using rule 26 (stmt)
    IF       reduce using rule 26 (stmt)
    ELSE     reduce using rule 26 (stmt)
    FOR      reduce using rule 26 (stmt)
    RETURN   reduce using rule 26 (stmt)
    FORALL   reduce using rule 26 (stmt)
    IS_SET   reduce using rule 26 (stmt)
    EXISTS   reduce using rule 26 (stmt)
    NEG      reduce using rule 26 (stmt)
    READ     reduce using rule 26 (stmt)
    WRITE    reduce using rule 26 (stmt)
    WRITELN  reduce using rule 26 (stmt)
    INTEGER  reduce using rule 26 (stmt)
    FLOAT    reduce using rule 26 (stmt)
    EMPTY    reduce using rule 26 (stmt)
    ';'      reduce using rule 26 (stmt)
    '}'      reduce using rule 26 (stmt)
    '('      reduce using rule 26 (stmt)


State 227

   27 stmt: condStmt .

    error    reduce using rule 27 (stmt)
    TYPE     reduce using rule 27 (stmt)
    SETOP    reduce using rule 27 (stmt)
    ARTOP1   reduce using rule 27 (stmt)
    ID       reduce using rule 27 (stmt)
    IF       reduce using rule 27 (stmt)
    ELSE     reduce using rule 27 (stmt)
    FOR      reduce using rule 27 (stmt)
    RETURN   reduce using rule 27 (stmt)
    FORALL   reduce using rule 27 (stmt)
    IS_SET   reduce using rule 27 (stmt)
    EXISTS   reduce using rule 27 (stmt)
    NEG      reduce using rule 27 (stmt)
    READ     reduce using rule 27 (stmt)
    WRITE    reduce using rule 27 (stmt)
    WRITELN  reduce using rule 27 (stmt)
    INTEGER  reduce using rule 27 (stmt)
    FLOAT    reduce using rule 27 (stmt)
    EMPTY    reduce using rule 27 (stmt)
    ';'      reduce using rule 27 (stmt)
    '}'      reduce using rule 27 (stmt)
    '('      reduce using rule 27 (stmt)


State 228

   25 stmt: returnStmt .

    error    reduce using rule 25 (stmt)
    TYPE     reduce using rule 25 (stmt)
    SETOP    reduce using rule 25 (stmt)
    ARTOP1   reduce using rule 25 (stmt)
    ID       reduce using rule 25 (stmt)
    IF       reduce using rule 25 (stmt)
    ELSE     reduce using rule 25 (stmt)
    FOR      reduce using rule 25 (stmt)
    RETURN   reduce using rule 25 (stmt)
    FORALL   reduce using rule 25 (stmt)
    IS_SET   reduce using rule 25 (stmt)
    EXISTS   reduce using rule 25 (stmt)
    NEG      reduce using rule 25 (stmt)
    READ     reduce using rule 25 (stmt)
    WRITE    reduce using rule 25 (stmt)
    WRITELN  reduce using rule 25 (stmt)
    INTEGER  reduce using rule 25 (stmt)
    FLOAT    reduce using rule 25 (stmt)
    EMPTY    reduce using rule 25 (stmt)
    ';'      reduce using rule 25 (stmt)
    '}'      reduce using rule 25 (stmt)
    '('      reduce using rule 25 (stmt)


State 229

   24 stmt: exprStmt .

    error    reduce using rule 24 (stmt)
    TYPE     reduce using rule 24 (stmt)
    SETOP    reduce using rule 24 (stmt)
    ARTOP1   reduce using rule 24 (stmt)
    ID       reduce using rule 24 (stmt)
    IF       reduce using rule 24 (stmt)
    ELSE     reduce using rule 24 (stmt)
    FOR      reduce using rule 24 (stmt)
    RETURN   reduce using rule 24 (stmt)
    FORALL   reduce using rule 24 (stmt)
    IS_SET   reduce using rule 24 (stmt)
    EXISTS   reduce using rule 24 (stmt)
    NEG      reduce using rule 24 (stmt)
    READ     reduce using rule 24 (stmt)
    WRITE    reduce using rule 24 (stmt)
    WRITELN  reduce using rule 24 (stmt)
    INTEGER  reduce using rule 24 (stmt)
    FLOAT    reduce using rule 24 (stmt)
    EMPTY    reduce using rule 24 (stmt)
    ';'      reduce using rule 24 (stmt)
    '}'      reduce using rule 24 (stmt)
    '('      reduce using rule 24 (stmt)


State 230

   44 exprStmt: expression . ';'

    ';'  shift, and go to state 294


State 231

   45 exprStmt: error .

    SETOP    reduce using rule 45 (exprStmt)
    ARTOP1   reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)
    ')'      reduce using rule 45 (exprStmt)


State 232

   46 exprStmt: ';' .

    SETOP    reduce using rule 46 (exprStmt)
    ARTOP1   reduce using rule 46 (exprStmt)
    ID       reduce using rule 46 (exprStmt)
    IS_SET   reduce using rule 46 (exprStmt)
    EXISTS   reduce using rule 46 (exprStmt)
    NEG      reduce using rule 46 (exprStmt)
    READ     reduce using rule 46 (exprStmt)
    WRITE    reduce using rule 46 (exprStmt)
    WRITELN  reduce using rule 46 (exprStmt)
    INTEGER  reduce using rule 46 (exprStmt)
    FLOAT    reduce using rule 46 (exprStmt)
    EMPTY    reduce using rule 46 (exprStmt)
    '('      reduce using rule 46 (exprStmt)
    ')'      reduce using rule 46 (exprStmt)


State 233

   44 exprStmt: expression . ';'

    ';'  shift, and go to state 295


State 234

   83 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 296


State 235

   75 minusFactor: ARTOP1 . factor

    SETOP    shift, and go to state 234
    ID       shift, and go to state 236
    IS_SET   shift, and go to state 237
    EXISTS   shift, and go to state 238
    INTEGER  shift, and go to state 240
    FLOAT    shift, and go to state 241
    EMPTY    shift, and go to state 242
    '('      shift, and go to state 243

    var       go to state 244
    factor    go to state 297
    constant  go to state 254
    call      go to state 255


State 236

   52 var: ID .
   77 factor: ID .

    RELOP   reduce using rule 77 (factor)
    COMP    reduce using rule 77 (factor)
    ARTOP1  reduce using rule 77 (factor)
    ARTOP2  reduce using rule 77 (factor)
    IN      reduce using rule 77 (factor)
    DISJ    reduce using rule 77 (factor)
    CONJ    reduce using rule 77 (factor)
    ','     reduce using rule 77 (factor)
    '('     reduce using rule 52 (var)
    ')'     reduce using rule 77 (factor)


State 237

   81 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 298


State 238

   82 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 299


State 239

   73 negExpr: NEG . negExpr

    SETOP    shift, and go to state 234
    ARTOP1   shift, and go to state 235
    ID       shift, and go to state 236
    IS_SET   shift, and go to state 237
    EXISTS   shift, and go to state 238
    NEG      shift, and go to state 239
    INTEGER  shift, and go to state 240
    FLOAT    shift, and go to state 241
    EMPTY    shift, and go to state 242
    '('      shift, and go to state 243

    var          go to state 244
    negExpr      go to state 300
    minusFactor  go to state 252
    factor       go to state 253
    constant     go to state 254
    call         go to state 255


State 240

   84 constant: INTEGER .

    RELOP   reduce using rule 84 (constant)
    COMP    reduce using rule 84 (constant)
    ARTOP1  reduce using rule 84 (constant)
    ARTOP2  reduce using rule 84 (constant)
    IN      reduce using rule 84 (constant)
    DISJ    reduce using rule 84 (constant)
    CONJ    reduce using rule 84 (constant)
    ','     reduce using rule 84 (constant)
    ')'     reduce using rule 84 (constant)


State 241

   85 constant: FLOAT .

    RELOP   reduce using rule 85 (constant)
    COMP    reduce using rule 85 (constant)
    ARTOP1  reduce using rule 85 (constant)
    ARTOP2  reduce using rule 85 (constant)
    IN      reduce using rule 85 (constant)
    DISJ    reduce using rule 85 (constant)
    CONJ    reduce using rule 85 (constant)
    ','     reduce using rule 85 (constant)
    ')'     reduce using rule 85 (constant)


State 242

   86 constant: EMPTY .

    RELOP   reduce using rule 86 (constant)
    COMP    reduce using rule 86 (constant)
    ARTOP1  reduce using rule 86 (constant)
    ARTOP2  reduce using rule 86 (constant)
    IN      reduce using rule 86 (constant)
    DISJ    reduce using rule 86 (constant)
    CONJ    reduce using rule 86 (constant)
    ','     reduce using rule 86 (constant)
    ')'     reduce using rule 86 (constant)


State 243

   78 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 301
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 244

   88 call: var . $@4 '(' params ')'

    '('  reduce using rule 87 ($@4)

    $@4  go to state 302


State 245

   60 simpleExpr: conjExpr .
   61 conjExpr: conjExpr . CONJ disjExpr

    CONJ  shift, and go to state 303

    IN   reduce using rule 60 (simpleExpr)
    ','  reduce using rule 60 (simpleExpr)
    ')'  reduce using rule 60 (simpleExpr)


State 246

   62 conjExpr: disjExpr .
   63 disjExpr: disjExpr . DISJ compExpr

    DISJ  shift, and go to state 304

    IN    reduce using rule 62 (conjExpr)
    CONJ  reduce using rule 62 (conjExpr)
    ','   reduce using rule 62 (conjExpr)
    ')'   reduce using rule 62 (conjExpr)


State 247

   64 disjExpr: compExpr .
   65 compExpr: compExpr . COMP relExpr

    COMP  shift, and go to state 305

    IN    reduce using rule 64 (disjExpr)
    DISJ  reduce using rule 64 (disjExpr)
    CONJ  reduce using rule 64 (disjExpr)
    ','   reduce using rule 64 (disjExpr)
    ')'   reduce using rule 64 (disjExpr)


State 248

   66 compExpr: relExpr .
   67 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 306

    COMP  reduce using rule 66 (compExpr)
    IN    reduce using rule 66 (compExpr)
    DISJ  reduce using rule 66 (compExpr)
    CONJ  reduce using rule 66 (compExpr)
    ','   reduce using rule 66 (compExpr)
    ')'   reduce using rule 66 (compExpr)


State 249

   68 relExpr: artExpr1 .
   69 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 307

    RELOP  reduce using rule 68 (relExpr)
    COMP   reduce using rule 68 (relExpr)
    IN     reduce using rule 68 (relExpr)
    DISJ   reduce using rule 68 (relExpr)
    CONJ   reduce using rule 68 (relExpr)
    ','    reduce using rule 68 (relExpr)
    ')'    reduce using rule 68 (relExpr)


State 250

   70 artExpr1: artExpr2 .
   71 artExpr2: artExpr2 . ARTOP2 negExpr

    ARTOP2  shift, and go to state 308

    RELOP   reduce using rule 70 (artExpr1)
    COMP    reduce using rule 70 (artExpr1)
    ARTOP1  reduce using rule 70 (artExpr1)
    IN      reduce using rule 70 (artExpr1)
    DISJ    reduce using rule 70 (artExpr1)
    CONJ    reduce using rule 70 (artExpr1)
    ','     reduce using rule 70 (artExpr1)
    ')'     reduce using rule 70 (artExpr1)


State 251

   72 artExpr2: negExpr .

    RELOP   reduce using rule 72 (artExpr2)
    COMP    reduce using rule 72 (artExpr2)
    ARTOP1  reduce using rule 72 (artExpr2)
    ARTOP2  reduce using rule 72 (artExpr2)
    IN      reduce using rule 72 (artExpr2)
    DISJ    reduce using rule 72 (artExpr2)
    CONJ    reduce using rule 72 (artExpr2)
    ','     reduce using rule 72 (artExpr2)
    ')'     reduce using rule 72 (artExpr2)


State 252

   74 negExpr: minusFactor .

    RELOP   reduce using rule 74 (negExpr)
    COMP    reduce using rule 74 (negExpr)
    ARTOP1  reduce using rule 74 (negExpr)
    ARTOP2  reduce using rule 74 (negExpr)
    IN      reduce using rule 74 (negExpr)
    DISJ    reduce using rule 74 (negExpr)
    CONJ    reduce using rule 74 (negExpr)
    ','     reduce using rule 74 (negExpr)
    ')'     reduce using rule 74 (negExpr)


State 253

   76 minusFactor: factor .

    RELOP   reduce using rule 76 (minusFactor)
    COMP    reduce using rule 76 (minusFactor)
    ARTOP1  reduce using rule 76 (minusFactor)
    ARTOP2  reduce using rule 76 (minusFactor)
    IN      reduce using rule 76 (minusFactor)
    DISJ    reduce using rule 76 (minusFactor)
    CONJ    reduce using rule 76 (minusFactor)
    ','     reduce using rule 76 (minusFactor)
    ')'     reduce using rule 76 (minusFactor)


State 254

   79 factor: constant .

    RELOP   reduce using rule 79 (factor)
    COMP    reduce using rule 79 (factor)
    ARTOP1  reduce using rule 79 (factor)
    ARTOP2  reduce using rule 79 (factor)
    IN      reduce using rule 79 (factor)
    DISJ    reduce using rule 79 (factor)
    CONJ    reduce using rule 79 (factor)
    ','     reduce using rule 79 (factor)
    ')'     reduce using rule 79 (factor)


State 255

   80 factor: call .

    RELOP   reduce using rule 80 (factor)
    COMP    reduce using rule 80 (factor)
    ARTOP1  reduce using rule 80 (factor)
    ARTOP2  reduce using rule 80 (factor)
    IN      reduce using rule 80 (factor)
    DISJ    reduce using rule 80 (factor)
    CONJ    reduce using rule 80 (factor)
    ','     reduce using rule 80 (factor)
    ')'     reduce using rule 80 (factor)


State 256

   59 simpleExpr: simpleExpr IN . conjExpr

    SETOP    shift, and go to state 234
    ARTOP1   shift, and go to state 235
    ID       shift, and go to state 236
    IS_SET   shift, and go to state 237
    EXISTS   shift, and go to state 238
    NEG      shift, and go to state 239
    INTEGER  shift, and go to state 240
    FLOAT    shift, and go to state 241
    EMPTY    shift, and go to state 242
    '('      shift, and go to state 243

    var          go to state 244
    conjExpr     go to state 309
    disjExpr     go to state 246
    compExpr     go to state 247
    relExpr      go to state 248
    artExpr1     go to state 249
    artExpr2     go to state 250
    negExpr      go to state 251
    minusFactor  go to state 252
    factor       go to state 253
    constant     go to state 254
    call         go to state 255


State 257

    7 varDecl: TYPE . varList ';'
    8        | TYPE . error
   14 funcDecl: TYPE . ID $@1 arguments $@2 '{' funcBody '}'

    error  shift, and go to state 171
    ID     shift, and go to state 310

    varList  go to state 172
    new_id   go to state 12


State 258

   33 body: '{' . funcBody '}'

    error    reduce using rule 21 (funcBody)
    TYPE     reduce using rule 21 (funcBody)
    SETOP    reduce using rule 21 (funcBody)
    ARTOP1   reduce using rule 21 (funcBody)
    ID       reduce using rule 21 (funcBody)
    IF       reduce using rule 21 (funcBody)
    FOR      reduce using rule 21 (funcBody)
    RETURN   reduce using rule 21 (funcBody)
    FORALL   reduce using rule 21 (funcBody)
    IS_SET   reduce using rule 21 (funcBody)
    EXISTS   reduce using rule 21 (funcBody)
    NEG      reduce using rule 21 (funcBody)
    READ     reduce using rule 21 (funcBody)
    WRITE    reduce using rule 21 (funcBody)
    WRITELN  reduce using rule 21 (funcBody)
    INTEGER  reduce using rule 21 (funcBody)
    FLOAT    reduce using rule 21 (funcBody)
    EMPTY    reduce using rule 21 (funcBody)
    ';'      reduce using rule 21 (funcBody)
    '}'      reduce using rule 21 (funcBody)
    '('      reduce using rule 21 (funcBody)

    funcBody  go to state 311


State 259

   35 body: varDecl .

    error    reduce using rule 35 (body)
    TYPE     reduce using rule 35 (body)
    SETOP    reduce using rule 35 (body)
    ARTOP1   reduce using rule 35 (body)
    ID       reduce using rule 35 (body)
    IF       reduce using rule 35 (body)
    FOR      reduce using rule 35 (body)
    RETURN   reduce using rule 35 (body)
    FORALL   reduce using rule 35 (body)
    IS_SET   reduce using rule 35 (body)
    EXISTS   reduce using rule 35 (body)
    NEG      reduce using rule 35 (body)
    READ     reduce using rule 35 (body)
    WRITE    reduce using rule 35 (body)
    WRITELN  reduce using rule 35 (body)
    INTEGER  reduce using rule 35 (body)
    FLOAT    reduce using rule 35 (body)
    EMPTY    reduce using rule 35 (body)
    ';'      reduce using rule 35 (body)
    '}'      reduce using rule 35 (body)
    '('      reduce using rule 35 (body)


State 260

   36 body: funcDecl .

    error    reduce using rule 36 (body)
    TYPE     reduce using rule 36 (body)
    SETOP    reduce using rule 36 (body)
    ARTOP1   reduce using rule 36 (body)
    ID       reduce using rule 36 (body)
    IF       reduce using rule 36 (body)
    FOR      reduce using rule 36 (body)
    RETURN   reduce using rule 36 (body)
    FORALL   reduce using rule 36 (body)
    IS_SET   reduce using rule 36 (body)
    EXISTS   reduce using rule 36 (body)
    NEG      reduce using rule 36 (body)
    READ     reduce using rule 36 (body)
    WRITE    reduce using rule 36 (body)
    WRITELN  reduce using rule 36 (body)
    INTEGER  reduce using rule 36 (body)
    FLOAT    reduce using rule 36 (body)
    EMPTY    reduce using rule 36 (body)
    ';'      reduce using rule 36 (body)
    '}'      reduce using rule 36 (body)
    '('      reduce using rule 36 (body)


State 261

   34 body: stmt .

    error    reduce using rule 34 (body)
    TYPE     reduce using rule 34 (body)
    SETOP    reduce using rule 34 (body)
    ARTOP1   reduce using rule 34 (body)
    ID       reduce using rule 34 (body)
    IF       reduce using rule 34 (body)
    FOR      reduce using rule 34 (body)
    RETURN   reduce using rule 34 (body)
    FORALL   reduce using rule 34 (body)
    IS_SET   reduce using rule 34 (body)
    EXISTS   reduce using rule 34 (body)
    NEG      reduce using rule 34 (body)
    READ     reduce using rule 34 (body)
    WRITE    reduce using rule 34 (body)
    WRITELN  reduce using rule 34 (body)
    INTEGER  reduce using rule 34 (body)
    FLOAT    reduce using rule 34 (body)
    EMPTY    reduce using rule 34 (body)
    ';'      reduce using rule 34 (body)
    '}'      reduce using rule 34 (body)
    '('      reduce using rule 34 (body)


State 262

    7 varDecl: TYPE varList ';' .

    error    reduce using rule 7 (varDecl)
    TYPE     reduce using rule 7 (varDecl)
    SETOP    reduce using rule 7 (varDecl)
    ARTOP1   reduce using rule 7 (varDecl)
    ID       reduce using rule 7 (varDecl)
    IF       reduce using rule 7 (varDecl)
    FOR      reduce using rule 7 (varDecl)
    RETURN   reduce using rule 7 (varDecl)
    FORALL   reduce using rule 7 (varDecl)
    IS_SET   reduce using rule 7 (varDecl)
    EXISTS   reduce using rule 7 (varDecl)
    NEG      reduce using rule 7 (varDecl)
    READ     reduce using rule 7 (varDecl)
    WRITE    reduce using rule 7 (varDecl)
    WRITELN  reduce using rule 7 (varDecl)
    INTEGER  reduce using rule 7 (varDecl)
    FLOAT    reduce using rule 7 (varDecl)
    EMPTY    reduce using rule 7 (varDecl)
    ';'      reduce using rule 7 (varDecl)
    '}'      reduce using rule 7 (varDecl)
    '('      reduce using rule 7 (varDecl)


State 263

   83 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 312
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 264

   75 minusFactor: ARTOP1 factor .

    RELOP   reduce using rule 75 (minusFactor)
    COMP    reduce using rule 75 (minusFactor)
    ARTOP1  reduce using rule 75 (minusFactor)
    ARTOP2  reduce using rule 75 (minusFactor)
    IN      reduce using rule 75 (minusFactor)
    DISJ    reduce using rule 75 (minusFactor)
    CONJ    reduce using rule 75 (minusFactor)
    ')'     reduce using rule 75 (minusFactor)


State 265

   81 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 207
    ID       shift, and go to state 208
    IS_SET   shift, and go to state 209
    EXISTS   shift, and go to state 210
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    var       go to state 215
    factor    go to state 313
    constant  go to state 216
    call      go to state 217


State 266

   82 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 314
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 267

   73 negExpr: NEG negExpr .

    RELOP   reduce using rule 73 (negExpr)
    COMP    reduce using rule 73 (negExpr)
    ARTOP1  reduce using rule 73 (negExpr)
    ARTOP2  reduce using rule 73 (negExpr)
    IN      reduce using rule 73 (negExpr)
    DISJ    reduce using rule 73 (negExpr)
    CONJ    reduce using rule 73 (negExpr)
    ')'     reduce using rule 73 (negExpr)


State 268

   59 simpleExpr: simpleExpr . IN conjExpr
   78 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 218
    ')'  shift, and go to state 315


State 269

   88 call: var $@4 . '(' params ')'

    '('  shift, and go to state 316


State 270

   61 conjExpr: conjExpr CONJ . disjExpr

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    disjExpr     go to state 317
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 271

   63 disjExpr: disjExpr DISJ . compExpr

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    compExpr     go to state 318
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 272

   65 compExpr: compExpr COMP . relExpr

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    relExpr      go to state 319
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 273

   67 relExpr: relExpr RELOP . artExpr1

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    artExpr1     go to state 320
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 274

   69 artExpr1: artExpr1 ARTOP1 . artExpr2

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    artExpr2     go to state 321
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 275

   71 artExpr2: artExpr2 ARTOP2 . negExpr

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    negExpr      go to state 322
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 276

   53 inExpr: READ '(' . var ')'

    ID  shift, and go to state 112

    var  go to state 323


State 277

   54 outExpr: WRITE '(' . output ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    STRING   shift, and go to state 114
    CHAR     shift, and go to state 115
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    output       go to state 324
    simpleExpr   go to state 117
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 278

   55 outExpr: WRITELN '(' . output ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    STRING   shift, and go to state 114
    CHAR     shift, and go to state 115
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    output       go to state 325
    simpleExpr   go to state 117
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 279

   51 assign: var '=' . simpleExpr

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 326
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 280

   44 exprStmt: expression ';' .

    error    reduce using rule 44 (exprStmt)
    SETOP    reduce using rule 44 (exprStmt)
    ARTOP1   reduce using rule 44 (exprStmt)
    ID       reduce using rule 44 (exprStmt)
    IS_SET   reduce using rule 44 (exprStmt)
    EXISTS   reduce using rule 44 (exprStmt)
    NEG      reduce using rule 44 (exprStmt)
    READ     reduce using rule 44 (exprStmt)
    WRITE    reduce using rule 44 (exprStmt)
    WRITELN  reduce using rule 44 (exprStmt)
    INTEGER  reduce using rule 44 (exprStmt)
    FLOAT    reduce using rule 44 (exprStmt)
    EMPTY    reduce using rule 44 (exprStmt)
    ';'      reduce using rule 44 (exprStmt)
    '('      reduce using rule 44 (exprStmt)


State 281

   83 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 327
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 282

   81 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 207
    ID       shift, and go to state 208
    IS_SET   shift, and go to state 209
    EXISTS   shift, and go to state 210
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    var       go to state 215
    factor    go to state 328
    constant  go to state 216
    call      go to state 217


State 283

   82 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 329
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 284

   59 simpleExpr: simpleExpr . IN conjExpr
   78 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 218
    ')'  shift, and go to state 330


State 285

   88 call: var $@4 . '(' params ')'

    '('  shift, and go to state 331


State 286

   59 simpleExpr: simpleExpr IN conjExpr .
   61 conjExpr: conjExpr . CONJ disjExpr

    CONJ  shift, and go to state 270

    IN   reduce using rule 59 (simpleExpr)
    ')'  reduce using rule 59 (simpleExpr)


State 287

    8 varDecl: TYPE error .

    error    reduce using rule 8 (varDecl)
    TYPE     reduce using rule 8 (varDecl)
    SETOP    reduce using rule 8 (varDecl)
    ARTOP1   reduce using rule 8 (varDecl)
    ID       reduce using rule 8 (varDecl)
    IF       reduce using rule 8 (varDecl)
    ELSE     reduce using rule 8 (varDecl)
    FOR      reduce using rule 8 (varDecl)
    RETURN   reduce using rule 8 (varDecl)
    FORALL   reduce using rule 8 (varDecl)
    IS_SET   reduce using rule 8 (varDecl)
    EXISTS   reduce using rule 8 (varDecl)
    NEG      reduce using rule 8 (varDecl)
    READ     reduce using rule 8 (varDecl)
    WRITE    reduce using rule 8 (varDecl)
    WRITELN  reduce using rule 8 (varDecl)
    INTEGER  reduce using rule 8 (varDecl)
    FLOAT    reduce using rule 8 (varDecl)
    EMPTY    reduce using rule 8 (varDecl)
    ';'      reduce using rule 8 (varDecl)
    '}'      reduce using rule 8 (varDecl)
    '('      reduce using rule 8 (varDecl)


State 288

   11 new_id: ID .
   14 funcDecl: TYPE ID . $@1 arguments $@2 '{' funcBody '}'

    ';'  reduce using rule 11 (new_id)
    ','  reduce using rule 11 (new_id)
    '('  reduce using rule 12 ($@1)

    $@1  go to state 332


State 289

    7 varDecl: TYPE varList . ';'
    9 varList: varList . ',' new_id

    ';'  shift, and go to state 333
    ','  shift, and go to state 15


State 290

   37 condStmt: IF cond . prepareScope body
   39         | IF cond . prepareScope body ELSE $@3 prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 334


State 291

   28 iterStmt: FOR '(' . exprStmt exprStmt ')' prepareScope body
   29         | FOR '(' . exprStmt exprStmt expression ')' prepareScope body
   32         | FOR '(' . error ')' prepareScope body

    error    shift, and go to state 335
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 205
    '('      shift, and go to state 53

    exprStmt     go to state 336
    expression   go to state 206
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 292

   43 returnStmt: RETURN exprStmt .

    error    reduce using rule 43 (returnStmt)
    TYPE     reduce using rule 43 (returnStmt)
    SETOP    reduce using rule 43 (returnStmt)
    ARTOP1   reduce using rule 43 (returnStmt)
    ID       reduce using rule 43 (returnStmt)
    IF       reduce using rule 43 (returnStmt)
    ELSE     reduce using rule 43 (returnStmt)
    FOR      reduce using rule 43 (returnStmt)
    RETURN   reduce using rule 43 (returnStmt)
    FORALL   reduce using rule 43 (returnStmt)
    IS_SET   reduce using rule 43 (returnStmt)
    EXISTS   reduce using rule 43 (returnStmt)
    NEG      reduce using rule 43 (returnStmt)
    READ     reduce using rule 43 (returnStmt)
    WRITE    reduce using rule 43 (returnStmt)
    WRITELN  reduce using rule 43 (returnStmt)
    INTEGER  reduce using rule 43 (returnStmt)
    FLOAT    reduce using rule 43 (returnStmt)
    EMPTY    reduce using rule 43 (returnStmt)
    ';'      reduce using rule 43 (returnStmt)
    '}'      reduce using rule 43 (returnStmt)
    '('      reduce using rule 43 (returnStmt)


State 293

   30 iterStmt: FORALL '(' . simpleExpr ')' prepareScope body
   31         | FORALL '(' . error ')' prepareScope body

    error    shift, and go to state 337
    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 338
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 294

   44 exprStmt: expression ';' .

    error    reduce using rule 44 (exprStmt)
    TYPE     reduce using rule 44 (exprStmt)
    SETOP    reduce using rule 44 (exprStmt)
    ARTOP1   reduce using rule 44 (exprStmt)
    ID       reduce using rule 44 (exprStmt)
    IF       reduce using rule 44 (exprStmt)
    ELSE     reduce using rule 44 (exprStmt)
    FOR      reduce using rule 44 (exprStmt)
    RETURN   reduce using rule 44 (exprStmt)
    FORALL   reduce using rule 44 (exprStmt)
    IS_SET   reduce using rule 44 (exprStmt)
    EXISTS   reduce using rule 44 (exprStmt)
    NEG      reduce using rule 44 (exprStmt)
    READ     reduce using rule 44 (exprStmt)
    WRITE    reduce using rule 44 (exprStmt)
    WRITELN  reduce using rule 44 (exprStmt)
    INTEGER  reduce using rule 44 (exprStmt)
    FLOAT    reduce using rule 44 (exprStmt)
    EMPTY    reduce using rule 44 (exprStmt)
    ';'      reduce using rule 44 (exprStmt)
    '}'      reduce using rule 44 (exprStmt)
    '('      reduce using rule 44 (exprStmt)


State 295

   44 exprStmt: expression ';' .

    SETOP    reduce using rule 44 (exprStmt)
    ARTOP1   reduce using rule 44 (exprStmt)
    ID       reduce using rule 44 (exprStmt)
    IS_SET   reduce using rule 44 (exprStmt)
    EXISTS   reduce using rule 44 (exprStmt)
    NEG      reduce using rule 44 (exprStmt)
    READ     reduce using rule 44 (exprStmt)
    WRITE    reduce using rule 44 (exprStmt)
    WRITELN  reduce using rule 44 (exprStmt)
    INTEGER  reduce using rule 44 (exprStmt)
    FLOAT    reduce using rule 44 (exprStmt)
    EMPTY    reduce using rule 44 (exprStmt)
    '('      reduce using rule 44 (exprStmt)
    ')'      reduce using rule 44 (exprStmt)


State 296

   83 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 339
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 297

   75 minusFactor: ARTOP1 factor .

    RELOP   reduce using rule 75 (minusFactor)
    COMP    reduce using rule 75 (minusFactor)
    ARTOP1  reduce using rule 75 (minusFactor)
    ARTOP2  reduce using rule 75 (minusFactor)
    IN      reduce using rule 75 (minusFactor)
    DISJ    reduce using rule 75 (minusFactor)
    CONJ    reduce using rule 75 (minusFactor)
    ','     reduce using rule 75 (minusFactor)
    ')'     reduce using rule 75 (minusFactor)


State 298

   81 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 207
    ID       shift, and go to state 208
    IS_SET   shift, and go to state 209
    EXISTS   shift, and go to state 210
    INTEGER  shift, and go to state 211
    FLOAT    shift, and go to state 212
    EMPTY    shift, and go to state 213
    '('      shift, and go to state 214

    var       go to state 215
    factor    go to state 340
    constant  go to state 216
    call      go to state 217


State 299

   82 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 176
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183

    var          go to state 184
    simpleExpr   go to state 341
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 300

   73 negExpr: NEG negExpr .

    RELOP   reduce using rule 73 (negExpr)
    COMP    reduce using rule 73 (negExpr)
    ARTOP1  reduce using rule 73 (negExpr)
    ARTOP2  reduce using rule 73 (negExpr)
    IN      reduce using rule 73 (negExpr)
    DISJ    reduce using rule 73 (negExpr)
    CONJ    reduce using rule 73 (negExpr)
    ','     reduce using rule 73 (negExpr)
    ')'     reduce using rule 73 (negExpr)


State 301

   59 simpleExpr: simpleExpr . IN conjExpr
   78 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 218
    ')'  shift, and go to state 342


State 302

   88 call: var $@4 . '(' params ')'

    '('  shift, and go to state 343


State 303

   61 conjExpr: conjExpr CONJ . disjExpr

    SETOP    shift, and go to state 234
    ARTOP1   shift, and go to state 235
    ID       shift, and go to state 236
    IS_SET   shift, and go to state 237
    EXISTS   shift, and go to state 238
    NEG      shift, and go to state 239
    INTEGER  shift, and go to state 240
    FLOAT    shift, and go to state 241
    EMPTY    shift, and go to state 242
    '('      shift, and go to state 243

    var          go to state 244
    disjExpr     go to state 344
    compExpr     go to state 247
    relExpr      go to state 248
    artExpr1     go to state 249
    artExpr2     go to state 250
    negExpr      go to state 251
    minusFactor  go to state 252
    factor       go to state 253
    constant     go to state 254
    call         go to state 255


State 304

   63 disjExpr: disjExpr DISJ . compExpr

    SETOP    shift, and go to state 234
    ARTOP1   shift, and go to state 235
    ID       shift, and go to state 236
    IS_SET   shift, and go to state 237
    EXISTS   shift, and go to state 238
    NEG      shift, and go to state 239
    INTEGER  shift, and go to state 240
    FLOAT    shift, and go to state 241
    EMPTY    shift, and go to state 242
    '('      shift, and go to state 243

    var          go to state 244
    compExpr     go to state 345
    relExpr      go to state 248
    artExpr1     go to state 249
    artExpr2     go to state 250
    negExpr      go to state 251
    minusFactor  go to state 252
    factor       go to state 253
    constant     go to state 254
    call         go to state 255


State 305

   65 compExpr: compExpr COMP . relExpr

    SETOP    shift, and go to state 234
    ARTOP1   shift, and go to state 235
    ID       shift, and go to state 236
    IS_SET   shift, and go to state 237
    EXISTS   shift, and go to state 238
    NEG      shift, and go to state 239
    INTEGER  shift, and go to state 240
    FLOAT    shift, and go to state 241
    EMPTY    shift, and go to state 242
    '('      shift, and go to state 243

    var          go to state 244
    relExpr      go to state 346
    artExpr1     go to state 249
    artExpr2     go to state 250
    negExpr      go to state 251
    minusFactor  go to state 252
    factor       go to state 253
    constant     go to state 254
    call         go to state 255


State 306

   67 relExpr: relExpr RELOP . artExpr1

    SETOP    shift, and go to state 234
    ARTOP1   shift, and go to state 235
    ID       shift, and go to state 236
    IS_SET   shift, and go to state 237
    EXISTS   shift, and go to state 238
    NEG      shift, and go to state 239
    INTEGER  shift, and go to state 240
    FLOAT    shift, and go to state 241
    EMPTY    shift, and go to state 242
    '('      shift, and go to state 243

    var          go to state 244
    artExpr1     go to state 347
    artExpr2     go to state 250
    negExpr      go to state 251
    minusFactor  go to state 252
    factor       go to state 253
    constant     go to state 254
    call         go to state 255


State 307

   69 artExpr1: artExpr1 ARTOP1 . artExpr2

    SETOP    shift, and go to state 234
    ARTOP1   shift, and go to state 235
    ID       shift, and go to state 236
    IS_SET   shift, and go to state 237
    EXISTS   shift, and go to state 238
    NEG      shift, and go to state 239
    INTEGER  shift, and go to state 240
    FLOAT    shift, and go to state 241
    EMPTY    shift, and go to state 242
    '('      shift, and go to state 243

    var          go to state 244
    artExpr2     go to state 348
    negExpr      go to state 251
    minusFactor  go to state 252
    factor       go to state 253
    constant     go to state 254
    call         go to state 255


State 308

   71 artExpr2: artExpr2 ARTOP2 . negExpr

    SETOP    shift, and go to state 234
    ARTOP1   shift, and go to state 235
    ID       shift, and go to state 236
    IS_SET   shift, and go to state 237
    EXISTS   shift, and go to state 238
    NEG      shift, and go to state 239
    INTEGER  shift, and go to state 240
    FLOAT    shift, and go to state 241
    EMPTY    shift, and go to state 242
    '('      shift, and go to state 243

    var          go to state 244
    negExpr      go to state 349
    minusFactor  go to state 252
    factor       go to state 253
    constant     go to state 254
    call         go to state 255


State 309

   59 simpleExpr: simpleExpr IN conjExpr .
   61 conjExpr: conjExpr . CONJ disjExpr

    CONJ  shift, and go to state 303

    IN   reduce using rule 59 (simpleExpr)
    ','  reduce using rule 59 (simpleExpr)
    ')'  reduce using rule 59 (simpleExpr)


State 310

   11 new_id: ID .
   14 funcDecl: TYPE ID . $@1 arguments $@2 '{' funcBody '}'

    ';'  reduce using rule 11 (new_id)
    ','  reduce using rule 11 (new_id)
    '('  reduce using rule 12 ($@1)

    $@1  go to state 350


State 311

   22 funcBody: funcBody . varDecl
   23         | funcBody . stmt
   33 body: '{' funcBody . '}'

    error    shift, and go to state 33
    TYPE     shift, and go to state 34
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 38
    FOR      shift, and go to state 39
    RETURN   shift, and go to state 40
    FORALL   shift, and go to state 41
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 51
    '}'      shift, and go to state 351
    '('      shift, and go to state 53

    varDecl      go to state 54
    stmt         go to state 55
    iterStmt     go to state 56
    condStmt     go to state 57
    returnStmt   go to state 58
    exprStmt     go to state 59
    expression   go to state 60
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 312

   59 simpleExpr: simpleExpr . IN conjExpr
   83 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 218
    ')'  shift, and go to state 352


State 313

   81 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 353


State 314

   59 simpleExpr: simpleExpr . IN conjExpr
   82 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 218
    ')'  shift, and go to state 354


State 315

   78 factor: '(' simpleExpr ')' .

    RELOP   reduce using rule 78 (factor)
    COMP    reduce using rule 78 (factor)
    ARTOP1  reduce using rule 78 (factor)
    ARTOP2  reduce using rule 78 (factor)
    IN      reduce using rule 78 (factor)
    DISJ    reduce using rule 78 (factor)
    CONJ    reduce using rule 78 (factor)
    ')'     reduce using rule 78 (factor)


State 316

   88 call: var $@4 '(' . params ')'

    SETOP    shift, and go to state 234
    ARTOP1   shift, and go to state 235
    ID       shift, and go to state 236
    IS_SET   shift, and go to state 237
    EXISTS   shift, and go to state 238
    NEG      shift, and go to state 239
    INTEGER  shift, and go to state 240
    FLOAT    shift, and go to state 241
    EMPTY    shift, and go to state 242
    '('      shift, and go to state 243

    ')'  reduce using rule 89 (params)

    var          go to state 244
    simpleExpr   go to state 146
    conjExpr     go to state 245
    disjExpr     go to state 246
    compExpr     go to state 247
    relExpr      go to state 248
    artExpr1     go to state 249
    artExpr2     go to state 250
    negExpr      go to state 251
    minusFactor  go to state 252
    factor       go to state 253
    constant     go to state 254
    call         go to state 255
    params       go to state 355
    paramList    go to state 148


State 317

   61 conjExpr: conjExpr CONJ disjExpr .
   63 disjExpr: disjExpr . DISJ compExpr

    DISJ  shift, and go to state 271

    IN    reduce using rule 61 (conjExpr)
    CONJ  reduce using rule 61 (conjExpr)
    ')'   reduce using rule 61 (conjExpr)


State 318

   63 disjExpr: disjExpr DISJ compExpr .
   65 compExpr: compExpr . COMP relExpr

    COMP  shift, and go to state 272

    IN    reduce using rule 63 (disjExpr)
    DISJ  reduce using rule 63 (disjExpr)
    CONJ  reduce using rule 63 (disjExpr)
    ')'   reduce using rule 63 (disjExpr)


State 319

   65 compExpr: compExpr COMP relExpr .
   67 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 273

    COMP  reduce using rule 65 (compExpr)
    IN    reduce using rule 65 (compExpr)
    DISJ  reduce using rule 65 (compExpr)
    CONJ  reduce using rule 65 (compExpr)
    ')'   reduce using rule 65 (compExpr)


State 320

   67 relExpr: relExpr RELOP artExpr1 .
   69 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 274

    RELOP  reduce using rule 67 (relExpr)
    COMP   reduce using rule 67 (relExpr)
    IN     reduce using rule 67 (relExpr)
    DISJ   reduce using rule 67 (relExpr)
    CONJ   reduce using rule 67 (relExpr)
    ')'    reduce using rule 67 (relExpr)


State 321

   69 artExpr1: artExpr1 ARTOP1 artExpr2 .
   71 artExpr2: artExpr2 . ARTOP2 negExpr

    ARTOP2  shift, and go to state 275

    RELOP   reduce using rule 69 (artExpr1)
    COMP    reduce using rule 69 (artExpr1)
    ARTOP1  reduce using rule 69 (artExpr1)
    IN      reduce using rule 69 (artExpr1)
    DISJ    reduce using rule 69 (artExpr1)
    CONJ    reduce using rule 69 (artExpr1)
    ')'     reduce using rule 69 (artExpr1)


State 322

   71 artExpr2: artExpr2 ARTOP2 negExpr .

    RELOP   reduce using rule 71 (artExpr2)
    COMP    reduce using rule 71 (artExpr2)
    ARTOP1  reduce using rule 71 (artExpr2)
    ARTOP2  reduce using rule 71 (artExpr2)
    IN      reduce using rule 71 (artExpr2)
    DISJ    reduce using rule 71 (artExpr2)
    CONJ    reduce using rule 71 (artExpr2)
    ')'     reduce using rule 71 (artExpr2)


State 323

   53 inExpr: READ '(' var . ')'

    ')'  shift, and go to state 356


State 324

   54 outExpr: WRITE '(' output . ')'

    ')'  shift, and go to state 357


State 325

   55 outExpr: WRITELN '(' output . ')'

    ')'  shift, and go to state 358


State 326

   51 assign: var '=' simpleExpr .
   59 simpleExpr: simpleExpr . IN conjExpr

    IN  shift, and go to state 218

    ')'  reduce using rule 51 (assign)


State 327

   59 simpleExpr: simpleExpr . IN conjExpr
   83 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 218
    ')'  shift, and go to state 359


State 328

   81 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 360


State 329

   59 simpleExpr: simpleExpr . IN conjExpr
   82 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 218
    ')'  shift, and go to state 361


State 330

   78 factor: '(' simpleExpr ')' .

    ')'  reduce using rule 78 (factor)


State 331

   88 call: var $@4 '(' . params ')'

    SETOP    shift, and go to state 234
    ARTOP1   shift, and go to state 235
    ID       shift, and go to state 236
    IS_SET   shift, and go to state 237
    EXISTS   shift, and go to state 238
    NEG      shift, and go to state 239
    INTEGER  shift, and go to state 240
    FLOAT    shift, and go to state 241
    EMPTY    shift, and go to state 242
    '('      shift, and go to state 243

    ')'  reduce using rule 89 (params)

    var          go to state 244
    simpleExpr   go to state 146
    conjExpr     go to state 245
    disjExpr     go to state 246
    compExpr     go to state 247
    relExpr      go to state 248
    artExpr1     go to state 249
    artExpr2     go to state 250
    negExpr      go to state 251
    minusFactor  go to state 252
    factor       go to state 253
    constant     go to state 254
    call         go to state 255
    params       go to state 362
    paramList    go to state 148


State 332

   14 funcDecl: TYPE ID $@1 . arguments $@2 '{' funcBody '}'

    '('  shift, and go to state 16

    arguments  go to state 363


State 333

    7 varDecl: TYPE varList ';' .

    error    reduce using rule 7 (varDecl)
    TYPE     reduce using rule 7 (varDecl)
    SETOP    reduce using rule 7 (varDecl)
    ARTOP1   reduce using rule 7 (varDecl)
    ID       reduce using rule 7 (varDecl)
    IF       reduce using rule 7 (varDecl)
    ELSE     reduce using rule 7 (varDecl)
    FOR      reduce using rule 7 (varDecl)
    RETURN   reduce using rule 7 (varDecl)
    FORALL   reduce using rule 7 (varDecl)
    IS_SET   reduce using rule 7 (varDecl)
    EXISTS   reduce using rule 7 (varDecl)
    NEG      reduce using rule 7 (varDecl)
    READ     reduce using rule 7 (varDecl)
    WRITE    reduce using rule 7 (varDecl)
    WRITELN  reduce using rule 7 (varDecl)
    INTEGER  reduce using rule 7 (varDecl)
    FLOAT    reduce using rule 7 (varDecl)
    EMPTY    reduce using rule 7 (varDecl)
    ';'      reduce using rule 7 (varDecl)
    '}'      reduce using rule 7 (varDecl)
    '('      reduce using rule 7 (varDecl)


State 334

   37 condStmt: IF cond prepareScope . body
   39         | IF cond prepareScope . body ELSE $@3 prepareScope body

    error    shift, and go to state 219
    TYPE     shift, and go to state 220
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 221
    FOR      shift, and go to state 222
    RETURN   shift, and go to state 223
    FORALL   shift, and go to state 224
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 225
    '{'      shift, and go to state 132
    '('      shift, and go to state 53

    varDecl      go to state 133
    funcDecl     go to state 134
    stmt         go to state 135
    iterStmt     go to state 226
    body         go to state 364
    condStmt     go to state 227
    returnStmt   go to state 228
    exprStmt     go to state 229
    expression   go to state 230
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 335

   32 iterStmt: FOR '(' error . ')' prepareScope body
   45 exprStmt: error .

    ')'  shift, and go to state 365

    error    reduce using rule 45 (exprStmt)
    SETOP    reduce using rule 45 (exprStmt)
    ARTOP1   reduce using rule 45 (exprStmt)
    ID       reduce using rule 45 (exprStmt)
    IS_SET   reduce using rule 45 (exprStmt)
    EXISTS   reduce using rule 45 (exprStmt)
    NEG      reduce using rule 45 (exprStmt)
    READ     reduce using rule 45 (exprStmt)
    WRITE    reduce using rule 45 (exprStmt)
    WRITELN  reduce using rule 45 (exprStmt)
    INTEGER  reduce using rule 45 (exprStmt)
    FLOAT    reduce using rule 45 (exprStmt)
    EMPTY    reduce using rule 45 (exprStmt)
    ';'      reduce using rule 45 (exprStmt)
    '('      reduce using rule 45 (exprStmt)


State 336

   28 iterStmt: FOR '(' exprStmt . exprStmt ')' prepareScope body
   29         | FOR '(' exprStmt . exprStmt expression ')' prepareScope body

    error    shift, and go to state 231
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 232
    '('      shift, and go to state 53

    exprStmt     go to state 366
    expression   go to state 233
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 337

   31 iterStmt: FORALL '(' error . ')' prepareScope body

    ')'  shift, and go to state 367


State 338

   30 iterStmt: FORALL '(' simpleExpr . ')' prepareScope body
   59 simpleExpr: simpleExpr . IN conjExpr

    IN   shift, and go to state 218
    ')'  shift, and go to state 368


State 339

   59 simpleExpr: simpleExpr . IN conjExpr
   83 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 218
    ')'  shift, and go to state 369


State 340

   81 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 370


State 341

   59 simpleExpr: simpleExpr . IN conjExpr
   82 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 218
    ')'  shift, and go to state 371


State 342

   78 factor: '(' simpleExpr ')' .

    RELOP   reduce using rule 78 (factor)
    COMP    reduce using rule 78 (factor)
    ARTOP1  reduce using rule 78 (factor)
    ARTOP2  reduce using rule 78 (factor)
    IN      reduce using rule 78 (factor)
    DISJ    reduce using rule 78 (factor)
    CONJ    reduce using rule 78 (factor)
    ','     reduce using rule 78 (factor)
    ')'     reduce using rule 78 (factor)


State 343

   88 call: var $@4 '(' . params ')'

    SETOP    shift, and go to state 234
    ARTOP1   shift, and go to state 235
    ID       shift, and go to state 236
    IS_SET   shift, and go to state 237
    EXISTS   shift, and go to state 238
    NEG      shift, and go to state 239
    INTEGER  shift, and go to state 240
    FLOAT    shift, and go to state 241
    EMPTY    shift, and go to state 242
    '('      shift, and go to state 243

    ')'  reduce using rule 89 (params)

    var          go to state 244
    simpleExpr   go to state 146
    conjExpr     go to state 245
    disjExpr     go to state 246
    compExpr     go to state 247
    relExpr      go to state 248
    artExpr1     go to state 249
    artExpr2     go to state 250
    negExpr      go to state 251
    minusFactor  go to state 252
    factor       go to state 253
    constant     go to state 254
    call         go to state 255
    params       go to state 372
    paramList    go to state 148


State 344

   61 conjExpr: conjExpr CONJ disjExpr .
   63 disjExpr: disjExpr . DISJ compExpr

    DISJ  shift, and go to state 304

    IN    reduce using rule 61 (conjExpr)
    CONJ  reduce using rule 61 (conjExpr)
    ','   reduce using rule 61 (conjExpr)
    ')'   reduce using rule 61 (conjExpr)


State 345

   63 disjExpr: disjExpr DISJ compExpr .
   65 compExpr: compExpr . COMP relExpr

    COMP  shift, and go to state 305

    IN    reduce using rule 63 (disjExpr)
    DISJ  reduce using rule 63 (disjExpr)
    CONJ  reduce using rule 63 (disjExpr)
    ','   reduce using rule 63 (disjExpr)
    ')'   reduce using rule 63 (disjExpr)


State 346

   65 compExpr: compExpr COMP relExpr .
   67 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 306

    COMP  reduce using rule 65 (compExpr)
    IN    reduce using rule 65 (compExpr)
    DISJ  reduce using rule 65 (compExpr)
    CONJ  reduce using rule 65 (compExpr)
    ','   reduce using rule 65 (compExpr)
    ')'   reduce using rule 65 (compExpr)


State 347

   67 relExpr: relExpr RELOP artExpr1 .
   69 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 307

    RELOP  reduce using rule 67 (relExpr)
    COMP   reduce using rule 67 (relExpr)
    IN     reduce using rule 67 (relExpr)
    DISJ   reduce using rule 67 (relExpr)
    CONJ   reduce using rule 67 (relExpr)
    ','    reduce using rule 67 (relExpr)
    ')'    reduce using rule 67 (relExpr)


State 348

   69 artExpr1: artExpr1 ARTOP1 artExpr2 .
   71 artExpr2: artExpr2 . ARTOP2 negExpr

    ARTOP2  shift, and go to state 308

    RELOP   reduce using rule 69 (artExpr1)
    COMP    reduce using rule 69 (artExpr1)
    ARTOP1  reduce using rule 69 (artExpr1)
    IN      reduce using rule 69 (artExpr1)
    DISJ    reduce using rule 69 (artExpr1)
    CONJ    reduce using rule 69 (artExpr1)
    ','     reduce using rule 69 (artExpr1)
    ')'     reduce using rule 69 (artExpr1)


State 349

   71 artExpr2: artExpr2 ARTOP2 negExpr .

    RELOP   reduce using rule 71 (artExpr2)
    COMP    reduce using rule 71 (artExpr2)
    ARTOP1  reduce using rule 71 (artExpr2)
    ARTOP2  reduce using rule 71 (artExpr2)
    IN      reduce using rule 71 (artExpr2)
    DISJ    reduce using rule 71 (artExpr2)
    CONJ    reduce using rule 71 (artExpr2)
    ','     reduce using rule 71 (artExpr2)
    ')'     reduce using rule 71 (artExpr2)


State 350

   14 funcDecl: TYPE ID $@1 . arguments $@2 '{' funcBody '}'

    '('  shift, and go to state 16

    arguments  go to state 373


State 351

   33 body: '{' funcBody '}' .

    error    reduce using rule 33 (body)
    TYPE     reduce using rule 33 (body)
    SETOP    reduce using rule 33 (body)
    ARTOP1   reduce using rule 33 (body)
    ID       reduce using rule 33 (body)
    IF       reduce using rule 33 (body)
    FOR      reduce using rule 33 (body)
    RETURN   reduce using rule 33 (body)
    FORALL   reduce using rule 33 (body)
    IS_SET   reduce using rule 33 (body)
    EXISTS   reduce using rule 33 (body)
    NEG      reduce using rule 33 (body)
    READ     reduce using rule 33 (body)
    WRITE    reduce using rule 33 (body)
    WRITELN  reduce using rule 33 (body)
    INTEGER  reduce using rule 33 (body)
    FLOAT    reduce using rule 33 (body)
    EMPTY    reduce using rule 33 (body)
    ';'      reduce using rule 33 (body)
    '}'      reduce using rule 33 (body)
    '('      reduce using rule 33 (body)


State 352

   83 factor: SETOP '(' simpleExpr ')' .

    RELOP   reduce using rule 83 (factor)
    COMP    reduce using rule 83 (factor)
    ARTOP1  reduce using rule 83 (factor)
    ARTOP2  reduce using rule 83 (factor)
    IN      reduce using rule 83 (factor)
    DISJ    reduce using rule 83 (factor)
    CONJ    reduce using rule 83 (factor)
    ')'     reduce using rule 83 (factor)


State 353

   81 factor: IS_SET '(' factor ')' .

    RELOP   reduce using rule 81 (factor)
    COMP    reduce using rule 81 (factor)
    ARTOP1  reduce using rule 81 (factor)
    ARTOP2  reduce using rule 81 (factor)
    IN      reduce using rule 81 (factor)
    DISJ    reduce using rule 81 (factor)
    CONJ    reduce using rule 81 (factor)
    ')'     reduce using rule 81 (factor)


State 354

   82 factor: EXISTS '(' simpleExpr ')' .

    RELOP   reduce using rule 82 (factor)
    COMP    reduce using rule 82 (factor)
    ARTOP1  reduce using rule 82 (factor)
    ARTOP2  reduce using rule 82 (factor)
    IN      reduce using rule 82 (factor)
    DISJ    reduce using rule 82 (factor)
    CONJ    reduce using rule 82 (factor)
    ')'     reduce using rule 82 (factor)


State 355

   88 call: var $@4 '(' params . ')'

    ')'  shift, and go to state 374


State 356

   53 inExpr: READ '(' var ')' .

    ')'  reduce using rule 53 (inExpr)


State 357

   54 outExpr: WRITE '(' output ')' .

    ')'  reduce using rule 54 (outExpr)


State 358

   55 outExpr: WRITELN '(' output ')' .

    ')'  reduce using rule 55 (outExpr)


State 359

   83 factor: SETOP '(' simpleExpr ')' .

    ')'  reduce using rule 83 (factor)


State 360

   81 factor: IS_SET '(' factor ')' .

    ')'  reduce using rule 81 (factor)


State 361

   82 factor: EXISTS '(' simpleExpr ')' .

    ')'  reduce using rule 82 (factor)


State 362

   88 call: var $@4 '(' params . ')'

    ')'  shift, and go to state 375


State 363

   14 funcDecl: TYPE ID $@1 arguments . $@2 '{' funcBody '}'

    '{'  reduce using rule 13 ($@2)

    $@2  go to state 376


State 364

   37 condStmt: IF cond prepareScope body .
   39         | IF cond prepareScope body . ELSE $@3 prepareScope body

    ELSE  shift, and go to state 377

    error    reduce using rule 37 (condStmt)
    TYPE     reduce using rule 37 (condStmt)
    SETOP    reduce using rule 37 (condStmt)
    ARTOP1   reduce using rule 37 (condStmt)
    ID       reduce using rule 37 (condStmt)
    IF       reduce using rule 37 (condStmt)
    FOR      reduce using rule 37 (condStmt)
    RETURN   reduce using rule 37 (condStmt)
    FORALL   reduce using rule 37 (condStmt)
    IS_SET   reduce using rule 37 (condStmt)
    EXISTS   reduce using rule 37 (condStmt)
    NEG      reduce using rule 37 (condStmt)
    READ     reduce using rule 37 (condStmt)
    WRITE    reduce using rule 37 (condStmt)
    WRITELN  reduce using rule 37 (condStmt)
    INTEGER  reduce using rule 37 (condStmt)
    FLOAT    reduce using rule 37 (condStmt)
    EMPTY    reduce using rule 37 (condStmt)
    ';'      reduce using rule 37 (condStmt)
    '}'      reduce using rule 37 (condStmt)
    '('      reduce using rule 37 (condStmt)


State 365

   32 iterStmt: FOR '(' error ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 378


State 366

   28 iterStmt: FOR '(' exprStmt exprStmt . ')' prepareScope body
   29         | FOR '(' exprStmt exprStmt . expression ')' prepareScope body

    SETOP    shift, and go to state 174
    ARTOP1   shift, and go to state 175
    ID       shift, and go to state 196
    IS_SET   shift, and go to state 177
    EXISTS   shift, and go to state 178
    NEG      shift, and go to state 179
    READ     shift, and go to state 197
    WRITE    shift, and go to state 198
    WRITELN  shift, and go to state 199
    INTEGER  shift, and go to state 180
    FLOAT    shift, and go to state 181
    EMPTY    shift, and go to state 182
    '('      shift, and go to state 183
    ')'      shift, and go to state 379

    expression   go to state 380
    assign       go to state 200
    var          go to state 201
    inExpr       go to state 202
    outExpr      go to state 203
    simpleExpr   go to state 204
    conjExpr     go to state 185
    disjExpr     go to state 186
    compExpr     go to state 187
    relExpr      go to state 188
    artExpr1     go to state 189
    artExpr2     go to state 190
    negExpr      go to state 191
    minusFactor  go to state 192
    factor       go to state 193
    constant     go to state 194
    call         go to state 195


State 367

   31 iterStmt: FORALL '(' error ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 381


State 368

   30 iterStmt: FORALL '(' simpleExpr ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 382


State 369

   83 factor: SETOP '(' simpleExpr ')' .

    RELOP   reduce using rule 83 (factor)
    COMP    reduce using rule 83 (factor)
    ARTOP1  reduce using rule 83 (factor)
    ARTOP2  reduce using rule 83 (factor)
    IN      reduce using rule 83 (factor)
    DISJ    reduce using rule 83 (factor)
    CONJ    reduce using rule 83 (factor)
    ','     reduce using rule 83 (factor)
    ')'     reduce using rule 83 (factor)


State 370

   81 factor: IS_SET '(' factor ')' .

    RELOP   reduce using rule 81 (factor)
    COMP    reduce using rule 81 (factor)
    ARTOP1  reduce using rule 81 (factor)
    ARTOP2  reduce using rule 81 (factor)
    IN      reduce using rule 81 (factor)
    DISJ    reduce using rule 81 (factor)
    CONJ    reduce using rule 81 (factor)
    ','     reduce using rule 81 (factor)
    ')'     reduce using rule 81 (factor)


State 371

   82 factor: EXISTS '(' simpleExpr ')' .

    RELOP   reduce using rule 82 (factor)
    COMP    reduce using rule 82 (factor)
    ARTOP1  reduce using rule 82 (factor)
    ARTOP2  reduce using rule 82 (factor)
    IN      reduce using rule 82 (factor)
    DISJ    reduce using rule 82 (factor)
    CONJ    reduce using rule 82 (factor)
    ','     reduce using rule 82 (factor)
    ')'     reduce using rule 82 (factor)


State 372

   88 call: var $@4 '(' params . ')'

    ')'  shift, and go to state 383


State 373

   14 funcDecl: TYPE ID $@1 arguments . $@2 '{' funcBody '}'

    '{'  reduce using rule 13 ($@2)

    $@2  go to state 384


State 374

   88 call: var $@4 '(' params ')' .

    RELOP   reduce using rule 88 (call)
    COMP    reduce using rule 88 (call)
    ARTOP1  reduce using rule 88 (call)
    ARTOP2  reduce using rule 88 (call)
    IN      reduce using rule 88 (call)
    DISJ    reduce using rule 88 (call)
    CONJ    reduce using rule 88 (call)
    ')'     reduce using rule 88 (call)


State 375

   88 call: var $@4 '(' params ')' .

    ')'  reduce using rule 88 (call)


State 376

   14 funcDecl: TYPE ID $@1 arguments $@2 . '{' funcBody '}'

    '{'  shift, and go to state 385


State 377

   39 condStmt: IF cond prepareScope body ELSE . $@3 prepareScope body

    error    reduce using rule 38 ($@3)
    TYPE     reduce using rule 38 ($@3)
    SETOP    reduce using rule 38 ($@3)
    ARTOP1   reduce using rule 38 ($@3)
    ID       reduce using rule 38 ($@3)
    IF       reduce using rule 38 ($@3)
    FOR      reduce using rule 38 ($@3)
    RETURN   reduce using rule 38 ($@3)
    FORALL   reduce using rule 38 ($@3)
    IS_SET   reduce using rule 38 ($@3)
    EXISTS   reduce using rule 38 ($@3)
    NEG      reduce using rule 38 ($@3)
    READ     reduce using rule 38 ($@3)
    WRITE    reduce using rule 38 ($@3)
    WRITELN  reduce using rule 38 ($@3)
    INTEGER  reduce using rule 38 ($@3)
    FLOAT    reduce using rule 38 ($@3)
    EMPTY    reduce using rule 38 ($@3)
    ';'      reduce using rule 38 ($@3)
    '{'      reduce using rule 38 ($@3)
    '('      reduce using rule 38 ($@3)

    $@3  go to state 386


State 378

   32 iterStmt: FOR '(' error ')' prepareScope . body

    error    shift, and go to state 219
    TYPE     shift, and go to state 220
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 221
    FOR      shift, and go to state 222
    RETURN   shift, and go to state 223
    FORALL   shift, and go to state 224
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 225
    '{'      shift, and go to state 132
    '('      shift, and go to state 53

    varDecl      go to state 133
    funcDecl     go to state 134
    stmt         go to state 135
    iterStmt     go to state 226
    body         go to state 387
    condStmt     go to state 227
    returnStmt   go to state 228
    exprStmt     go to state 229
    expression   go to state 230
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 379

   28 iterStmt: FOR '(' exprStmt exprStmt ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 388


State 380

   29 iterStmt: FOR '(' exprStmt exprStmt expression . ')' prepareScope body

    ')'  shift, and go to state 389


State 381

   31 iterStmt: FORALL '(' error ')' prepareScope . body

    error    shift, and go to state 219
    TYPE     shift, and go to state 220
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 221
    FOR      shift, and go to state 222
    RETURN   shift, and go to state 223
    FORALL   shift, and go to state 224
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 225
    '{'      shift, and go to state 132
    '('      shift, and go to state 53

    varDecl      go to state 133
    funcDecl     go to state 134
    stmt         go to state 135
    iterStmt     go to state 226
    body         go to state 390
    condStmt     go to state 227
    returnStmt   go to state 228
    exprStmt     go to state 229
    expression   go to state 230
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 382

   30 iterStmt: FORALL '(' simpleExpr ')' prepareScope . body

    error    shift, and go to state 219
    TYPE     shift, and go to state 220
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 221
    FOR      shift, and go to state 222
    RETURN   shift, and go to state 223
    FORALL   shift, and go to state 224
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 225
    '{'      shift, and go to state 132
    '('      shift, and go to state 53

    varDecl      go to state 133
    funcDecl     go to state 134
    stmt         go to state 135
    iterStmt     go to state 226
    body         go to state 391
    condStmt     go to state 227
    returnStmt   go to state 228
    exprStmt     go to state 229
    expression   go to state 230
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 383

   88 call: var $@4 '(' params ')' .

    RELOP   reduce using rule 88 (call)
    COMP    reduce using rule 88 (call)
    ARTOP1  reduce using rule 88 (call)
    ARTOP2  reduce using rule 88 (call)
    IN      reduce using rule 88 (call)
    DISJ    reduce using rule 88 (call)
    CONJ    reduce using rule 88 (call)
    ','     reduce using rule 88 (call)
    ')'     reduce using rule 88 (call)


State 384

   14 funcDecl: TYPE ID $@1 arguments $@2 . '{' funcBody '}'

    '{'  shift, and go to state 392


State 385

   14 funcDecl: TYPE ID $@1 arguments $@2 '{' . funcBody '}'

    error    reduce using rule 21 (funcBody)
    TYPE     reduce using rule 21 (funcBody)
    SETOP    reduce using rule 21 (funcBody)
    ARTOP1   reduce using rule 21 (funcBody)
    ID       reduce using rule 21 (funcBody)
    IF       reduce using rule 21 (funcBody)
    FOR      reduce using rule 21 (funcBody)
    RETURN   reduce using rule 21 (funcBody)
    FORALL   reduce using rule 21 (funcBody)
    IS_SET   reduce using rule 21 (funcBody)
    EXISTS   reduce using rule 21 (funcBody)
    NEG      reduce using rule 21 (funcBody)
    READ     reduce using rule 21 (funcBody)
    WRITE    reduce using rule 21 (funcBody)
    WRITELN  reduce using rule 21 (funcBody)
    INTEGER  reduce using rule 21 (funcBody)
    FLOAT    reduce using rule 21 (funcBody)
    EMPTY    reduce using rule 21 (funcBody)
    ';'      reduce using rule 21 (funcBody)
    '}'      reduce using rule 21 (funcBody)
    '('      reduce using rule 21 (funcBody)

    funcBody  go to state 393


State 386

   39 condStmt: IF cond prepareScope body ELSE $@3 . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 394


State 387

   32 iterStmt: FOR '(' error ')' prepareScope body .

    error    reduce using rule 32 (iterStmt)
    TYPE     reduce using rule 32 (iterStmt)
    SETOP    reduce using rule 32 (iterStmt)
    ARTOP1   reduce using rule 32 (iterStmt)
    ID       reduce using rule 32 (iterStmt)
    IF       reduce using rule 32 (iterStmt)
    ELSE     reduce using rule 32 (iterStmt)
    FOR      reduce using rule 32 (iterStmt)
    RETURN   reduce using rule 32 (iterStmt)
    FORALL   reduce using rule 32 (iterStmt)
    IS_SET   reduce using rule 32 (iterStmt)
    EXISTS   reduce using rule 32 (iterStmt)
    NEG      reduce using rule 32 (iterStmt)
    READ     reduce using rule 32 (iterStmt)
    WRITE    reduce using rule 32 (iterStmt)
    WRITELN  reduce using rule 32 (iterStmt)
    INTEGER  reduce using rule 32 (iterStmt)
    FLOAT    reduce using rule 32 (iterStmt)
    EMPTY    reduce using rule 32 (iterStmt)
    ';'      reduce using rule 32 (iterStmt)
    '}'      reduce using rule 32 (iterStmt)
    '('      reduce using rule 32 (iterStmt)


State 388

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope . body

    error    shift, and go to state 219
    TYPE     shift, and go to state 220
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 221
    FOR      shift, and go to state 222
    RETURN   shift, and go to state 223
    FORALL   shift, and go to state 224
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 225
    '{'      shift, and go to state 132
    '('      shift, and go to state 53

    varDecl      go to state 133
    funcDecl     go to state 134
    stmt         go to state 135
    iterStmt     go to state 226
    body         go to state 395
    condStmt     go to state 227
    returnStmt   go to state 228
    exprStmt     go to state 229
    expression   go to state 230
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 389

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' . prepareScope body

    error    reduce using rule 40 (prepareScope)
    TYPE     reduce using rule 40 (prepareScope)
    SETOP    reduce using rule 40 (prepareScope)
    ARTOP1   reduce using rule 40 (prepareScope)
    ID       reduce using rule 40 (prepareScope)
    IF       reduce using rule 40 (prepareScope)
    FOR      reduce using rule 40 (prepareScope)
    RETURN   reduce using rule 40 (prepareScope)
    FORALL   reduce using rule 40 (prepareScope)
    IS_SET   reduce using rule 40 (prepareScope)
    EXISTS   reduce using rule 40 (prepareScope)
    NEG      reduce using rule 40 (prepareScope)
    READ     reduce using rule 40 (prepareScope)
    WRITE    reduce using rule 40 (prepareScope)
    WRITELN  reduce using rule 40 (prepareScope)
    INTEGER  reduce using rule 40 (prepareScope)
    FLOAT    reduce using rule 40 (prepareScope)
    EMPTY    reduce using rule 40 (prepareScope)
    ';'      reduce using rule 40 (prepareScope)
    '{'      reduce using rule 40 (prepareScope)
    '('      reduce using rule 40 (prepareScope)

    prepareScope  go to state 396


State 390

   31 iterStmt: FORALL '(' error ')' prepareScope body .

    error    reduce using rule 31 (iterStmt)
    TYPE     reduce using rule 31 (iterStmt)
    SETOP    reduce using rule 31 (iterStmt)
    ARTOP1   reduce using rule 31 (iterStmt)
    ID       reduce using rule 31 (iterStmt)
    IF       reduce using rule 31 (iterStmt)
    ELSE     reduce using rule 31 (iterStmt)
    FOR      reduce using rule 31 (iterStmt)
    RETURN   reduce using rule 31 (iterStmt)
    FORALL   reduce using rule 31 (iterStmt)
    IS_SET   reduce using rule 31 (iterStmt)
    EXISTS   reduce using rule 31 (iterStmt)
    NEG      reduce using rule 31 (iterStmt)
    READ     reduce using rule 31 (iterStmt)
    WRITE    reduce using rule 31 (iterStmt)
    WRITELN  reduce using rule 31 (iterStmt)
    INTEGER  reduce using rule 31 (iterStmt)
    FLOAT    reduce using rule 31 (iterStmt)
    EMPTY    reduce using rule 31 (iterStmt)
    ';'      reduce using rule 31 (iterStmt)
    '}'      reduce using rule 31 (iterStmt)
    '('      reduce using rule 31 (iterStmt)


State 391

   30 iterStmt: FORALL '(' simpleExpr ')' prepareScope body .

    error    reduce using rule 30 (iterStmt)
    TYPE     reduce using rule 30 (iterStmt)
    SETOP    reduce using rule 30 (iterStmt)
    ARTOP1   reduce using rule 30 (iterStmt)
    ID       reduce using rule 30 (iterStmt)
    IF       reduce using rule 30 (iterStmt)
    ELSE     reduce using rule 30 (iterStmt)
    FOR      reduce using rule 30 (iterStmt)
    RETURN   reduce using rule 30 (iterStmt)
    FORALL   reduce using rule 30 (iterStmt)
    IS_SET   reduce using rule 30 (iterStmt)
    EXISTS   reduce using rule 30 (iterStmt)
    NEG      reduce using rule 30 (iterStmt)
    READ     reduce using rule 30 (iterStmt)
    WRITE    reduce using rule 30 (iterStmt)
    WRITELN  reduce using rule 30 (iterStmt)
    INTEGER  reduce using rule 30 (iterStmt)
    FLOAT    reduce using rule 30 (iterStmt)
    EMPTY    reduce using rule 30 (iterStmt)
    ';'      reduce using rule 30 (iterStmt)
    '}'      reduce using rule 30 (iterStmt)
    '('      reduce using rule 30 (iterStmt)


State 392

   14 funcDecl: TYPE ID $@1 arguments $@2 '{' . funcBody '}'

    error    reduce using rule 21 (funcBody)
    TYPE     reduce using rule 21 (funcBody)
    SETOP    reduce using rule 21 (funcBody)
    ARTOP1   reduce using rule 21 (funcBody)
    ID       reduce using rule 21 (funcBody)
    IF       reduce using rule 21 (funcBody)
    FOR      reduce using rule 21 (funcBody)
    RETURN   reduce using rule 21 (funcBody)
    FORALL   reduce using rule 21 (funcBody)
    IS_SET   reduce using rule 21 (funcBody)
    EXISTS   reduce using rule 21 (funcBody)
    NEG      reduce using rule 21 (funcBody)
    READ     reduce using rule 21 (funcBody)
    WRITE    reduce using rule 21 (funcBody)
    WRITELN  reduce using rule 21 (funcBody)
    INTEGER  reduce using rule 21 (funcBody)
    FLOAT    reduce using rule 21 (funcBody)
    EMPTY    reduce using rule 21 (funcBody)
    ';'      reduce using rule 21 (funcBody)
    '}'      reduce using rule 21 (funcBody)
    '('      reduce using rule 21 (funcBody)

    funcBody  go to state 397


State 393

   14 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody . '}'
   22 funcBody: funcBody . varDecl
   23         | funcBody . stmt

    error    shift, and go to state 33
    TYPE     shift, and go to state 34
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 38
    FOR      shift, and go to state 39
    RETURN   shift, and go to state 40
    FORALL   shift, and go to state 41
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 51
    '}'      shift, and go to state 398
    '('      shift, and go to state 53

    varDecl      go to state 54
    stmt         go to state 55
    iterStmt     go to state 56
    condStmt     go to state 57
    returnStmt   go to state 58
    exprStmt     go to state 59
    expression   go to state 60
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 394

   39 condStmt: IF cond prepareScope body ELSE $@3 prepareScope . body

    error    shift, and go to state 219
    TYPE     shift, and go to state 220
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 221
    FOR      shift, and go to state 222
    RETURN   shift, and go to state 223
    FORALL   shift, and go to state 224
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 225
    '{'      shift, and go to state 132
    '('      shift, and go to state 53

    varDecl      go to state 133
    funcDecl     go to state 134
    stmt         go to state 135
    iterStmt     go to state 226
    body         go to state 399
    condStmt     go to state 227
    returnStmt   go to state 228
    exprStmt     go to state 229
    expression   go to state 230
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 395

   28 iterStmt: FOR '(' exprStmt exprStmt ')' prepareScope body .

    error    reduce using rule 28 (iterStmt)
    TYPE     reduce using rule 28 (iterStmt)
    SETOP    reduce using rule 28 (iterStmt)
    ARTOP1   reduce using rule 28 (iterStmt)
    ID       reduce using rule 28 (iterStmt)
    IF       reduce using rule 28 (iterStmt)
    ELSE     reduce using rule 28 (iterStmt)
    FOR      reduce using rule 28 (iterStmt)
    RETURN   reduce using rule 28 (iterStmt)
    FORALL   reduce using rule 28 (iterStmt)
    IS_SET   reduce using rule 28 (iterStmt)
    EXISTS   reduce using rule 28 (iterStmt)
    NEG      reduce using rule 28 (iterStmt)
    READ     reduce using rule 28 (iterStmt)
    WRITE    reduce using rule 28 (iterStmt)
    WRITELN  reduce using rule 28 (iterStmt)
    INTEGER  reduce using rule 28 (iterStmt)
    FLOAT    reduce using rule 28 (iterStmt)
    EMPTY    reduce using rule 28 (iterStmt)
    ';'      reduce using rule 28 (iterStmt)
    '}'      reduce using rule 28 (iterStmt)
    '('      reduce using rule 28 (iterStmt)


State 396

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' prepareScope . body

    error    shift, and go to state 219
    TYPE     shift, and go to state 220
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 221
    FOR      shift, and go to state 222
    RETURN   shift, and go to state 223
    FORALL   shift, and go to state 224
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 225
    '{'      shift, and go to state 132
    '('      shift, and go to state 53

    varDecl      go to state 133
    funcDecl     go to state 134
    stmt         go to state 135
    iterStmt     go to state 226
    body         go to state 400
    condStmt     go to state 227
    returnStmt   go to state 228
    exprStmt     go to state 229
    expression   go to state 230
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 397

   14 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody . '}'
   22 funcBody: funcBody . varDecl
   23         | funcBody . stmt

    error    shift, and go to state 33
    TYPE     shift, and go to state 34
    SETOP    shift, and go to state 35
    ARTOP1   shift, and go to state 36
    ID       shift, and go to state 37
    IF       shift, and go to state 38
    FOR      shift, and go to state 39
    RETURN   shift, and go to state 40
    FORALL   shift, and go to state 41
    IS_SET   shift, and go to state 42
    EXISTS   shift, and go to state 43
    NEG      shift, and go to state 44
    READ     shift, and go to state 45
    WRITE    shift, and go to state 46
    WRITELN  shift, and go to state 47
    INTEGER  shift, and go to state 48
    FLOAT    shift, and go to state 49
    EMPTY    shift, and go to state 50
    ';'      shift, and go to state 51
    '}'      shift, and go to state 401
    '('      shift, and go to state 53

    varDecl      go to state 54
    stmt         go to state 55
    iterStmt     go to state 56
    condStmt     go to state 57
    returnStmt   go to state 58
    exprStmt     go to state 59
    expression   go to state 60
    assign       go to state 61
    var          go to state 62
    inExpr       go to state 63
    outExpr      go to state 64
    simpleExpr   go to state 65
    conjExpr     go to state 66
    disjExpr     go to state 67
    compExpr     go to state 68
    relExpr      go to state 69
    artExpr1     go to state 70
    artExpr2     go to state 71
    negExpr      go to state 72
    minusFactor  go to state 73
    factor       go to state 74
    constant     go to state 75
    call         go to state 76


State 398

   14 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody '}' .

    error    reduce using rule 14 (funcDecl)
    TYPE     reduce using rule 14 (funcDecl)
    SETOP    reduce using rule 14 (funcDecl)
    ARTOP1   reduce using rule 14 (funcDecl)
    ID       reduce using rule 14 (funcDecl)
    IF       reduce using rule 14 (funcDecl)
    ELSE     reduce using rule 14 (funcDecl)
    FOR      reduce using rule 14 (funcDecl)
    RETURN   reduce using rule 14 (funcDecl)
    FORALL   reduce using rule 14 (funcDecl)
    IS_SET   reduce using rule 14 (funcDecl)
    EXISTS   reduce using rule 14 (funcDecl)
    NEG      reduce using rule 14 (funcDecl)
    READ     reduce using rule 14 (funcDecl)
    WRITE    reduce using rule 14 (funcDecl)
    WRITELN  reduce using rule 14 (funcDecl)
    INTEGER  reduce using rule 14 (funcDecl)
    FLOAT    reduce using rule 14 (funcDecl)
    EMPTY    reduce using rule 14 (funcDecl)
    ';'      reduce using rule 14 (funcDecl)
    '}'      reduce using rule 14 (funcDecl)
    '('      reduce using rule 14 (funcDecl)


State 399

   39 condStmt: IF cond prepareScope body ELSE $@3 prepareScope body .

    error    reduce using rule 39 (condStmt)
    TYPE     reduce using rule 39 (condStmt)
    SETOP    reduce using rule 39 (condStmt)
    ARTOP1   reduce using rule 39 (condStmt)
    ID       reduce using rule 39 (condStmt)
    IF       reduce using rule 39 (condStmt)
    ELSE     reduce using rule 39 (condStmt)
    FOR      reduce using rule 39 (condStmt)
    RETURN   reduce using rule 39 (condStmt)
    FORALL   reduce using rule 39 (condStmt)
    IS_SET   reduce using rule 39 (condStmt)
    EXISTS   reduce using rule 39 (condStmt)
    NEG      reduce using rule 39 (condStmt)
    READ     reduce using rule 39 (condStmt)
    WRITE    reduce using rule 39 (condStmt)
    WRITELN  reduce using rule 39 (condStmt)
    INTEGER  reduce using rule 39 (condStmt)
    FLOAT    reduce using rule 39 (condStmt)
    EMPTY    reduce using rule 39 (condStmt)
    ';'      reduce using rule 39 (condStmt)
    '}'      reduce using rule 39 (condStmt)
    '('      reduce using rule 39 (condStmt)


State 400

   29 iterStmt: FOR '(' exprStmt exprStmt expression ')' prepareScope body .

    error    reduce using rule 29 (iterStmt)
    TYPE     reduce using rule 29 (iterStmt)
    SETOP    reduce using rule 29 (iterStmt)
    ARTOP1   reduce using rule 29 (iterStmt)
    ID       reduce using rule 29 (iterStmt)
    IF       reduce using rule 29 (iterStmt)
    ELSE     reduce using rule 29 (iterStmt)
    FOR      reduce using rule 29 (iterStmt)
    RETURN   reduce using rule 29 (iterStmt)
    FORALL   reduce using rule 29 (iterStmt)
    IS_SET   reduce using rule 29 (iterStmt)
    EXISTS   reduce using rule 29 (iterStmt)
    NEG      reduce using rule 29 (iterStmt)
    READ     reduce using rule 29 (iterStmt)
    WRITE    reduce using rule 29 (iterStmt)
    WRITELN  reduce using rule 29 (iterStmt)
    INTEGER  reduce using rule 29 (iterStmt)
    FLOAT    reduce using rule 29 (iterStmt)
    EMPTY    reduce using rule 29 (iterStmt)
    ';'      reduce using rule 29 (iterStmt)
    '}'      reduce using rule 29 (iterStmt)
    '('      reduce using rule 29 (iterStmt)


State 401

   14 funcDecl: TYPE ID $@1 arguments $@2 '{' funcBody '}' .

    error    reduce using rule 14 (funcDecl)
    TYPE     reduce using rule 14 (funcDecl)
    SETOP    reduce using rule 14 (funcDecl)
    ARTOP1   reduce using rule 14 (funcDecl)
    ID       reduce using rule 14 (funcDecl)
    IF       reduce using rule 14 (funcDecl)
    FOR      reduce using rule 14 (funcDecl)
    RETURN   reduce using rule 14 (funcDecl)
    FORALL   reduce using rule 14 (funcDecl)
    IS_SET   reduce using rule 14 (funcDecl)
    EXISTS   reduce using rule 14 (funcDecl)
    NEG      reduce using rule 14 (funcDecl)
    READ     reduce using rule 14 (funcDecl)
    WRITE    reduce using rule 14 (funcDecl)
    WRITELN  reduce using rule 14 (funcDecl)
    INTEGER  reduce using rule 14 (funcDecl)
    FLOAT    reduce using rule 14 (funcDecl)
    EMPTY    reduce using rule 14 (funcDecl)
    ';'      reduce using rule 14 (funcDecl)
    '}'      reduce using rule 14 (funcDecl)
    '('      reduce using rule 14 (funcDecl)
