Grammar

    0 $accept: begin $end

    1 begin: program

    2 program: program declaration
    3        | %empty

    4 declaration: varDecl
    5            | funcDecl

    6 varDecl: TYPE varList ';'
    7        | TYPE error

    8 varList: varList ',' new_id
    9        | new_id

   10 new_id: ID

   11 funcDecl: TYPE new_id arguments '{' funcBody '}'

   12 arguments: '(' ')'
   13          | '(' argsList ')'
   14          | '(' error ')'

   15 argsList: argsList ',' arg
   16         | arg

   17 arg: TYPE ID

   18 funcBody: %empty
   19         | funcBody varDecl
   20         | funcBody funcDecl
   21         | funcBody stmt

   22 stmt: exprStmt
   23     | returnStmt
   24     | iterStmt
   25     | condStmt

   26 iterStmt: FOR '(' exprStmt exprStmt ')' body
   27         | FOR '(' exprStmt exprStmt expression ')' body
   28         | FORALL '(' simpleExpr ')' body
   29         | FORALL '(' error ')' body
   30         | FOR '(' error ')' body

   31 body: '{' funcBody '}'
   32     | stmt
   33     | varDecl
   34     | funcDecl

   35 condStmt: IF cond body
   36         | IF cond body ELSE body

   37 cond: '(' expression ')'
   38     | '(' error ')'

   39 returnStmt: RETURN exprStmt

   40 exprStmt: expression ';'
   41         | error
   42         | ';'

   43 expression: assign
   44           | inExpr
   45           | outExpr
   46           | simpleExpr

   47 assign: var '=' simpleExpr

   48 var: ID

   49 inExpr: READ '(' var ')'

   50 outExpr: WRITE '(' output ')'
   51        | WRITELN '(' output ')'

   52 output: ID
   53       | CHAR
   54       | STRING

   55 simpleExpr: simpleExpr IN negExpr
   56           | negExpr

   57 negExpr: NEG negExpr
   58        | disjExpr

   59 disjExpr: disjExpr DISJ conjExpr
   60         | conjExpr

   61 conjExpr: conjExpr CONJ relExpr
   62         | relExpr

   63 relExpr: relExpr RELOP artExpr1
   64        | artExpr1

   65 artExpr1: artExpr1 ARTOP1 artExpr2
   66         | artExpr2

   67 artExpr2: artExpr2 ARTOP2 factor
   68         | factor

   69 factor: ID
   70       | '(' simpleExpr ')'
   71       | constant
   72       | call
   73       | IS_SET '(' factor ')'
   74       | EXISTS '(' simpleExpr ')'
   75       | SETOP '(' simpleExpr ')'

   76 constant: INTEGER
   77         | FLOAT
   78         | EMPTY

   79 call: var '(' params ')'

   80 params: %empty
   81       | paramList

   82 paramList: paramList ',' simpleExpr
   83          | simpleExpr


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 12 13 14 26 27 28 29 30 37 38 49 50 51 70 73 74 75 79
    ')' (41) 12 13 14 26 27 28 29 30 37 38 49 50 51 70 73 74 75 79
    ',' (44) 8 15 82
    ';' (59) 6 40 42
    '=' (61) 47
    '{' (123) 11 31
    '}' (125) 11 31
    error (256) 7 14 29 30 38 41
    TYPE <ival> (258) 6 7 11 17
    RELOP <ival> (259) 63
    SETOP <ival> (260) 75
    ARTOP1 <ival> (261) 65
    ARTOP2 <ival> (262) 67
    ID <sval> (263) 10 17 48 52 69
    IF (264) 35 36
    ELSE (265) 36
    FOR (266) 26 27 30
    RETURN (267) 39
    FORALL (268) 28 29
    IN (269) 55
    IS_SET (270) 73
    EXISTS (271) 74
    DISJ (272) 59
    CONJ (273) 61
    NEG (274) 57
    READ (275) 49
    WRITE (276) 50
    WRITELN (277) 51
    INTEGER <ival> (278) 76
    FLOAT <fval> (279) 77
    CHAR <cval> (280) 53
    STRING <sval> (281) 54
    EMPTY (282) 78
    THEN (283)


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    begin (37)
        on left: 1
        on right: 0
    program <tnode> (38)
        on left: 2 3
        on right: 1 2
    declaration <tnode> (39)
        on left: 4 5
        on right: 2
    varDecl <tnode> (40)
        on left: 6 7
        on right: 4 19 33
    varList <tnode> (41)
        on left: 8 9
        on right: 6 8
    new_id <tnode> (42)
        on left: 10
        on right: 8 9 11
    funcDecl <tnode> (43)
        on left: 11
        on right: 5 20 34
    arguments <tnode> (44)
        on left: 12 13 14
        on right: 11
    argsList <tnode> (45)
        on left: 15 16
        on right: 13 15
    arg <tnode> (46)
        on left: 17
        on right: 15 16
    funcBody <tnode> (47)
        on left: 18 19 20 21
        on right: 11 19 20 21 31
    stmt <tnode> (48)
        on left: 22 23 24 25
        on right: 21 32
    iterStmt <tnode> (49)
        on left: 26 27 28 29 30
        on right: 24
    body <tnode> (50)
        on left: 31 32 33 34
        on right: 26 27 28 29 30 35 36
    condStmt <tnode> (51)
        on left: 35 36
        on right: 25
    cond <tnode> (52)
        on left: 37 38
        on right: 35 36
    returnStmt <tnode> (53)
        on left: 39
        on right: 23
    exprStmt <tnode> (54)
        on left: 40 41 42
        on right: 22 26 27 39
    expression <tnode> (55)
        on left: 43 44 45 46
        on right: 27 37 40
    assign <tnode> (56)
        on left: 47
        on right: 43
    var <tnode> (57)
        on left: 48
        on right: 47 49 79
    inExpr <tnode> (58)
        on left: 49
        on right: 44
    outExpr <tnode> (59)
        on left: 50 51
        on right: 45
    output <tnode> (60)
        on left: 52 53 54
        on right: 50 51
    simpleExpr <tnode> (61)
        on left: 55 56
        on right: 28 46 47 55 70 74 75 82 83
    negExpr <tnode> (62)
        on left: 57 58
        on right: 55 56 57
    disjExpr <tnode> (63)
        on left: 59 60
        on right: 58 59
    conjExpr <tnode> (64)
        on left: 61 62
        on right: 59 60 61
    relExpr <tnode> (65)
        on left: 63 64
        on right: 61 62 63
    artExpr1 <tnode> (66)
        on left: 65 66
        on right: 63 64 65
    artExpr2 <tnode> (67)
        on left: 67 68
        on right: 65 66 67
    factor <tnode> (68)
        on left: 69 70 71 72 73 74 75
        on right: 67 68 73
    constant <tnode> (69)
        on left: 76 77 78
        on right: 71
    call <tnode> (70)
        on left: 79
        on right: 72
    params <tnode> (71)
        on left: 80 81
        on right: 79
    paramList <tnode> (72)
        on left: 82 83
        on right: 81 82


State 0

    0 $accept: . begin $end

    $end  reduce using rule 3 (program)
    TYPE  reduce using rule 3 (program)

    begin    go to state 1
    program  go to state 2


State 1

    0 $accept: begin . $end

    $end  shift, and go to state 3


State 2

    1 begin: program .
    2 program: program . declaration

    TYPE  shift, and go to state 4

    $end  reduce using rule 1 (begin)

    declaration  go to state 5
    varDecl      go to state 6
    funcDecl     go to state 7


State 3

    0 $accept: begin $end .

    $default  accept


State 4

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error
   11 funcDecl: TYPE . new_id arguments '{' funcBody '}'

    error  shift, and go to state 8
    ID     shift, and go to state 9

    varList  go to state 10
    new_id   go to state 11


State 5

    2 program: program declaration .

    $end  reduce using rule 2 (program)
    TYPE  reduce using rule 2 (program)


State 6

    4 declaration: varDecl .

    $end  reduce using rule 4 (declaration)
    TYPE  reduce using rule 4 (declaration)


State 7

    5 declaration: funcDecl .

    $end  reduce using rule 5 (declaration)
    TYPE  reduce using rule 5 (declaration)


State 8

    7 varDecl: TYPE error .

    $end  reduce using rule 7 (varDecl)
    TYPE  reduce using rule 7 (varDecl)


State 9

   10 new_id: ID .

    ';'  reduce using rule 10 (new_id)
    ','  reduce using rule 10 (new_id)
    '('  reduce using rule 10 (new_id)


State 10

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 12
    ','  shift, and go to state 13


State 11

    9 varList: new_id .
   11 funcDecl: TYPE new_id . arguments '{' funcBody '}'

    '('  shift, and go to state 14

    ';'  reduce using rule 9 (varList)
    ','  reduce using rule 9 (varList)

    arguments  go to state 15


State 12

    6 varDecl: TYPE varList ';' .

    $end  reduce using rule 6 (varDecl)
    TYPE  reduce using rule 6 (varDecl)


State 13

    8 varList: varList ',' . new_id

    ID  shift, and go to state 152

    new_id  go to state 16


State 14

   12 arguments: '(' . ')'
   13          | '(' . argsList ')'
   14          | '(' . error ')'

    error  shift, and go to state 17
    TYPE   shift, and go to state 18
    ')'    shift, and go to state 19

    argsList  go to state 20
    arg       go to state 21


State 15

   11 funcDecl: TYPE new_id arguments . '{' funcBody '}'

    '{'  shift, and go to state 22


State 16

    8 varList: varList ',' new_id .

    ';'  reduce using rule 8 (varList)
    ','  reduce using rule 8 (varList)


State 17

   14 arguments: '(' error . ')'

    ')'  shift, and go to state 23


State 18

   17 arg: TYPE . ID

    ID  shift, and go to state 24


State 19

   12 arguments: '(' ')' .

    '{'  reduce using rule 12 (arguments)


State 20

   13 arguments: '(' argsList . ')'
   15 argsList: argsList . ',' arg

    ','  shift, and go to state 25
    ')'  shift, and go to state 26


State 21

   16 argsList: arg .

    ','  reduce using rule 16 (argsList)
    ')'  reduce using rule 16 (argsList)


State 22

   11 funcDecl: TYPE new_id arguments '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)

    funcBody  go to state 27


State 23

   14 arguments: '(' error ')' .

    '{'  reduce using rule 14 (arguments)


State 24

   17 arg: TYPE ID .

    ','  reduce using rule 17 (arg)
    ')'  reduce using rule 17 (arg)


State 25

   15 argsList: argsList ',' . arg

    TYPE  shift, and go to state 18

    arg  go to state 28


State 26

   13 arguments: '(' argsList ')' .

    '{'  reduce using rule 13 (arguments)


State 27

   11 funcDecl: TYPE new_id arguments '{' funcBody . '}'
   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt

    error    shift, and go to state 29
    TYPE     shift, and go to state 153
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '}'      shift, and go to state 46
    '('      shift, and go to state 47

    varDecl     go to state 48
    funcDecl    go to state 49
    stmt        go to state 50
    iterStmt    go to state 51
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 28

   15 argsList: argsList ',' arg .

    ','  reduce using rule 15 (argsList)
    ')'  reduce using rule 15 (argsList)


State 29

   41 exprStmt: error .

    error    reduce using rule 41 (exprStmt)
    TYPE     reduce using rule 41 (exprStmt)
    SETOP    reduce using rule 41 (exprStmt)
    ID       reduce using rule 41 (exprStmt)
    IF       reduce using rule 41 (exprStmt)
    FOR      reduce using rule 41 (exprStmt)
    RETURN   reduce using rule 41 (exprStmt)
    FORALL   reduce using rule 41 (exprStmt)
    IS_SET   reduce using rule 41 (exprStmt)
    EXISTS   reduce using rule 41 (exprStmt)
    NEG      reduce using rule 41 (exprStmt)
    READ     reduce using rule 41 (exprStmt)
    WRITE    reduce using rule 41 (exprStmt)
    WRITELN  reduce using rule 41 (exprStmt)
    INTEGER  reduce using rule 41 (exprStmt)
    FLOAT    reduce using rule 41 (exprStmt)
    EMPTY    reduce using rule 41 (exprStmt)
    ';'      reduce using rule 41 (exprStmt)
    '}'      reduce using rule 41 (exprStmt)
    '('      reduce using rule 41 (exprStmt)


State 30

   75 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 70


State 31

   48 var: ID .
   69 factor: ID .

    RELOP   reduce using rule 69 (factor)
    ARTOP1  reduce using rule 69 (factor)
    ARTOP2  reduce using rule 69 (factor)
    IN      reduce using rule 69 (factor)
    DISJ    reduce using rule 69 (factor)
    CONJ    reduce using rule 69 (factor)
    ';'     reduce using rule 69 (factor)
    '('     reduce using rule 48 (var)
    '='     reduce using rule 48 (var)


State 32

   35 condStmt: IF . cond body
   36         | IF . cond body ELSE body

    '('  shift, and go to state 71

    cond  go to state 72


State 33

   26 iterStmt: FOR . '(' exprStmt exprStmt ')' body
   27         | FOR . '(' exprStmt exprStmt expression ')' body
   30         | FOR . '(' error ')' body

    '('  shift, and go to state 73


State 34

   39 returnStmt: RETURN . exprStmt

    error    shift, and go to state 29
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '('      shift, and go to state 47

    exprStmt    go to state 74
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 35

   28 iterStmt: FORALL . '(' simpleExpr ')' body
   29         | FORALL . '(' error ')' body

    '('  shift, and go to state 75


State 36

   73 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 76


State 37

   74 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 77


State 38

   57 negExpr: NEG . negExpr

    SETOP    shift, and go to state 30
    ID       shift, and go to state 154
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var       go to state 78
    negExpr   go to state 79
    disjExpr  go to state 62
    conjExpr  go to state 63
    relExpr   go to state 64
    artExpr1  go to state 65
    artExpr2  go to state 66
    factor    go to state 67
    constant  go to state 68
    call      go to state 69


State 39

   49 inExpr: READ . '(' var ')'

    '('  shift, and go to state 80


State 40

   50 outExpr: WRITE . '(' output ')'

    '('  shift, and go to state 81


State 41

   51 outExpr: WRITELN . '(' output ')'

    '('  shift, and go to state 82


State 42

   76 constant: INTEGER .

    RELOP   reduce using rule 76 (constant)
    ARTOP1  reduce using rule 76 (constant)
    ARTOP2  reduce using rule 76 (constant)
    IN      reduce using rule 76 (constant)
    DISJ    reduce using rule 76 (constant)
    CONJ    reduce using rule 76 (constant)
    ';'     reduce using rule 76 (constant)


State 43

   77 constant: FLOAT .

    RELOP   reduce using rule 77 (constant)
    ARTOP1  reduce using rule 77 (constant)
    ARTOP2  reduce using rule 77 (constant)
    IN      reduce using rule 77 (constant)
    DISJ    reduce using rule 77 (constant)
    CONJ    reduce using rule 77 (constant)
    ';'     reduce using rule 77 (constant)


State 44

   78 constant: EMPTY .

    RELOP   reduce using rule 78 (constant)
    ARTOP1  reduce using rule 78 (constant)
    ARTOP2  reduce using rule 78 (constant)
    IN      reduce using rule 78 (constant)
    DISJ    reduce using rule 78 (constant)
    CONJ    reduce using rule 78 (constant)
    ';'     reduce using rule 78 (constant)


State 45

   42 exprStmt: ';' .

    error    reduce using rule 42 (exprStmt)
    TYPE     reduce using rule 42 (exprStmt)
    SETOP    reduce using rule 42 (exprStmt)
    ID       reduce using rule 42 (exprStmt)
    IF       reduce using rule 42 (exprStmt)
    FOR      reduce using rule 42 (exprStmt)
    RETURN   reduce using rule 42 (exprStmt)
    FORALL   reduce using rule 42 (exprStmt)
    IS_SET   reduce using rule 42 (exprStmt)
    EXISTS   reduce using rule 42 (exprStmt)
    NEG      reduce using rule 42 (exprStmt)
    READ     reduce using rule 42 (exprStmt)
    WRITE    reduce using rule 42 (exprStmt)
    WRITELN  reduce using rule 42 (exprStmt)
    INTEGER  reduce using rule 42 (exprStmt)
    FLOAT    reduce using rule 42 (exprStmt)
    EMPTY    reduce using rule 42 (exprStmt)
    ';'      reduce using rule 42 (exprStmt)
    '}'      reduce using rule 42 (exprStmt)
    '('      reduce using rule 42 (exprStmt)


State 46

   11 funcDecl: TYPE new_id arguments '{' funcBody '}' .

    $end  reduce using rule 11 (funcDecl)
    TYPE  reduce using rule 11 (funcDecl)


State 47

   70 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 83
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 48

   19 funcBody: funcBody varDecl .

    error    reduce using rule 19 (funcBody)
    TYPE     reduce using rule 19 (funcBody)
    SETOP    reduce using rule 19 (funcBody)
    ID       reduce using rule 19 (funcBody)
    IF       reduce using rule 19 (funcBody)
    FOR      reduce using rule 19 (funcBody)
    RETURN   reduce using rule 19 (funcBody)
    FORALL   reduce using rule 19 (funcBody)
    IS_SET   reduce using rule 19 (funcBody)
    EXISTS   reduce using rule 19 (funcBody)
    NEG      reduce using rule 19 (funcBody)
    READ     reduce using rule 19 (funcBody)
    WRITE    reduce using rule 19 (funcBody)
    WRITELN  reduce using rule 19 (funcBody)
    INTEGER  reduce using rule 19 (funcBody)
    FLOAT    reduce using rule 19 (funcBody)
    EMPTY    reduce using rule 19 (funcBody)
    ';'      reduce using rule 19 (funcBody)
    '}'      reduce using rule 19 (funcBody)
    '('      reduce using rule 19 (funcBody)


State 49

   20 funcBody: funcBody funcDecl .

    error    reduce using rule 20 (funcBody)
    TYPE     reduce using rule 20 (funcBody)
    SETOP    reduce using rule 20 (funcBody)
    ID       reduce using rule 20 (funcBody)
    IF       reduce using rule 20 (funcBody)
    FOR      reduce using rule 20 (funcBody)
    RETURN   reduce using rule 20 (funcBody)
    FORALL   reduce using rule 20 (funcBody)
    IS_SET   reduce using rule 20 (funcBody)
    EXISTS   reduce using rule 20 (funcBody)
    NEG      reduce using rule 20 (funcBody)
    READ     reduce using rule 20 (funcBody)
    WRITE    reduce using rule 20 (funcBody)
    WRITELN  reduce using rule 20 (funcBody)
    INTEGER  reduce using rule 20 (funcBody)
    FLOAT    reduce using rule 20 (funcBody)
    EMPTY    reduce using rule 20 (funcBody)
    ';'      reduce using rule 20 (funcBody)
    '}'      reduce using rule 20 (funcBody)
    '('      reduce using rule 20 (funcBody)


State 50

   21 funcBody: funcBody stmt .

    error    reduce using rule 21 (funcBody)
    TYPE     reduce using rule 21 (funcBody)
    SETOP    reduce using rule 21 (funcBody)
    ID       reduce using rule 21 (funcBody)
    IF       reduce using rule 21 (funcBody)
    FOR      reduce using rule 21 (funcBody)
    RETURN   reduce using rule 21 (funcBody)
    FORALL   reduce using rule 21 (funcBody)
    IS_SET   reduce using rule 21 (funcBody)
    EXISTS   reduce using rule 21 (funcBody)
    NEG      reduce using rule 21 (funcBody)
    READ     reduce using rule 21 (funcBody)
    WRITE    reduce using rule 21 (funcBody)
    WRITELN  reduce using rule 21 (funcBody)
    INTEGER  reduce using rule 21 (funcBody)
    FLOAT    reduce using rule 21 (funcBody)
    EMPTY    reduce using rule 21 (funcBody)
    ';'      reduce using rule 21 (funcBody)
    '}'      reduce using rule 21 (funcBody)
    '('      reduce using rule 21 (funcBody)


State 51

   24 stmt: iterStmt .

    error    reduce using rule 24 (stmt)
    TYPE     reduce using rule 24 (stmt)
    SETOP    reduce using rule 24 (stmt)
    ID       reduce using rule 24 (stmt)
    IF       reduce using rule 24 (stmt)
    FOR      reduce using rule 24 (stmt)
    RETURN   reduce using rule 24 (stmt)
    FORALL   reduce using rule 24 (stmt)
    IS_SET   reduce using rule 24 (stmt)
    EXISTS   reduce using rule 24 (stmt)
    NEG      reduce using rule 24 (stmt)
    READ     reduce using rule 24 (stmt)
    WRITE    reduce using rule 24 (stmt)
    WRITELN  reduce using rule 24 (stmt)
    INTEGER  reduce using rule 24 (stmt)
    FLOAT    reduce using rule 24 (stmt)
    EMPTY    reduce using rule 24 (stmt)
    ';'      reduce using rule 24 (stmt)
    '}'      reduce using rule 24 (stmt)
    '('      reduce using rule 24 (stmt)


State 52

   25 stmt: condStmt .

    error    reduce using rule 25 (stmt)
    TYPE     reduce using rule 25 (stmt)
    SETOP    reduce using rule 25 (stmt)
    ID       reduce using rule 25 (stmt)
    IF       reduce using rule 25 (stmt)
    FOR      reduce using rule 25 (stmt)
    RETURN   reduce using rule 25 (stmt)
    FORALL   reduce using rule 25 (stmt)
    IS_SET   reduce using rule 25 (stmt)
    EXISTS   reduce using rule 25 (stmt)
    NEG      reduce using rule 25 (stmt)
    READ     reduce using rule 25 (stmt)
    WRITE    reduce using rule 25 (stmt)
    WRITELN  reduce using rule 25 (stmt)
    INTEGER  reduce using rule 25 (stmt)
    FLOAT    reduce using rule 25 (stmt)
    EMPTY    reduce using rule 25 (stmt)
    ';'      reduce using rule 25 (stmt)
    '}'      reduce using rule 25 (stmt)
    '('      reduce using rule 25 (stmt)


State 53

   23 stmt: returnStmt .

    error    reduce using rule 23 (stmt)
    TYPE     reduce using rule 23 (stmt)
    SETOP    reduce using rule 23 (stmt)
    ID       reduce using rule 23 (stmt)
    IF       reduce using rule 23 (stmt)
    FOR      reduce using rule 23 (stmt)
    RETURN   reduce using rule 23 (stmt)
    FORALL   reduce using rule 23 (stmt)
    IS_SET   reduce using rule 23 (stmt)
    EXISTS   reduce using rule 23 (stmt)
    NEG      reduce using rule 23 (stmt)
    READ     reduce using rule 23 (stmt)
    WRITE    reduce using rule 23 (stmt)
    WRITELN  reduce using rule 23 (stmt)
    INTEGER  reduce using rule 23 (stmt)
    FLOAT    reduce using rule 23 (stmt)
    EMPTY    reduce using rule 23 (stmt)
    ';'      reduce using rule 23 (stmt)
    '}'      reduce using rule 23 (stmt)
    '('      reduce using rule 23 (stmt)


State 54

   22 stmt: exprStmt .

    error    reduce using rule 22 (stmt)
    TYPE     reduce using rule 22 (stmt)
    SETOP    reduce using rule 22 (stmt)
    ID       reduce using rule 22 (stmt)
    IF       reduce using rule 22 (stmt)
    FOR      reduce using rule 22 (stmt)
    RETURN   reduce using rule 22 (stmt)
    FORALL   reduce using rule 22 (stmt)
    IS_SET   reduce using rule 22 (stmt)
    EXISTS   reduce using rule 22 (stmt)
    NEG      reduce using rule 22 (stmt)
    READ     reduce using rule 22 (stmt)
    WRITE    reduce using rule 22 (stmt)
    WRITELN  reduce using rule 22 (stmt)
    INTEGER  reduce using rule 22 (stmt)
    FLOAT    reduce using rule 22 (stmt)
    EMPTY    reduce using rule 22 (stmt)
    ';'      reduce using rule 22 (stmt)
    '}'      reduce using rule 22 (stmt)
    '('      reduce using rule 22 (stmt)


State 55

   40 exprStmt: expression . ';'

    ';'  shift, and go to state 84


State 56

   43 expression: assign .

    ';'  reduce using rule 43 (expression)


State 57

   47 assign: var . '=' simpleExpr
   79 call: var . '(' params ')'

    '('  shift, and go to state 85
    '='  shift, and go to state 86


State 58

   44 expression: inExpr .

    ';'  reduce using rule 44 (expression)


State 59

   45 expression: outExpr .

    ';'  reduce using rule 45 (expression)


State 60

   46 expression: simpleExpr .
   55 simpleExpr: simpleExpr . IN negExpr

    IN  shift, and go to state 87

    ';'  reduce using rule 46 (expression)


State 61

   56 simpleExpr: negExpr .

    IN   reduce using rule 56 (simpleExpr)
    ';'  reduce using rule 56 (simpleExpr)


State 62

   58 negExpr: disjExpr .
   59 disjExpr: disjExpr . DISJ conjExpr

    DISJ  shift, and go to state 88

    IN   reduce using rule 58 (negExpr)
    ';'  reduce using rule 58 (negExpr)


State 63

   60 disjExpr: conjExpr .
   61 conjExpr: conjExpr . CONJ relExpr

    CONJ  shift, and go to state 89

    IN    reduce using rule 60 (disjExpr)
    DISJ  reduce using rule 60 (disjExpr)
    ';'   reduce using rule 60 (disjExpr)


State 64

   62 conjExpr: relExpr .
   63 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 90

    IN    reduce using rule 62 (conjExpr)
    DISJ  reduce using rule 62 (conjExpr)
    CONJ  reduce using rule 62 (conjExpr)
    ';'   reduce using rule 62 (conjExpr)


State 65

   64 relExpr: artExpr1 .
   65 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 91

    RELOP  reduce using rule 64 (relExpr)
    IN     reduce using rule 64 (relExpr)
    DISJ   reduce using rule 64 (relExpr)
    CONJ   reduce using rule 64 (relExpr)
    ';'    reduce using rule 64 (relExpr)


State 66

   66 artExpr1: artExpr2 .
   67 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 92

    RELOP   reduce using rule 66 (artExpr1)
    ARTOP1  reduce using rule 66 (artExpr1)
    IN      reduce using rule 66 (artExpr1)
    DISJ    reduce using rule 66 (artExpr1)
    CONJ    reduce using rule 66 (artExpr1)
    ';'     reduce using rule 66 (artExpr1)


State 67

   68 artExpr2: factor .

    RELOP   reduce using rule 68 (artExpr2)
    ARTOP1  reduce using rule 68 (artExpr2)
    ARTOP2  reduce using rule 68 (artExpr2)
    IN      reduce using rule 68 (artExpr2)
    DISJ    reduce using rule 68 (artExpr2)
    CONJ    reduce using rule 68 (artExpr2)
    ';'     reduce using rule 68 (artExpr2)


State 68

   71 factor: constant .

    RELOP   reduce using rule 71 (factor)
    ARTOP1  reduce using rule 71 (factor)
    ARTOP2  reduce using rule 71 (factor)
    IN      reduce using rule 71 (factor)
    DISJ    reduce using rule 71 (factor)
    CONJ    reduce using rule 71 (factor)
    ';'     reduce using rule 71 (factor)


State 69

   72 factor: call .

    RELOP   reduce using rule 72 (factor)
    ARTOP1  reduce using rule 72 (factor)
    ARTOP2  reduce using rule 72 (factor)
    IN      reduce using rule 72 (factor)
    DISJ    reduce using rule 72 (factor)
    CONJ    reduce using rule 72 (factor)
    ';'     reduce using rule 72 (factor)


State 70

   75 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 93
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 71

   37 cond: '(' . expression ')'
   38     | '(' . error ')'

    error    shift, and go to state 94
    SETOP    shift, and go to state 155
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    READ     shift, and go to state 175
    WRITE    shift, and go to state 176
    WRITELN  shift, and go to state 177
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    expression  go to state 95
    assign      go to state 178
    var         go to state 179
    inExpr      go to state 180
    outExpr     go to state 181
    simpleExpr  go to state 182
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 72

   35 condStmt: IF cond . body
   36         | IF cond . body ELSE body

    error    shift, and go to state 183
    TYPE     shift, and go to state 184
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 185
    FOR      shift, and go to state 186
    RETURN   shift, and go to state 187
    FORALL   shift, and go to state 188
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 189
    '{'      shift, and go to state 96
    '('      shift, and go to state 47

    varDecl     go to state 97
    funcDecl    go to state 98
    stmt        go to state 99
    iterStmt    go to state 190
    body        go to state 100
    condStmt    go to state 191
    returnStmt  go to state 192
    exprStmt    go to state 193
    expression  go to state 194
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 73

   26 iterStmt: FOR '(' . exprStmt exprStmt ')' body
   27         | FOR '(' . exprStmt exprStmt expression ')' body
   30         | FOR '(' . error ')' body

    error    shift, and go to state 101
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 195
    '('      shift, and go to state 47

    exprStmt    go to state 102
    expression  go to state 196
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 74

   39 returnStmt: RETURN exprStmt .

    error    reduce using rule 39 (returnStmt)
    TYPE     reduce using rule 39 (returnStmt)
    SETOP    reduce using rule 39 (returnStmt)
    ID       reduce using rule 39 (returnStmt)
    IF       reduce using rule 39 (returnStmt)
    FOR      reduce using rule 39 (returnStmt)
    RETURN   reduce using rule 39 (returnStmt)
    FORALL   reduce using rule 39 (returnStmt)
    IS_SET   reduce using rule 39 (returnStmt)
    EXISTS   reduce using rule 39 (returnStmt)
    NEG      reduce using rule 39 (returnStmt)
    READ     reduce using rule 39 (returnStmt)
    WRITE    reduce using rule 39 (returnStmt)
    WRITELN  reduce using rule 39 (returnStmt)
    INTEGER  reduce using rule 39 (returnStmt)
    FLOAT    reduce using rule 39 (returnStmt)
    EMPTY    reduce using rule 39 (returnStmt)
    ';'      reduce using rule 39 (returnStmt)
    '}'      reduce using rule 39 (returnStmt)
    '('      reduce using rule 39 (returnStmt)


State 75

   28 iterStmt: FORALL '(' . simpleExpr ')' body
   29         | FORALL '(' . error ')' body

    error    shift, and go to state 103
    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 104
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 76

   73 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 197
    ID       shift, and go to state 198
    IS_SET   shift, and go to state 199
    EXISTS   shift, and go to state 200
    INTEGER  shift, and go to state 201
    FLOAT    shift, and go to state 202
    EMPTY    shift, and go to state 203
    '('      shift, and go to state 204

    var       go to state 205
    factor    go to state 105
    constant  go to state 206
    call      go to state 207


State 77

   74 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 106
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 78

   79 call: var . '(' params ')'

    '('  shift, and go to state 85


State 79

   57 negExpr: NEG negExpr .

    IN   reduce using rule 57 (negExpr)
    ';'  reduce using rule 57 (negExpr)


State 80

   49 inExpr: READ '(' . var ')'

    ID  shift, and go to state 107

    var  go to state 108


State 81

   50 outExpr: WRITE '(' . output ')'

    ID      shift, and go to state 109
    CHAR    shift, and go to state 110
    STRING  shift, and go to state 111

    output  go to state 112


State 82

   51 outExpr: WRITELN '(' . output ')'

    ID      shift, and go to state 109
    CHAR    shift, and go to state 110
    STRING  shift, and go to state 111

    output  go to state 113


State 83

   55 simpleExpr: simpleExpr . IN negExpr
   70 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 208
    ')'  shift, and go to state 114


State 84

   40 exprStmt: expression ';' .

    error    reduce using rule 40 (exprStmt)
    TYPE     reduce using rule 40 (exprStmt)
    SETOP    reduce using rule 40 (exprStmt)
    ID       reduce using rule 40 (exprStmt)
    IF       reduce using rule 40 (exprStmt)
    FOR      reduce using rule 40 (exprStmt)
    RETURN   reduce using rule 40 (exprStmt)
    FORALL   reduce using rule 40 (exprStmt)
    IS_SET   reduce using rule 40 (exprStmt)
    EXISTS   reduce using rule 40 (exprStmt)
    NEG      reduce using rule 40 (exprStmt)
    READ     reduce using rule 40 (exprStmt)
    WRITE    reduce using rule 40 (exprStmt)
    WRITELN  reduce using rule 40 (exprStmt)
    INTEGER  reduce using rule 40 (exprStmt)
    FLOAT    reduce using rule 40 (exprStmt)
    EMPTY    reduce using rule 40 (exprStmt)
    ';'      reduce using rule 40 (exprStmt)
    '}'      reduce using rule 40 (exprStmt)
    '('      reduce using rule 40 (exprStmt)


State 85

   79 call: var '(' . params ')'

    SETOP    shift, and go to state 209
    ID       shift, and go to state 210
    IS_SET   shift, and go to state 211
    EXISTS   shift, and go to state 212
    NEG      shift, and go to state 213
    INTEGER  shift, and go to state 214
    FLOAT    shift, and go to state 215
    EMPTY    shift, and go to state 216
    '('      shift, and go to state 217

    ')'  reduce using rule 80 (params)

    var         go to state 218
    simpleExpr  go to state 115
    negExpr     go to state 219
    disjExpr    go to state 220
    conjExpr    go to state 221
    relExpr     go to state 222
    artExpr1    go to state 223
    artExpr2    go to state 224
    factor      go to state 225
    constant    go to state 226
    call        go to state 227
    params      go to state 116
    paramList   go to state 117


State 86

   47 assign: var '=' . simpleExpr

    SETOP    shift, and go to state 30
    ID       shift, and go to state 154
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var         go to state 78
    simpleExpr  go to state 118
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 87

   55 simpleExpr: simpleExpr IN . negExpr

    SETOP    shift, and go to state 30
    ID       shift, and go to state 154
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var       go to state 78
    negExpr   go to state 119
    disjExpr  go to state 62
    conjExpr  go to state 63
    relExpr   go to state 64
    artExpr1  go to state 65
    artExpr2  go to state 66
    factor    go to state 67
    constant  go to state 68
    call      go to state 69


State 88

   59 disjExpr: disjExpr DISJ . conjExpr

    SETOP    shift, and go to state 30
    ID       shift, and go to state 154
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var       go to state 78
    conjExpr  go to state 120
    relExpr   go to state 64
    artExpr1  go to state 65
    artExpr2  go to state 66
    factor    go to state 67
    constant  go to state 68
    call      go to state 69


State 89

   61 conjExpr: conjExpr CONJ . relExpr

    SETOP    shift, and go to state 30
    ID       shift, and go to state 154
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var       go to state 78
    relExpr   go to state 121
    artExpr1  go to state 65
    artExpr2  go to state 66
    factor    go to state 67
    constant  go to state 68
    call      go to state 69


State 90

   63 relExpr: relExpr RELOP . artExpr1

    SETOP    shift, and go to state 30
    ID       shift, and go to state 154
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var       go to state 78
    artExpr1  go to state 122
    artExpr2  go to state 66
    factor    go to state 67
    constant  go to state 68
    call      go to state 69


State 91

   65 artExpr1: artExpr1 ARTOP1 . artExpr2

    SETOP    shift, and go to state 30
    ID       shift, and go to state 154
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var       go to state 78
    artExpr2  go to state 123
    factor    go to state 67
    constant  go to state 68
    call      go to state 69


State 92

   67 artExpr2: artExpr2 ARTOP2 . factor

    SETOP    shift, and go to state 30
    ID       shift, and go to state 154
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var       go to state 78
    factor    go to state 124
    constant  go to state 68
    call      go to state 69


State 93

   55 simpleExpr: simpleExpr . IN negExpr
   75 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 208
    ')'  shift, and go to state 125


State 94

   38 cond: '(' error . ')'

    ')'  shift, and go to state 126


State 95

   37 cond: '(' expression . ')'

    ')'  shift, and go to state 127


State 96

   31 body: '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)

    funcBody  go to state 128


State 97

   33 body: varDecl .

    error    reduce using rule 33 (body)
    TYPE     reduce using rule 33 (body)
    SETOP    reduce using rule 33 (body)
    ID       reduce using rule 33 (body)
    IF       reduce using rule 33 (body)
    ELSE     reduce using rule 33 (body)
    FOR      reduce using rule 33 (body)
    RETURN   reduce using rule 33 (body)
    FORALL   reduce using rule 33 (body)
    IS_SET   reduce using rule 33 (body)
    EXISTS   reduce using rule 33 (body)
    NEG      reduce using rule 33 (body)
    READ     reduce using rule 33 (body)
    WRITE    reduce using rule 33 (body)
    WRITELN  reduce using rule 33 (body)
    INTEGER  reduce using rule 33 (body)
    FLOAT    reduce using rule 33 (body)
    EMPTY    reduce using rule 33 (body)
    ';'      reduce using rule 33 (body)
    '}'      reduce using rule 33 (body)
    '('      reduce using rule 33 (body)


State 98

   34 body: funcDecl .

    error    reduce using rule 34 (body)
    TYPE     reduce using rule 34 (body)
    SETOP    reduce using rule 34 (body)
    ID       reduce using rule 34 (body)
    IF       reduce using rule 34 (body)
    ELSE     reduce using rule 34 (body)
    FOR      reduce using rule 34 (body)
    RETURN   reduce using rule 34 (body)
    FORALL   reduce using rule 34 (body)
    IS_SET   reduce using rule 34 (body)
    EXISTS   reduce using rule 34 (body)
    NEG      reduce using rule 34 (body)
    READ     reduce using rule 34 (body)
    WRITE    reduce using rule 34 (body)
    WRITELN  reduce using rule 34 (body)
    INTEGER  reduce using rule 34 (body)
    FLOAT    reduce using rule 34 (body)
    EMPTY    reduce using rule 34 (body)
    ';'      reduce using rule 34 (body)
    '}'      reduce using rule 34 (body)
    '('      reduce using rule 34 (body)


State 99

   32 body: stmt .

    error    reduce using rule 32 (body)
    TYPE     reduce using rule 32 (body)
    SETOP    reduce using rule 32 (body)
    ID       reduce using rule 32 (body)
    IF       reduce using rule 32 (body)
    ELSE     reduce using rule 32 (body)
    FOR      reduce using rule 32 (body)
    RETURN   reduce using rule 32 (body)
    FORALL   reduce using rule 32 (body)
    IS_SET   reduce using rule 32 (body)
    EXISTS   reduce using rule 32 (body)
    NEG      reduce using rule 32 (body)
    READ     reduce using rule 32 (body)
    WRITE    reduce using rule 32 (body)
    WRITELN  reduce using rule 32 (body)
    INTEGER  reduce using rule 32 (body)
    FLOAT    reduce using rule 32 (body)
    EMPTY    reduce using rule 32 (body)
    ';'      reduce using rule 32 (body)
    '}'      reduce using rule 32 (body)
    '('      reduce using rule 32 (body)


State 100

   35 condStmt: IF cond body .
   36         | IF cond body . ELSE body

    ELSE  shift, and go to state 129

    error    reduce using rule 35 (condStmt)
    TYPE     reduce using rule 35 (condStmt)
    SETOP    reduce using rule 35 (condStmt)
    ID       reduce using rule 35 (condStmt)
    IF       reduce using rule 35 (condStmt)
    FOR      reduce using rule 35 (condStmt)
    RETURN   reduce using rule 35 (condStmt)
    FORALL   reduce using rule 35 (condStmt)
    IS_SET   reduce using rule 35 (condStmt)
    EXISTS   reduce using rule 35 (condStmt)
    NEG      reduce using rule 35 (condStmt)
    READ     reduce using rule 35 (condStmt)
    WRITE    reduce using rule 35 (condStmt)
    WRITELN  reduce using rule 35 (condStmt)
    INTEGER  reduce using rule 35 (condStmt)
    FLOAT    reduce using rule 35 (condStmt)
    EMPTY    reduce using rule 35 (condStmt)
    ';'      reduce using rule 35 (condStmt)
    '}'      reduce using rule 35 (condStmt)
    '('      reduce using rule 35 (condStmt)


State 101

   30 iterStmt: FOR '(' error . ')' body
   41 exprStmt: error .

    ')'  shift, and go to state 130

    error    reduce using rule 41 (exprStmt)
    SETOP    reduce using rule 41 (exprStmt)
    ID       reduce using rule 41 (exprStmt)
    IS_SET   reduce using rule 41 (exprStmt)
    EXISTS   reduce using rule 41 (exprStmt)
    NEG      reduce using rule 41 (exprStmt)
    READ     reduce using rule 41 (exprStmt)
    WRITE    reduce using rule 41 (exprStmt)
    WRITELN  reduce using rule 41 (exprStmt)
    INTEGER  reduce using rule 41 (exprStmt)
    FLOAT    reduce using rule 41 (exprStmt)
    EMPTY    reduce using rule 41 (exprStmt)
    ';'      reduce using rule 41 (exprStmt)
    '('      reduce using rule 41 (exprStmt)


State 102

   26 iterStmt: FOR '(' exprStmt . exprStmt ')' body
   27         | FOR '(' exprStmt . exprStmt expression ')' body

    error    shift, and go to state 228
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 229
    '('      shift, and go to state 47

    exprStmt    go to state 131
    expression  go to state 230
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 103

   29 iterStmt: FORALL '(' error . ')' body

    ')'  shift, and go to state 132


State 104

   28 iterStmt: FORALL '(' simpleExpr . ')' body
   55 simpleExpr: simpleExpr . IN negExpr

    IN   shift, and go to state 208
    ')'  shift, and go to state 133


State 105

   73 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 134


State 106

   55 simpleExpr: simpleExpr . IN negExpr
   74 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 208
    ')'  shift, and go to state 135


State 107

   48 var: ID .

    ')'  reduce using rule 48 (var)


State 108

   49 inExpr: READ '(' var . ')'

    ')'  shift, and go to state 136


State 109

   52 output: ID .

    ')'  reduce using rule 52 (output)


State 110

   53 output: CHAR .

    ')'  reduce using rule 53 (output)


State 111

   54 output: STRING .

    ')'  reduce using rule 54 (output)


State 112

   50 outExpr: WRITE '(' output . ')'

    ')'  shift, and go to state 137


State 113

   51 outExpr: WRITELN '(' output . ')'

    ')'  shift, and go to state 138


State 114

   70 factor: '(' simpleExpr ')' .

    RELOP   reduce using rule 70 (factor)
    ARTOP1  reduce using rule 70 (factor)
    ARTOP2  reduce using rule 70 (factor)
    IN      reduce using rule 70 (factor)
    DISJ    reduce using rule 70 (factor)
    CONJ    reduce using rule 70 (factor)
    ';'     reduce using rule 70 (factor)


State 115

   55 simpleExpr: simpleExpr . IN negExpr
   83 paramList: simpleExpr .

    IN  shift, and go to state 231

    ','  reduce using rule 83 (paramList)
    ')'  reduce using rule 83 (paramList)


State 116

   79 call: var '(' params . ')'

    ')'  shift, and go to state 139


State 117

   81 params: paramList .
   82 paramList: paramList . ',' simpleExpr

    ','  shift, and go to state 140

    ')'  reduce using rule 81 (params)


State 118

   47 assign: var '=' simpleExpr .
   55 simpleExpr: simpleExpr . IN negExpr

    IN  shift, and go to state 87

    ';'  reduce using rule 47 (assign)


State 119

   55 simpleExpr: simpleExpr IN negExpr .

    IN   reduce using rule 55 (simpleExpr)
    ';'  reduce using rule 55 (simpleExpr)


State 120

   59 disjExpr: disjExpr DISJ conjExpr .
   61 conjExpr: conjExpr . CONJ relExpr

    CONJ  shift, and go to state 89

    IN    reduce using rule 59 (disjExpr)
    DISJ  reduce using rule 59 (disjExpr)
    ';'   reduce using rule 59 (disjExpr)


State 121

   61 conjExpr: conjExpr CONJ relExpr .
   63 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 90

    IN    reduce using rule 61 (conjExpr)
    DISJ  reduce using rule 61 (conjExpr)
    CONJ  reduce using rule 61 (conjExpr)
    ';'   reduce using rule 61 (conjExpr)


State 122

   63 relExpr: relExpr RELOP artExpr1 .
   65 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 91

    RELOP  reduce using rule 63 (relExpr)
    IN     reduce using rule 63 (relExpr)
    DISJ   reduce using rule 63 (relExpr)
    CONJ   reduce using rule 63 (relExpr)
    ';'    reduce using rule 63 (relExpr)


State 123

   65 artExpr1: artExpr1 ARTOP1 artExpr2 .
   67 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 92

    RELOP   reduce using rule 65 (artExpr1)
    ARTOP1  reduce using rule 65 (artExpr1)
    IN      reduce using rule 65 (artExpr1)
    DISJ    reduce using rule 65 (artExpr1)
    CONJ    reduce using rule 65 (artExpr1)
    ';'     reduce using rule 65 (artExpr1)


State 124

   67 artExpr2: artExpr2 ARTOP2 factor .

    RELOP   reduce using rule 67 (artExpr2)
    ARTOP1  reduce using rule 67 (artExpr2)
    ARTOP2  reduce using rule 67 (artExpr2)
    IN      reduce using rule 67 (artExpr2)
    DISJ    reduce using rule 67 (artExpr2)
    CONJ    reduce using rule 67 (artExpr2)
    ';'     reduce using rule 67 (artExpr2)


State 125

   75 factor: SETOP '(' simpleExpr ')' .

    RELOP   reduce using rule 75 (factor)
    ARTOP1  reduce using rule 75 (factor)
    ARTOP2  reduce using rule 75 (factor)
    IN      reduce using rule 75 (factor)
    DISJ    reduce using rule 75 (factor)
    CONJ    reduce using rule 75 (factor)
    ';'     reduce using rule 75 (factor)


State 126

   38 cond: '(' error ')' .

    error    reduce using rule 38 (cond)
    TYPE     reduce using rule 38 (cond)
    SETOP    reduce using rule 38 (cond)
    ID       reduce using rule 38 (cond)
    IF       reduce using rule 38 (cond)
    FOR      reduce using rule 38 (cond)
    RETURN   reduce using rule 38 (cond)
    FORALL   reduce using rule 38 (cond)
    IS_SET   reduce using rule 38 (cond)
    EXISTS   reduce using rule 38 (cond)
    NEG      reduce using rule 38 (cond)
    READ     reduce using rule 38 (cond)
    WRITE    reduce using rule 38 (cond)
    WRITELN  reduce using rule 38 (cond)
    INTEGER  reduce using rule 38 (cond)
    FLOAT    reduce using rule 38 (cond)
    EMPTY    reduce using rule 38 (cond)
    ';'      reduce using rule 38 (cond)
    '{'      reduce using rule 38 (cond)
    '('      reduce using rule 38 (cond)


State 127

   37 cond: '(' expression ')' .

    error    reduce using rule 37 (cond)
    TYPE     reduce using rule 37 (cond)
    SETOP    reduce using rule 37 (cond)
    ID       reduce using rule 37 (cond)
    IF       reduce using rule 37 (cond)
    FOR      reduce using rule 37 (cond)
    RETURN   reduce using rule 37 (cond)
    FORALL   reduce using rule 37 (cond)
    IS_SET   reduce using rule 37 (cond)
    EXISTS   reduce using rule 37 (cond)
    NEG      reduce using rule 37 (cond)
    READ     reduce using rule 37 (cond)
    WRITE    reduce using rule 37 (cond)
    WRITELN  reduce using rule 37 (cond)
    INTEGER  reduce using rule 37 (cond)
    FLOAT    reduce using rule 37 (cond)
    EMPTY    reduce using rule 37 (cond)
    ';'      reduce using rule 37 (cond)
    '{'      reduce using rule 37 (cond)
    '('      reduce using rule 37 (cond)


State 128

   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt
   31 body: '{' funcBody . '}'

    error    shift, and go to state 29
    TYPE     shift, and go to state 153
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '}'      shift, and go to state 141
    '('      shift, and go to state 47

    varDecl     go to state 48
    funcDecl    go to state 49
    stmt        go to state 50
    iterStmt    go to state 51
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 129

   36 condStmt: IF cond body ELSE . body

    error    shift, and go to state 29
    TYPE     shift, and go to state 153
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '{'      shift, and go to state 232
    '('      shift, and go to state 47

    varDecl     go to state 233
    funcDecl    go to state 234
    stmt        go to state 235
    iterStmt    go to state 51
    body        go to state 142
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 130

   30 iterStmt: FOR '(' error ')' . body

    error    shift, and go to state 29
    TYPE     shift, and go to state 153
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '{'      shift, and go to state 232
    '('      shift, and go to state 47

    varDecl     go to state 233
    funcDecl    go to state 234
    stmt        go to state 235
    iterStmt    go to state 51
    body        go to state 143
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 131

   26 iterStmt: FOR '(' exprStmt exprStmt . ')' body
   27         | FOR '(' exprStmt exprStmt . expression ')' body

    SETOP    shift, and go to state 155
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    READ     shift, and go to state 175
    WRITE    shift, and go to state 176
    WRITELN  shift, and go to state 177
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163
    ')'      shift, and go to state 144

    expression  go to state 145
    assign      go to state 178
    var         go to state 179
    inExpr      go to state 180
    outExpr     go to state 181
    simpleExpr  go to state 182
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 132

   29 iterStmt: FORALL '(' error ')' . body

    error    shift, and go to state 29
    TYPE     shift, and go to state 153
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '{'      shift, and go to state 232
    '('      shift, and go to state 47

    varDecl     go to state 233
    funcDecl    go to state 234
    stmt        go to state 235
    iterStmt    go to state 51
    body        go to state 146
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 133

   28 iterStmt: FORALL '(' simpleExpr ')' . body

    error    shift, and go to state 29
    TYPE     shift, and go to state 153
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '{'      shift, and go to state 232
    '('      shift, and go to state 47

    varDecl     go to state 233
    funcDecl    go to state 234
    stmt        go to state 235
    iterStmt    go to state 51
    body        go to state 147
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 134

   73 factor: IS_SET '(' factor ')' .

    RELOP   reduce using rule 73 (factor)
    ARTOP1  reduce using rule 73 (factor)
    ARTOP2  reduce using rule 73 (factor)
    IN      reduce using rule 73 (factor)
    DISJ    reduce using rule 73 (factor)
    CONJ    reduce using rule 73 (factor)
    ';'     reduce using rule 73 (factor)


State 135

   74 factor: EXISTS '(' simpleExpr ')' .

    RELOP   reduce using rule 74 (factor)
    ARTOP1  reduce using rule 74 (factor)
    ARTOP2  reduce using rule 74 (factor)
    IN      reduce using rule 74 (factor)
    DISJ    reduce using rule 74 (factor)
    CONJ    reduce using rule 74 (factor)
    ';'     reduce using rule 74 (factor)


State 136

   49 inExpr: READ '(' var ')' .

    ';'  reduce using rule 49 (inExpr)


State 137

   50 outExpr: WRITE '(' output ')' .

    ';'  reduce using rule 50 (outExpr)


State 138

   51 outExpr: WRITELN '(' output ')' .

    ';'  reduce using rule 51 (outExpr)


State 139

   79 call: var '(' params ')' .

    RELOP   reduce using rule 79 (call)
    ARTOP1  reduce using rule 79 (call)
    ARTOP2  reduce using rule 79 (call)
    IN      reduce using rule 79 (call)
    DISJ    reduce using rule 79 (call)
    CONJ    reduce using rule 79 (call)
    ';'     reduce using rule 79 (call)


State 140

   82 paramList: paramList ',' . simpleExpr

    SETOP    shift, and go to state 209
    ID       shift, and go to state 210
    IS_SET   shift, and go to state 211
    EXISTS   shift, and go to state 212
    NEG      shift, and go to state 213
    INTEGER  shift, and go to state 214
    FLOAT    shift, and go to state 215
    EMPTY    shift, and go to state 216
    '('      shift, and go to state 217

    var         go to state 218
    simpleExpr  go to state 148
    negExpr     go to state 219
    disjExpr    go to state 220
    conjExpr    go to state 221
    relExpr     go to state 222
    artExpr1    go to state 223
    artExpr2    go to state 224
    factor      go to state 225
    constant    go to state 226
    call        go to state 227


State 141

   31 body: '{' funcBody '}' .

    error    reduce using rule 31 (body)
    TYPE     reduce using rule 31 (body)
    SETOP    reduce using rule 31 (body)
    ID       reduce using rule 31 (body)
    IF       reduce using rule 31 (body)
    ELSE     reduce using rule 31 (body)
    FOR      reduce using rule 31 (body)
    RETURN   reduce using rule 31 (body)
    FORALL   reduce using rule 31 (body)
    IS_SET   reduce using rule 31 (body)
    EXISTS   reduce using rule 31 (body)
    NEG      reduce using rule 31 (body)
    READ     reduce using rule 31 (body)
    WRITE    reduce using rule 31 (body)
    WRITELN  reduce using rule 31 (body)
    INTEGER  reduce using rule 31 (body)
    FLOAT    reduce using rule 31 (body)
    EMPTY    reduce using rule 31 (body)
    ';'      reduce using rule 31 (body)
    '}'      reduce using rule 31 (body)
    '('      reduce using rule 31 (body)


State 142

   36 condStmt: IF cond body ELSE body .

    error    reduce using rule 36 (condStmt)
    TYPE     reduce using rule 36 (condStmt)
    SETOP    reduce using rule 36 (condStmt)
    ID       reduce using rule 36 (condStmt)
    IF       reduce using rule 36 (condStmt)
    FOR      reduce using rule 36 (condStmt)
    RETURN   reduce using rule 36 (condStmt)
    FORALL   reduce using rule 36 (condStmt)
    IS_SET   reduce using rule 36 (condStmt)
    EXISTS   reduce using rule 36 (condStmt)
    NEG      reduce using rule 36 (condStmt)
    READ     reduce using rule 36 (condStmt)
    WRITE    reduce using rule 36 (condStmt)
    WRITELN  reduce using rule 36 (condStmt)
    INTEGER  reduce using rule 36 (condStmt)
    FLOAT    reduce using rule 36 (condStmt)
    EMPTY    reduce using rule 36 (condStmt)
    ';'      reduce using rule 36 (condStmt)
    '}'      reduce using rule 36 (condStmt)
    '('      reduce using rule 36 (condStmt)


State 143

   30 iterStmt: FOR '(' error ')' body .

    error    reduce using rule 30 (iterStmt)
    TYPE     reduce using rule 30 (iterStmt)
    SETOP    reduce using rule 30 (iterStmt)
    ID       reduce using rule 30 (iterStmt)
    IF       reduce using rule 30 (iterStmt)
    FOR      reduce using rule 30 (iterStmt)
    RETURN   reduce using rule 30 (iterStmt)
    FORALL   reduce using rule 30 (iterStmt)
    IS_SET   reduce using rule 30 (iterStmt)
    EXISTS   reduce using rule 30 (iterStmt)
    NEG      reduce using rule 30 (iterStmt)
    READ     reduce using rule 30 (iterStmt)
    WRITE    reduce using rule 30 (iterStmt)
    WRITELN  reduce using rule 30 (iterStmt)
    INTEGER  reduce using rule 30 (iterStmt)
    FLOAT    reduce using rule 30 (iterStmt)
    EMPTY    reduce using rule 30 (iterStmt)
    ';'      reduce using rule 30 (iterStmt)
    '}'      reduce using rule 30 (iterStmt)
    '('      reduce using rule 30 (iterStmt)


State 144

   26 iterStmt: FOR '(' exprStmt exprStmt ')' . body

    error    shift, and go to state 29
    TYPE     shift, and go to state 153
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '{'      shift, and go to state 232
    '('      shift, and go to state 47

    varDecl     go to state 233
    funcDecl    go to state 234
    stmt        go to state 235
    iterStmt    go to state 51
    body        go to state 149
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 145

   27 iterStmt: FOR '(' exprStmt exprStmt expression . ')' body

    ')'  shift, and go to state 150


State 146

   29 iterStmt: FORALL '(' error ')' body .

    error    reduce using rule 29 (iterStmt)
    TYPE     reduce using rule 29 (iterStmt)
    SETOP    reduce using rule 29 (iterStmt)
    ID       reduce using rule 29 (iterStmt)
    IF       reduce using rule 29 (iterStmt)
    FOR      reduce using rule 29 (iterStmt)
    RETURN   reduce using rule 29 (iterStmt)
    FORALL   reduce using rule 29 (iterStmt)
    IS_SET   reduce using rule 29 (iterStmt)
    EXISTS   reduce using rule 29 (iterStmt)
    NEG      reduce using rule 29 (iterStmt)
    READ     reduce using rule 29 (iterStmt)
    WRITE    reduce using rule 29 (iterStmt)
    WRITELN  reduce using rule 29 (iterStmt)
    INTEGER  reduce using rule 29 (iterStmt)
    FLOAT    reduce using rule 29 (iterStmt)
    EMPTY    reduce using rule 29 (iterStmt)
    ';'      reduce using rule 29 (iterStmt)
    '}'      reduce using rule 29 (iterStmt)
    '('      reduce using rule 29 (iterStmt)


State 147

   28 iterStmt: FORALL '(' simpleExpr ')' body .

    error    reduce using rule 28 (iterStmt)
    TYPE     reduce using rule 28 (iterStmt)
    SETOP    reduce using rule 28 (iterStmt)
    ID       reduce using rule 28 (iterStmt)
    IF       reduce using rule 28 (iterStmt)
    FOR      reduce using rule 28 (iterStmt)
    RETURN   reduce using rule 28 (iterStmt)
    FORALL   reduce using rule 28 (iterStmt)
    IS_SET   reduce using rule 28 (iterStmt)
    EXISTS   reduce using rule 28 (iterStmt)
    NEG      reduce using rule 28 (iterStmt)
    READ     reduce using rule 28 (iterStmt)
    WRITE    reduce using rule 28 (iterStmt)
    WRITELN  reduce using rule 28 (iterStmt)
    INTEGER  reduce using rule 28 (iterStmt)
    FLOAT    reduce using rule 28 (iterStmt)
    EMPTY    reduce using rule 28 (iterStmt)
    ';'      reduce using rule 28 (iterStmt)
    '}'      reduce using rule 28 (iterStmt)
    '('      reduce using rule 28 (iterStmt)


State 148

   55 simpleExpr: simpleExpr . IN negExpr
   82 paramList: paramList ',' simpleExpr .

    IN  shift, and go to state 231

    ','  reduce using rule 82 (paramList)
    ')'  reduce using rule 82 (paramList)


State 149

   26 iterStmt: FOR '(' exprStmt exprStmt ')' body .

    error    reduce using rule 26 (iterStmt)
    TYPE     reduce using rule 26 (iterStmt)
    SETOP    reduce using rule 26 (iterStmt)
    ID       reduce using rule 26 (iterStmt)
    IF       reduce using rule 26 (iterStmt)
    FOR      reduce using rule 26 (iterStmt)
    RETURN   reduce using rule 26 (iterStmt)
    FORALL   reduce using rule 26 (iterStmt)
    IS_SET   reduce using rule 26 (iterStmt)
    EXISTS   reduce using rule 26 (iterStmt)
    NEG      reduce using rule 26 (iterStmt)
    READ     reduce using rule 26 (iterStmt)
    WRITE    reduce using rule 26 (iterStmt)
    WRITELN  reduce using rule 26 (iterStmt)
    INTEGER  reduce using rule 26 (iterStmt)
    FLOAT    reduce using rule 26 (iterStmt)
    EMPTY    reduce using rule 26 (iterStmt)
    ';'      reduce using rule 26 (iterStmt)
    '}'      reduce using rule 26 (iterStmt)
    '('      reduce using rule 26 (iterStmt)


State 150

   27 iterStmt: FOR '(' exprStmt exprStmt expression ')' . body

    error    shift, and go to state 29
    TYPE     shift, and go to state 153
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '{'      shift, and go to state 232
    '('      shift, and go to state 47

    varDecl     go to state 233
    funcDecl    go to state 234
    stmt        go to state 235
    iterStmt    go to state 51
    body        go to state 151
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 151

   27 iterStmt: FOR '(' exprStmt exprStmt expression ')' body .

    error    reduce using rule 27 (iterStmt)
    TYPE     reduce using rule 27 (iterStmt)
    SETOP    reduce using rule 27 (iterStmt)
    ID       reduce using rule 27 (iterStmt)
    IF       reduce using rule 27 (iterStmt)
    FOR      reduce using rule 27 (iterStmt)
    RETURN   reduce using rule 27 (iterStmt)
    FORALL   reduce using rule 27 (iterStmt)
    IS_SET   reduce using rule 27 (iterStmt)
    EXISTS   reduce using rule 27 (iterStmt)
    NEG      reduce using rule 27 (iterStmt)
    READ     reduce using rule 27 (iterStmt)
    WRITE    reduce using rule 27 (iterStmt)
    WRITELN  reduce using rule 27 (iterStmt)
    INTEGER  reduce using rule 27 (iterStmt)
    FLOAT    reduce using rule 27 (iterStmt)
    EMPTY    reduce using rule 27 (iterStmt)
    ';'      reduce using rule 27 (iterStmt)
    '}'      reduce using rule 27 (iterStmt)
    '('      reduce using rule 27 (iterStmt)


State 152

   10 new_id: ID .

    ';'  reduce using rule 10 (new_id)
    ','  reduce using rule 10 (new_id)


State 153

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error
   11 funcDecl: TYPE . new_id arguments '{' funcBody '}'

    error  shift, and go to state 236
    ID     shift, and go to state 9

    varList  go to state 237
    new_id   go to state 238


State 154

   48 var: ID .
   69 factor: ID .

    RELOP   reduce using rule 69 (factor)
    ARTOP1  reduce using rule 69 (factor)
    ARTOP2  reduce using rule 69 (factor)
    IN      reduce using rule 69 (factor)
    DISJ    reduce using rule 69 (factor)
    CONJ    reduce using rule 69 (factor)
    ';'     reduce using rule 69 (factor)
    '('     reduce using rule 48 (var)


State 155

   75 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 239


State 156

   48 var: ID .
   69 factor: ID .

    RELOP   reduce using rule 69 (factor)
    ARTOP1  reduce using rule 69 (factor)
    ARTOP2  reduce using rule 69 (factor)
    IN      reduce using rule 69 (factor)
    DISJ    reduce using rule 69 (factor)
    CONJ    reduce using rule 69 (factor)
    '('     reduce using rule 48 (var)
    ')'     reduce using rule 69 (factor)


State 157

   73 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 240


State 158

   74 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 241


State 159

   57 negExpr: NEG . negExpr

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var       go to state 164
    negExpr   go to state 242
    disjExpr  go to state 166
    conjExpr  go to state 167
    relExpr   go to state 168
    artExpr1  go to state 169
    artExpr2  go to state 170
    factor    go to state 171
    constant  go to state 172
    call      go to state 173


State 160

   76 constant: INTEGER .

    RELOP   reduce using rule 76 (constant)
    ARTOP1  reduce using rule 76 (constant)
    ARTOP2  reduce using rule 76 (constant)
    IN      reduce using rule 76 (constant)
    DISJ    reduce using rule 76 (constant)
    CONJ    reduce using rule 76 (constant)
    ')'     reduce using rule 76 (constant)


State 161

   77 constant: FLOAT .

    RELOP   reduce using rule 77 (constant)
    ARTOP1  reduce using rule 77 (constant)
    ARTOP2  reduce using rule 77 (constant)
    IN      reduce using rule 77 (constant)
    DISJ    reduce using rule 77 (constant)
    CONJ    reduce using rule 77 (constant)
    ')'     reduce using rule 77 (constant)


State 162

   78 constant: EMPTY .

    RELOP   reduce using rule 78 (constant)
    ARTOP1  reduce using rule 78 (constant)
    ARTOP2  reduce using rule 78 (constant)
    IN      reduce using rule 78 (constant)
    DISJ    reduce using rule 78 (constant)
    CONJ    reduce using rule 78 (constant)
    ')'     reduce using rule 78 (constant)


State 163

   70 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 243
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 164

   79 call: var . '(' params ')'

    '('  shift, and go to state 244


State 165

   56 simpleExpr: negExpr .

    IN   reduce using rule 56 (simpleExpr)
    ')'  reduce using rule 56 (simpleExpr)


State 166

   58 negExpr: disjExpr .
   59 disjExpr: disjExpr . DISJ conjExpr

    DISJ  shift, and go to state 245

    IN   reduce using rule 58 (negExpr)
    ')'  reduce using rule 58 (negExpr)


State 167

   60 disjExpr: conjExpr .
   61 conjExpr: conjExpr . CONJ relExpr

    CONJ  shift, and go to state 246

    IN    reduce using rule 60 (disjExpr)
    DISJ  reduce using rule 60 (disjExpr)
    ')'   reduce using rule 60 (disjExpr)


State 168

   62 conjExpr: relExpr .
   63 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 247

    IN    reduce using rule 62 (conjExpr)
    DISJ  reduce using rule 62 (conjExpr)
    CONJ  reduce using rule 62 (conjExpr)
    ')'   reduce using rule 62 (conjExpr)


State 169

   64 relExpr: artExpr1 .
   65 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 248

    RELOP  reduce using rule 64 (relExpr)
    IN     reduce using rule 64 (relExpr)
    DISJ   reduce using rule 64 (relExpr)
    CONJ   reduce using rule 64 (relExpr)
    ')'    reduce using rule 64 (relExpr)


State 170

   66 artExpr1: artExpr2 .
   67 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 249

    RELOP   reduce using rule 66 (artExpr1)
    ARTOP1  reduce using rule 66 (artExpr1)
    IN      reduce using rule 66 (artExpr1)
    DISJ    reduce using rule 66 (artExpr1)
    CONJ    reduce using rule 66 (artExpr1)
    ')'     reduce using rule 66 (artExpr1)


State 171

   68 artExpr2: factor .

    RELOP   reduce using rule 68 (artExpr2)
    ARTOP1  reduce using rule 68 (artExpr2)
    ARTOP2  reduce using rule 68 (artExpr2)
    IN      reduce using rule 68 (artExpr2)
    DISJ    reduce using rule 68 (artExpr2)
    CONJ    reduce using rule 68 (artExpr2)
    ')'     reduce using rule 68 (artExpr2)


State 172

   71 factor: constant .

    RELOP   reduce using rule 71 (factor)
    ARTOP1  reduce using rule 71 (factor)
    ARTOP2  reduce using rule 71 (factor)
    IN      reduce using rule 71 (factor)
    DISJ    reduce using rule 71 (factor)
    CONJ    reduce using rule 71 (factor)
    ')'     reduce using rule 71 (factor)


State 173

   72 factor: call .

    RELOP   reduce using rule 72 (factor)
    ARTOP1  reduce using rule 72 (factor)
    ARTOP2  reduce using rule 72 (factor)
    IN      reduce using rule 72 (factor)
    DISJ    reduce using rule 72 (factor)
    CONJ    reduce using rule 72 (factor)
    ')'     reduce using rule 72 (factor)


State 174

   48 var: ID .
   69 factor: ID .

    RELOP   reduce using rule 69 (factor)
    ARTOP1  reduce using rule 69 (factor)
    ARTOP2  reduce using rule 69 (factor)
    IN      reduce using rule 69 (factor)
    DISJ    reduce using rule 69 (factor)
    CONJ    reduce using rule 69 (factor)
    '('     reduce using rule 48 (var)
    ')'     reduce using rule 69 (factor)
    '='     reduce using rule 48 (var)


State 175

   49 inExpr: READ . '(' var ')'

    '('  shift, and go to state 250


State 176

   50 outExpr: WRITE . '(' output ')'

    '('  shift, and go to state 251


State 177

   51 outExpr: WRITELN . '(' output ')'

    '('  shift, and go to state 252


State 178

   43 expression: assign .

    ')'  reduce using rule 43 (expression)


State 179

   47 assign: var . '=' simpleExpr
   79 call: var . '(' params ')'

    '('  shift, and go to state 244
    '='  shift, and go to state 253


State 180

   44 expression: inExpr .

    ')'  reduce using rule 44 (expression)


State 181

   45 expression: outExpr .

    ')'  reduce using rule 45 (expression)


State 182

   46 expression: simpleExpr .
   55 simpleExpr: simpleExpr . IN negExpr

    IN  shift, and go to state 208

    ')'  reduce using rule 46 (expression)


State 183

   41 exprStmt: error .

    error    reduce using rule 41 (exprStmt)
    TYPE     reduce using rule 41 (exprStmt)
    SETOP    reduce using rule 41 (exprStmt)
    ID       reduce using rule 41 (exprStmt)
    IF       reduce using rule 41 (exprStmt)
    ELSE     reduce using rule 41 (exprStmt)
    FOR      reduce using rule 41 (exprStmt)
    RETURN   reduce using rule 41 (exprStmt)
    FORALL   reduce using rule 41 (exprStmt)
    IS_SET   reduce using rule 41 (exprStmt)
    EXISTS   reduce using rule 41 (exprStmt)
    NEG      reduce using rule 41 (exprStmt)
    READ     reduce using rule 41 (exprStmt)
    WRITE    reduce using rule 41 (exprStmt)
    WRITELN  reduce using rule 41 (exprStmt)
    INTEGER  reduce using rule 41 (exprStmt)
    FLOAT    reduce using rule 41 (exprStmt)
    EMPTY    reduce using rule 41 (exprStmt)
    ';'      reduce using rule 41 (exprStmt)
    '}'      reduce using rule 41 (exprStmt)
    '('      reduce using rule 41 (exprStmt)


State 184

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error
   11 funcDecl: TYPE . new_id arguments '{' funcBody '}'

    error  shift, and go to state 254
    ID     shift, and go to state 9

    varList  go to state 255
    new_id   go to state 256


State 185

   35 condStmt: IF . cond body
   36         | IF . cond body ELSE body

    '('  shift, and go to state 71

    cond  go to state 257


State 186

   26 iterStmt: FOR . '(' exprStmt exprStmt ')' body
   27         | FOR . '(' exprStmt exprStmt expression ')' body
   30         | FOR . '(' error ')' body

    '('  shift, and go to state 258


State 187

   39 returnStmt: RETURN . exprStmt

    error    shift, and go to state 183
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 189
    '('      shift, and go to state 47

    exprStmt    go to state 259
    expression  go to state 194
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 188

   28 iterStmt: FORALL . '(' simpleExpr ')' body
   29         | FORALL . '(' error ')' body

    '('  shift, and go to state 260


State 189

   42 exprStmt: ';' .

    error    reduce using rule 42 (exprStmt)
    TYPE     reduce using rule 42 (exprStmt)
    SETOP    reduce using rule 42 (exprStmt)
    ID       reduce using rule 42 (exprStmt)
    IF       reduce using rule 42 (exprStmt)
    ELSE     reduce using rule 42 (exprStmt)
    FOR      reduce using rule 42 (exprStmt)
    RETURN   reduce using rule 42 (exprStmt)
    FORALL   reduce using rule 42 (exprStmt)
    IS_SET   reduce using rule 42 (exprStmt)
    EXISTS   reduce using rule 42 (exprStmt)
    NEG      reduce using rule 42 (exprStmt)
    READ     reduce using rule 42 (exprStmt)
    WRITE    reduce using rule 42 (exprStmt)
    WRITELN  reduce using rule 42 (exprStmt)
    INTEGER  reduce using rule 42 (exprStmt)
    FLOAT    reduce using rule 42 (exprStmt)
    EMPTY    reduce using rule 42 (exprStmt)
    ';'      reduce using rule 42 (exprStmt)
    '}'      reduce using rule 42 (exprStmt)
    '('      reduce using rule 42 (exprStmt)


State 190

   24 stmt: iterStmt .

    error    reduce using rule 24 (stmt)
    TYPE     reduce using rule 24 (stmt)
    SETOP    reduce using rule 24 (stmt)
    ID       reduce using rule 24 (stmt)
    IF       reduce using rule 24 (stmt)
    ELSE     reduce using rule 24 (stmt)
    FOR      reduce using rule 24 (stmt)
    RETURN   reduce using rule 24 (stmt)
    FORALL   reduce using rule 24 (stmt)
    IS_SET   reduce using rule 24 (stmt)
    EXISTS   reduce using rule 24 (stmt)
    NEG      reduce using rule 24 (stmt)
    READ     reduce using rule 24 (stmt)
    WRITE    reduce using rule 24 (stmt)
    WRITELN  reduce using rule 24 (stmt)
    INTEGER  reduce using rule 24 (stmt)
    FLOAT    reduce using rule 24 (stmt)
    EMPTY    reduce using rule 24 (stmt)
    ';'      reduce using rule 24 (stmt)
    '}'      reduce using rule 24 (stmt)
    '('      reduce using rule 24 (stmt)


State 191

   25 stmt: condStmt .

    error    reduce using rule 25 (stmt)
    TYPE     reduce using rule 25 (stmt)
    SETOP    reduce using rule 25 (stmt)
    ID       reduce using rule 25 (stmt)
    IF       reduce using rule 25 (stmt)
    ELSE     reduce using rule 25 (stmt)
    FOR      reduce using rule 25 (stmt)
    RETURN   reduce using rule 25 (stmt)
    FORALL   reduce using rule 25 (stmt)
    IS_SET   reduce using rule 25 (stmt)
    EXISTS   reduce using rule 25 (stmt)
    NEG      reduce using rule 25 (stmt)
    READ     reduce using rule 25 (stmt)
    WRITE    reduce using rule 25 (stmt)
    WRITELN  reduce using rule 25 (stmt)
    INTEGER  reduce using rule 25 (stmt)
    FLOAT    reduce using rule 25 (stmt)
    EMPTY    reduce using rule 25 (stmt)
    ';'      reduce using rule 25 (stmt)
    '}'      reduce using rule 25 (stmt)
    '('      reduce using rule 25 (stmt)


State 192

   23 stmt: returnStmt .

    error    reduce using rule 23 (stmt)
    TYPE     reduce using rule 23 (stmt)
    SETOP    reduce using rule 23 (stmt)
    ID       reduce using rule 23 (stmt)
    IF       reduce using rule 23 (stmt)
    ELSE     reduce using rule 23 (stmt)
    FOR      reduce using rule 23 (stmt)
    RETURN   reduce using rule 23 (stmt)
    FORALL   reduce using rule 23 (stmt)
    IS_SET   reduce using rule 23 (stmt)
    EXISTS   reduce using rule 23 (stmt)
    NEG      reduce using rule 23 (stmt)
    READ     reduce using rule 23 (stmt)
    WRITE    reduce using rule 23 (stmt)
    WRITELN  reduce using rule 23 (stmt)
    INTEGER  reduce using rule 23 (stmt)
    FLOAT    reduce using rule 23 (stmt)
    EMPTY    reduce using rule 23 (stmt)
    ';'      reduce using rule 23 (stmt)
    '}'      reduce using rule 23 (stmt)
    '('      reduce using rule 23 (stmt)


State 193

   22 stmt: exprStmt .

    error    reduce using rule 22 (stmt)
    TYPE     reduce using rule 22 (stmt)
    SETOP    reduce using rule 22 (stmt)
    ID       reduce using rule 22 (stmt)
    IF       reduce using rule 22 (stmt)
    ELSE     reduce using rule 22 (stmt)
    FOR      reduce using rule 22 (stmt)
    RETURN   reduce using rule 22 (stmt)
    FORALL   reduce using rule 22 (stmt)
    IS_SET   reduce using rule 22 (stmt)
    EXISTS   reduce using rule 22 (stmt)
    NEG      reduce using rule 22 (stmt)
    READ     reduce using rule 22 (stmt)
    WRITE    reduce using rule 22 (stmt)
    WRITELN  reduce using rule 22 (stmt)
    INTEGER  reduce using rule 22 (stmt)
    FLOAT    reduce using rule 22 (stmt)
    EMPTY    reduce using rule 22 (stmt)
    ';'      reduce using rule 22 (stmt)
    '}'      reduce using rule 22 (stmt)
    '('      reduce using rule 22 (stmt)


State 194

   40 exprStmt: expression . ';'

    ';'  shift, and go to state 261


State 195

   42 exprStmt: ';' .

    error    reduce using rule 42 (exprStmt)
    SETOP    reduce using rule 42 (exprStmt)
    ID       reduce using rule 42 (exprStmt)
    IS_SET   reduce using rule 42 (exprStmt)
    EXISTS   reduce using rule 42 (exprStmt)
    NEG      reduce using rule 42 (exprStmt)
    READ     reduce using rule 42 (exprStmt)
    WRITE    reduce using rule 42 (exprStmt)
    WRITELN  reduce using rule 42 (exprStmt)
    INTEGER  reduce using rule 42 (exprStmt)
    FLOAT    reduce using rule 42 (exprStmt)
    EMPTY    reduce using rule 42 (exprStmt)
    ';'      reduce using rule 42 (exprStmt)
    '('      reduce using rule 42 (exprStmt)


State 196

   40 exprStmt: expression . ';'

    ';'  shift, and go to state 262


State 197

   75 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 263


State 198

   48 var: ID .
   69 factor: ID .

    '('  reduce using rule 48 (var)
    ')'  reduce using rule 69 (factor)


State 199

   73 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 264


State 200

   74 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 265


State 201

   76 constant: INTEGER .

    ')'  reduce using rule 76 (constant)


State 202

   77 constant: FLOAT .

    ')'  reduce using rule 77 (constant)


State 203

   78 constant: EMPTY .

    ')'  reduce using rule 78 (constant)


State 204

   70 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 266
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 205

   79 call: var . '(' params ')'

    '('  shift, and go to state 267


State 206

   71 factor: constant .

    ')'  reduce using rule 71 (factor)


State 207

   72 factor: call .

    ')'  reduce using rule 72 (factor)


State 208

   55 simpleExpr: simpleExpr IN . negExpr

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var       go to state 164
    negExpr   go to state 268
    disjExpr  go to state 166
    conjExpr  go to state 167
    relExpr   go to state 168
    artExpr1  go to state 169
    artExpr2  go to state 170
    factor    go to state 171
    constant  go to state 172
    call      go to state 173


State 209

   75 factor: SETOP . '(' simpleExpr ')'

    '('  shift, and go to state 269


State 210

   48 var: ID .
   69 factor: ID .

    RELOP   reduce using rule 69 (factor)
    ARTOP1  reduce using rule 69 (factor)
    ARTOP2  reduce using rule 69 (factor)
    IN      reduce using rule 69 (factor)
    DISJ    reduce using rule 69 (factor)
    CONJ    reduce using rule 69 (factor)
    ','     reduce using rule 69 (factor)
    '('     reduce using rule 48 (var)
    ')'     reduce using rule 69 (factor)


State 211

   73 factor: IS_SET . '(' factor ')'

    '('  shift, and go to state 270


State 212

   74 factor: EXISTS . '(' simpleExpr ')'

    '('  shift, and go to state 271


State 213

   57 negExpr: NEG . negExpr

    SETOP    shift, and go to state 209
    ID       shift, and go to state 210
    IS_SET   shift, and go to state 211
    EXISTS   shift, and go to state 212
    NEG      shift, and go to state 213
    INTEGER  shift, and go to state 214
    FLOAT    shift, and go to state 215
    EMPTY    shift, and go to state 216
    '('      shift, and go to state 217

    var       go to state 218
    negExpr   go to state 272
    disjExpr  go to state 220
    conjExpr  go to state 221
    relExpr   go to state 222
    artExpr1  go to state 223
    artExpr2  go to state 224
    factor    go to state 225
    constant  go to state 226
    call      go to state 227


State 214

   76 constant: INTEGER .

    RELOP   reduce using rule 76 (constant)
    ARTOP1  reduce using rule 76 (constant)
    ARTOP2  reduce using rule 76 (constant)
    IN      reduce using rule 76 (constant)
    DISJ    reduce using rule 76 (constant)
    CONJ    reduce using rule 76 (constant)
    ','     reduce using rule 76 (constant)
    ')'     reduce using rule 76 (constant)


State 215

   77 constant: FLOAT .

    RELOP   reduce using rule 77 (constant)
    ARTOP1  reduce using rule 77 (constant)
    ARTOP2  reduce using rule 77 (constant)
    IN      reduce using rule 77 (constant)
    DISJ    reduce using rule 77 (constant)
    CONJ    reduce using rule 77 (constant)
    ','     reduce using rule 77 (constant)
    ')'     reduce using rule 77 (constant)


State 216

   78 constant: EMPTY .

    RELOP   reduce using rule 78 (constant)
    ARTOP1  reduce using rule 78 (constant)
    ARTOP2  reduce using rule 78 (constant)
    IN      reduce using rule 78 (constant)
    DISJ    reduce using rule 78 (constant)
    CONJ    reduce using rule 78 (constant)
    ','     reduce using rule 78 (constant)
    ')'     reduce using rule 78 (constant)


State 217

   70 factor: '(' . simpleExpr ')'

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 273
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 218

   79 call: var . '(' params ')'

    '('  shift, and go to state 274


State 219

   56 simpleExpr: negExpr .

    IN   reduce using rule 56 (simpleExpr)
    ','  reduce using rule 56 (simpleExpr)
    ')'  reduce using rule 56 (simpleExpr)


State 220

   58 negExpr: disjExpr .
   59 disjExpr: disjExpr . DISJ conjExpr

    DISJ  shift, and go to state 275

    IN   reduce using rule 58 (negExpr)
    ','  reduce using rule 58 (negExpr)
    ')'  reduce using rule 58 (negExpr)


State 221

   60 disjExpr: conjExpr .
   61 conjExpr: conjExpr . CONJ relExpr

    CONJ  shift, and go to state 276

    IN    reduce using rule 60 (disjExpr)
    DISJ  reduce using rule 60 (disjExpr)
    ','   reduce using rule 60 (disjExpr)
    ')'   reduce using rule 60 (disjExpr)


State 222

   62 conjExpr: relExpr .
   63 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 277

    IN    reduce using rule 62 (conjExpr)
    DISJ  reduce using rule 62 (conjExpr)
    CONJ  reduce using rule 62 (conjExpr)
    ','   reduce using rule 62 (conjExpr)
    ')'   reduce using rule 62 (conjExpr)


State 223

   64 relExpr: artExpr1 .
   65 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 278

    RELOP  reduce using rule 64 (relExpr)
    IN     reduce using rule 64 (relExpr)
    DISJ   reduce using rule 64 (relExpr)
    CONJ   reduce using rule 64 (relExpr)
    ','    reduce using rule 64 (relExpr)
    ')'    reduce using rule 64 (relExpr)


State 224

   66 artExpr1: artExpr2 .
   67 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 279

    RELOP   reduce using rule 66 (artExpr1)
    ARTOP1  reduce using rule 66 (artExpr1)
    IN      reduce using rule 66 (artExpr1)
    DISJ    reduce using rule 66 (artExpr1)
    CONJ    reduce using rule 66 (artExpr1)
    ','     reduce using rule 66 (artExpr1)
    ')'     reduce using rule 66 (artExpr1)


State 225

   68 artExpr2: factor .

    RELOP   reduce using rule 68 (artExpr2)
    ARTOP1  reduce using rule 68 (artExpr2)
    ARTOP2  reduce using rule 68 (artExpr2)
    IN      reduce using rule 68 (artExpr2)
    DISJ    reduce using rule 68 (artExpr2)
    CONJ    reduce using rule 68 (artExpr2)
    ','     reduce using rule 68 (artExpr2)
    ')'     reduce using rule 68 (artExpr2)


State 226

   71 factor: constant .

    RELOP   reduce using rule 71 (factor)
    ARTOP1  reduce using rule 71 (factor)
    ARTOP2  reduce using rule 71 (factor)
    IN      reduce using rule 71 (factor)
    DISJ    reduce using rule 71 (factor)
    CONJ    reduce using rule 71 (factor)
    ','     reduce using rule 71 (factor)
    ')'     reduce using rule 71 (factor)


State 227

   72 factor: call .

    RELOP   reduce using rule 72 (factor)
    ARTOP1  reduce using rule 72 (factor)
    ARTOP2  reduce using rule 72 (factor)
    IN      reduce using rule 72 (factor)
    DISJ    reduce using rule 72 (factor)
    CONJ    reduce using rule 72 (factor)
    ','     reduce using rule 72 (factor)
    ')'     reduce using rule 72 (factor)


State 228

   41 exprStmt: error .

    SETOP    reduce using rule 41 (exprStmt)
    ID       reduce using rule 41 (exprStmt)
    IS_SET   reduce using rule 41 (exprStmt)
    EXISTS   reduce using rule 41 (exprStmt)
    NEG      reduce using rule 41 (exprStmt)
    READ     reduce using rule 41 (exprStmt)
    WRITE    reduce using rule 41 (exprStmt)
    WRITELN  reduce using rule 41 (exprStmt)
    INTEGER  reduce using rule 41 (exprStmt)
    FLOAT    reduce using rule 41 (exprStmt)
    EMPTY    reduce using rule 41 (exprStmt)
    '('      reduce using rule 41 (exprStmt)
    ')'      reduce using rule 41 (exprStmt)


State 229

   42 exprStmt: ';' .

    SETOP    reduce using rule 42 (exprStmt)
    ID       reduce using rule 42 (exprStmt)
    IS_SET   reduce using rule 42 (exprStmt)
    EXISTS   reduce using rule 42 (exprStmt)
    NEG      reduce using rule 42 (exprStmt)
    READ     reduce using rule 42 (exprStmt)
    WRITE    reduce using rule 42 (exprStmt)
    WRITELN  reduce using rule 42 (exprStmt)
    INTEGER  reduce using rule 42 (exprStmt)
    FLOAT    reduce using rule 42 (exprStmt)
    EMPTY    reduce using rule 42 (exprStmt)
    '('      reduce using rule 42 (exprStmt)
    ')'      reduce using rule 42 (exprStmt)


State 230

   40 exprStmt: expression . ';'

    ';'  shift, and go to state 280


State 231

   55 simpleExpr: simpleExpr IN . negExpr

    SETOP    shift, and go to state 209
    ID       shift, and go to state 210
    IS_SET   shift, and go to state 211
    EXISTS   shift, and go to state 212
    NEG      shift, and go to state 213
    INTEGER  shift, and go to state 214
    FLOAT    shift, and go to state 215
    EMPTY    shift, and go to state 216
    '('      shift, and go to state 217

    var       go to state 218
    negExpr   go to state 281
    disjExpr  go to state 220
    conjExpr  go to state 221
    relExpr   go to state 222
    artExpr1  go to state 223
    artExpr2  go to state 224
    factor    go to state 225
    constant  go to state 226
    call      go to state 227


State 232

   31 body: '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)

    funcBody  go to state 282


State 233

   33 body: varDecl .

    error    reduce using rule 33 (body)
    TYPE     reduce using rule 33 (body)
    SETOP    reduce using rule 33 (body)
    ID       reduce using rule 33 (body)
    IF       reduce using rule 33 (body)
    FOR      reduce using rule 33 (body)
    RETURN   reduce using rule 33 (body)
    FORALL   reduce using rule 33 (body)
    IS_SET   reduce using rule 33 (body)
    EXISTS   reduce using rule 33 (body)
    NEG      reduce using rule 33 (body)
    READ     reduce using rule 33 (body)
    WRITE    reduce using rule 33 (body)
    WRITELN  reduce using rule 33 (body)
    INTEGER  reduce using rule 33 (body)
    FLOAT    reduce using rule 33 (body)
    EMPTY    reduce using rule 33 (body)
    ';'      reduce using rule 33 (body)
    '}'      reduce using rule 33 (body)
    '('      reduce using rule 33 (body)


State 234

   34 body: funcDecl .

    error    reduce using rule 34 (body)
    TYPE     reduce using rule 34 (body)
    SETOP    reduce using rule 34 (body)
    ID       reduce using rule 34 (body)
    IF       reduce using rule 34 (body)
    FOR      reduce using rule 34 (body)
    RETURN   reduce using rule 34 (body)
    FORALL   reduce using rule 34 (body)
    IS_SET   reduce using rule 34 (body)
    EXISTS   reduce using rule 34 (body)
    NEG      reduce using rule 34 (body)
    READ     reduce using rule 34 (body)
    WRITE    reduce using rule 34 (body)
    WRITELN  reduce using rule 34 (body)
    INTEGER  reduce using rule 34 (body)
    FLOAT    reduce using rule 34 (body)
    EMPTY    reduce using rule 34 (body)
    ';'      reduce using rule 34 (body)
    '}'      reduce using rule 34 (body)
    '('      reduce using rule 34 (body)


State 235

   32 body: stmt .

    error    reduce using rule 32 (body)
    TYPE     reduce using rule 32 (body)
    SETOP    reduce using rule 32 (body)
    ID       reduce using rule 32 (body)
    IF       reduce using rule 32 (body)
    FOR      reduce using rule 32 (body)
    RETURN   reduce using rule 32 (body)
    FORALL   reduce using rule 32 (body)
    IS_SET   reduce using rule 32 (body)
    EXISTS   reduce using rule 32 (body)
    NEG      reduce using rule 32 (body)
    READ     reduce using rule 32 (body)
    WRITE    reduce using rule 32 (body)
    WRITELN  reduce using rule 32 (body)
    INTEGER  reduce using rule 32 (body)
    FLOAT    reduce using rule 32 (body)
    EMPTY    reduce using rule 32 (body)
    ';'      reduce using rule 32 (body)
    '}'      reduce using rule 32 (body)
    '('      reduce using rule 32 (body)


State 236

    7 varDecl: TYPE error .

    error    reduce using rule 7 (varDecl)
    TYPE     reduce using rule 7 (varDecl)
    SETOP    reduce using rule 7 (varDecl)
    ID       reduce using rule 7 (varDecl)
    IF       reduce using rule 7 (varDecl)
    FOR      reduce using rule 7 (varDecl)
    RETURN   reduce using rule 7 (varDecl)
    FORALL   reduce using rule 7 (varDecl)
    IS_SET   reduce using rule 7 (varDecl)
    EXISTS   reduce using rule 7 (varDecl)
    NEG      reduce using rule 7 (varDecl)
    READ     reduce using rule 7 (varDecl)
    WRITE    reduce using rule 7 (varDecl)
    WRITELN  reduce using rule 7 (varDecl)
    INTEGER  reduce using rule 7 (varDecl)
    FLOAT    reduce using rule 7 (varDecl)
    EMPTY    reduce using rule 7 (varDecl)
    ';'      reduce using rule 7 (varDecl)
    '}'      reduce using rule 7 (varDecl)
    '('      reduce using rule 7 (varDecl)


State 237

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 283
    ','  shift, and go to state 13


State 238

    9 varList: new_id .
   11 funcDecl: TYPE new_id . arguments '{' funcBody '}'

    '('  shift, and go to state 14

    ';'  reduce using rule 9 (varList)
    ','  reduce using rule 9 (varList)

    arguments  go to state 284


State 239

   75 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 285
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 240

   73 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 197
    ID       shift, and go to state 198
    IS_SET   shift, and go to state 199
    EXISTS   shift, and go to state 200
    INTEGER  shift, and go to state 201
    FLOAT    shift, and go to state 202
    EMPTY    shift, and go to state 203
    '('      shift, and go to state 204

    var       go to state 205
    factor    go to state 286
    constant  go to state 206
    call      go to state 207


State 241

   74 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 287
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 242

   57 negExpr: NEG negExpr .

    IN   reduce using rule 57 (negExpr)
    ')'  reduce using rule 57 (negExpr)


State 243

   55 simpleExpr: simpleExpr . IN negExpr
   70 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 208
    ')'  shift, and go to state 288


State 244

   79 call: var '(' . params ')'

    SETOP    shift, and go to state 209
    ID       shift, and go to state 210
    IS_SET   shift, and go to state 211
    EXISTS   shift, and go to state 212
    NEG      shift, and go to state 213
    INTEGER  shift, and go to state 214
    FLOAT    shift, and go to state 215
    EMPTY    shift, and go to state 216
    '('      shift, and go to state 217

    ')'  reduce using rule 80 (params)

    var         go to state 218
    simpleExpr  go to state 115
    negExpr     go to state 219
    disjExpr    go to state 220
    conjExpr    go to state 221
    relExpr     go to state 222
    artExpr1    go to state 223
    artExpr2    go to state 224
    factor      go to state 225
    constant    go to state 226
    call        go to state 227
    params      go to state 289
    paramList   go to state 117


State 245

   59 disjExpr: disjExpr DISJ . conjExpr

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var       go to state 164
    conjExpr  go to state 290
    relExpr   go to state 168
    artExpr1  go to state 169
    artExpr2  go to state 170
    factor    go to state 171
    constant  go to state 172
    call      go to state 173


State 246

   61 conjExpr: conjExpr CONJ . relExpr

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var       go to state 164
    relExpr   go to state 291
    artExpr1  go to state 169
    artExpr2  go to state 170
    factor    go to state 171
    constant  go to state 172
    call      go to state 173


State 247

   63 relExpr: relExpr RELOP . artExpr1

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var       go to state 164
    artExpr1  go to state 292
    artExpr2  go to state 170
    factor    go to state 171
    constant  go to state 172
    call      go to state 173


State 248

   65 artExpr1: artExpr1 ARTOP1 . artExpr2

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var       go to state 164
    artExpr2  go to state 293
    factor    go to state 171
    constant  go to state 172
    call      go to state 173


State 249

   67 artExpr2: artExpr2 ARTOP2 . factor

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var       go to state 164
    factor    go to state 294
    constant  go to state 172
    call      go to state 173


State 250

   49 inExpr: READ '(' . var ')'

    ID  shift, and go to state 107

    var  go to state 295


State 251

   50 outExpr: WRITE '(' . output ')'

    ID      shift, and go to state 109
    CHAR    shift, and go to state 110
    STRING  shift, and go to state 111

    output  go to state 296


State 252

   51 outExpr: WRITELN '(' . output ')'

    ID      shift, and go to state 109
    CHAR    shift, and go to state 110
    STRING  shift, and go to state 111

    output  go to state 297


State 253

   47 assign: var '=' . simpleExpr

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 298
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 254

    7 varDecl: TYPE error .

    error    reduce using rule 7 (varDecl)
    TYPE     reduce using rule 7 (varDecl)
    SETOP    reduce using rule 7 (varDecl)
    ID       reduce using rule 7 (varDecl)
    IF       reduce using rule 7 (varDecl)
    ELSE     reduce using rule 7 (varDecl)
    FOR      reduce using rule 7 (varDecl)
    RETURN   reduce using rule 7 (varDecl)
    FORALL   reduce using rule 7 (varDecl)
    IS_SET   reduce using rule 7 (varDecl)
    EXISTS   reduce using rule 7 (varDecl)
    NEG      reduce using rule 7 (varDecl)
    READ     reduce using rule 7 (varDecl)
    WRITE    reduce using rule 7 (varDecl)
    WRITELN  reduce using rule 7 (varDecl)
    INTEGER  reduce using rule 7 (varDecl)
    FLOAT    reduce using rule 7 (varDecl)
    EMPTY    reduce using rule 7 (varDecl)
    ';'      reduce using rule 7 (varDecl)
    '}'      reduce using rule 7 (varDecl)
    '('      reduce using rule 7 (varDecl)


State 255

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 299
    ','  shift, and go to state 13


State 256

    9 varList: new_id .
   11 funcDecl: TYPE new_id . arguments '{' funcBody '}'

    '('  shift, and go to state 14

    ';'  reduce using rule 9 (varList)
    ','  reduce using rule 9 (varList)

    arguments  go to state 300


State 257

   35 condStmt: IF cond . body
   36         | IF cond . body ELSE body

    error    shift, and go to state 183
    TYPE     shift, and go to state 184
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 185
    FOR      shift, and go to state 186
    RETURN   shift, and go to state 187
    FORALL   shift, and go to state 188
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 189
    '{'      shift, and go to state 96
    '('      shift, and go to state 47

    varDecl     go to state 97
    funcDecl    go to state 98
    stmt        go to state 99
    iterStmt    go to state 190
    body        go to state 301
    condStmt    go to state 191
    returnStmt  go to state 192
    exprStmt    go to state 193
    expression  go to state 194
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 258

   26 iterStmt: FOR '(' . exprStmt exprStmt ')' body
   27         | FOR '(' . exprStmt exprStmt expression ')' body
   30         | FOR '(' . error ')' body

    error    shift, and go to state 302
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 195
    '('      shift, and go to state 47

    exprStmt    go to state 303
    expression  go to state 196
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 259

   39 returnStmt: RETURN exprStmt .

    error    reduce using rule 39 (returnStmt)
    TYPE     reduce using rule 39 (returnStmt)
    SETOP    reduce using rule 39 (returnStmt)
    ID       reduce using rule 39 (returnStmt)
    IF       reduce using rule 39 (returnStmt)
    ELSE     reduce using rule 39 (returnStmt)
    FOR      reduce using rule 39 (returnStmt)
    RETURN   reduce using rule 39 (returnStmt)
    FORALL   reduce using rule 39 (returnStmt)
    IS_SET   reduce using rule 39 (returnStmt)
    EXISTS   reduce using rule 39 (returnStmt)
    NEG      reduce using rule 39 (returnStmt)
    READ     reduce using rule 39 (returnStmt)
    WRITE    reduce using rule 39 (returnStmt)
    WRITELN  reduce using rule 39 (returnStmt)
    INTEGER  reduce using rule 39 (returnStmt)
    FLOAT    reduce using rule 39 (returnStmt)
    EMPTY    reduce using rule 39 (returnStmt)
    ';'      reduce using rule 39 (returnStmt)
    '}'      reduce using rule 39 (returnStmt)
    '('      reduce using rule 39 (returnStmt)


State 260

   28 iterStmt: FORALL '(' . simpleExpr ')' body
   29         | FORALL '(' . error ')' body

    error    shift, and go to state 304
    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 305
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 261

   40 exprStmt: expression ';' .

    error    reduce using rule 40 (exprStmt)
    TYPE     reduce using rule 40 (exprStmt)
    SETOP    reduce using rule 40 (exprStmt)
    ID       reduce using rule 40 (exprStmt)
    IF       reduce using rule 40 (exprStmt)
    ELSE     reduce using rule 40 (exprStmt)
    FOR      reduce using rule 40 (exprStmt)
    RETURN   reduce using rule 40 (exprStmt)
    FORALL   reduce using rule 40 (exprStmt)
    IS_SET   reduce using rule 40 (exprStmt)
    EXISTS   reduce using rule 40 (exprStmt)
    NEG      reduce using rule 40 (exprStmt)
    READ     reduce using rule 40 (exprStmt)
    WRITE    reduce using rule 40 (exprStmt)
    WRITELN  reduce using rule 40 (exprStmt)
    INTEGER  reduce using rule 40 (exprStmt)
    FLOAT    reduce using rule 40 (exprStmt)
    EMPTY    reduce using rule 40 (exprStmt)
    ';'      reduce using rule 40 (exprStmt)
    '}'      reduce using rule 40 (exprStmt)
    '('      reduce using rule 40 (exprStmt)


State 262

   40 exprStmt: expression ';' .

    error    reduce using rule 40 (exprStmt)
    SETOP    reduce using rule 40 (exprStmt)
    ID       reduce using rule 40 (exprStmt)
    IS_SET   reduce using rule 40 (exprStmt)
    EXISTS   reduce using rule 40 (exprStmt)
    NEG      reduce using rule 40 (exprStmt)
    READ     reduce using rule 40 (exprStmt)
    WRITE    reduce using rule 40 (exprStmt)
    WRITELN  reduce using rule 40 (exprStmt)
    INTEGER  reduce using rule 40 (exprStmt)
    FLOAT    reduce using rule 40 (exprStmt)
    EMPTY    reduce using rule 40 (exprStmt)
    ';'      reduce using rule 40 (exprStmt)
    '('      reduce using rule 40 (exprStmt)


State 263

   75 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 306
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 264

   73 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 197
    ID       shift, and go to state 198
    IS_SET   shift, and go to state 199
    EXISTS   shift, and go to state 200
    INTEGER  shift, and go to state 201
    FLOAT    shift, and go to state 202
    EMPTY    shift, and go to state 203
    '('      shift, and go to state 204

    var       go to state 205
    factor    go to state 307
    constant  go to state 206
    call      go to state 207


State 265

   74 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 308
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 266

   55 simpleExpr: simpleExpr . IN negExpr
   70 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 208
    ')'  shift, and go to state 309


State 267

   79 call: var '(' . params ')'

    SETOP    shift, and go to state 209
    ID       shift, and go to state 210
    IS_SET   shift, and go to state 211
    EXISTS   shift, and go to state 212
    NEG      shift, and go to state 213
    INTEGER  shift, and go to state 214
    FLOAT    shift, and go to state 215
    EMPTY    shift, and go to state 216
    '('      shift, and go to state 217

    ')'  reduce using rule 80 (params)

    var         go to state 218
    simpleExpr  go to state 115
    negExpr     go to state 219
    disjExpr    go to state 220
    conjExpr    go to state 221
    relExpr     go to state 222
    artExpr1    go to state 223
    artExpr2    go to state 224
    factor      go to state 225
    constant    go to state 226
    call        go to state 227
    params      go to state 310
    paramList   go to state 117


State 268

   55 simpleExpr: simpleExpr IN negExpr .

    IN   reduce using rule 55 (simpleExpr)
    ')'  reduce using rule 55 (simpleExpr)


State 269

   75 factor: SETOP '(' . simpleExpr ')'

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 311
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 270

   73 factor: IS_SET '(' . factor ')'

    SETOP    shift, and go to state 197
    ID       shift, and go to state 198
    IS_SET   shift, and go to state 199
    EXISTS   shift, and go to state 200
    INTEGER  shift, and go to state 201
    FLOAT    shift, and go to state 202
    EMPTY    shift, and go to state 203
    '('      shift, and go to state 204

    var       go to state 205
    factor    go to state 312
    constant  go to state 206
    call      go to state 207


State 271

   74 factor: EXISTS '(' . simpleExpr ')'

    SETOP    shift, and go to state 155
    ID       shift, and go to state 156
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163

    var         go to state 164
    simpleExpr  go to state 313
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 272

   57 negExpr: NEG negExpr .

    IN   reduce using rule 57 (negExpr)
    ','  reduce using rule 57 (negExpr)
    ')'  reduce using rule 57 (negExpr)


State 273

   55 simpleExpr: simpleExpr . IN negExpr
   70 factor: '(' simpleExpr . ')'

    IN   shift, and go to state 208
    ')'  shift, and go to state 314


State 274

   79 call: var '(' . params ')'

    SETOP    shift, and go to state 209
    ID       shift, and go to state 210
    IS_SET   shift, and go to state 211
    EXISTS   shift, and go to state 212
    NEG      shift, and go to state 213
    INTEGER  shift, and go to state 214
    FLOAT    shift, and go to state 215
    EMPTY    shift, and go to state 216
    '('      shift, and go to state 217

    ')'  reduce using rule 80 (params)

    var         go to state 218
    simpleExpr  go to state 115
    negExpr     go to state 219
    disjExpr    go to state 220
    conjExpr    go to state 221
    relExpr     go to state 222
    artExpr1    go to state 223
    artExpr2    go to state 224
    factor      go to state 225
    constant    go to state 226
    call        go to state 227
    params      go to state 315
    paramList   go to state 117


State 275

   59 disjExpr: disjExpr DISJ . conjExpr

    SETOP    shift, and go to state 209
    ID       shift, and go to state 210
    IS_SET   shift, and go to state 211
    EXISTS   shift, and go to state 212
    INTEGER  shift, and go to state 214
    FLOAT    shift, and go to state 215
    EMPTY    shift, and go to state 216
    '('      shift, and go to state 217

    var       go to state 218
    conjExpr  go to state 316
    relExpr   go to state 222
    artExpr1  go to state 223
    artExpr2  go to state 224
    factor    go to state 225
    constant  go to state 226
    call      go to state 227


State 276

   61 conjExpr: conjExpr CONJ . relExpr

    SETOP    shift, and go to state 209
    ID       shift, and go to state 210
    IS_SET   shift, and go to state 211
    EXISTS   shift, and go to state 212
    INTEGER  shift, and go to state 214
    FLOAT    shift, and go to state 215
    EMPTY    shift, and go to state 216
    '('      shift, and go to state 217

    var       go to state 218
    relExpr   go to state 317
    artExpr1  go to state 223
    artExpr2  go to state 224
    factor    go to state 225
    constant  go to state 226
    call      go to state 227


State 277

   63 relExpr: relExpr RELOP . artExpr1

    SETOP    shift, and go to state 209
    ID       shift, and go to state 210
    IS_SET   shift, and go to state 211
    EXISTS   shift, and go to state 212
    INTEGER  shift, and go to state 214
    FLOAT    shift, and go to state 215
    EMPTY    shift, and go to state 216
    '('      shift, and go to state 217

    var       go to state 218
    artExpr1  go to state 318
    artExpr2  go to state 224
    factor    go to state 225
    constant  go to state 226
    call      go to state 227


State 278

   65 artExpr1: artExpr1 ARTOP1 . artExpr2

    SETOP    shift, and go to state 209
    ID       shift, and go to state 210
    IS_SET   shift, and go to state 211
    EXISTS   shift, and go to state 212
    INTEGER  shift, and go to state 214
    FLOAT    shift, and go to state 215
    EMPTY    shift, and go to state 216
    '('      shift, and go to state 217

    var       go to state 218
    artExpr2  go to state 319
    factor    go to state 225
    constant  go to state 226
    call      go to state 227


State 279

   67 artExpr2: artExpr2 ARTOP2 . factor

    SETOP    shift, and go to state 209
    ID       shift, and go to state 210
    IS_SET   shift, and go to state 211
    EXISTS   shift, and go to state 212
    INTEGER  shift, and go to state 214
    FLOAT    shift, and go to state 215
    EMPTY    shift, and go to state 216
    '('      shift, and go to state 217

    var       go to state 218
    factor    go to state 320
    constant  go to state 226
    call      go to state 227


State 280

   40 exprStmt: expression ';' .

    SETOP    reduce using rule 40 (exprStmt)
    ID       reduce using rule 40 (exprStmt)
    IS_SET   reduce using rule 40 (exprStmt)
    EXISTS   reduce using rule 40 (exprStmt)
    NEG      reduce using rule 40 (exprStmt)
    READ     reduce using rule 40 (exprStmt)
    WRITE    reduce using rule 40 (exprStmt)
    WRITELN  reduce using rule 40 (exprStmt)
    INTEGER  reduce using rule 40 (exprStmt)
    FLOAT    reduce using rule 40 (exprStmt)
    EMPTY    reduce using rule 40 (exprStmt)
    '('      reduce using rule 40 (exprStmt)
    ')'      reduce using rule 40 (exprStmt)


State 281

   55 simpleExpr: simpleExpr IN negExpr .

    IN   reduce using rule 55 (simpleExpr)
    ','  reduce using rule 55 (simpleExpr)
    ')'  reduce using rule 55 (simpleExpr)


State 282

   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt
   31 body: '{' funcBody . '}'

    error    shift, and go to state 29
    TYPE     shift, and go to state 153
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '}'      shift, and go to state 321
    '('      shift, and go to state 47

    varDecl     go to state 48
    funcDecl    go to state 49
    stmt        go to state 50
    iterStmt    go to state 51
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 283

    6 varDecl: TYPE varList ';' .

    error    reduce using rule 6 (varDecl)
    TYPE     reduce using rule 6 (varDecl)
    SETOP    reduce using rule 6 (varDecl)
    ID       reduce using rule 6 (varDecl)
    IF       reduce using rule 6 (varDecl)
    FOR      reduce using rule 6 (varDecl)
    RETURN   reduce using rule 6 (varDecl)
    FORALL   reduce using rule 6 (varDecl)
    IS_SET   reduce using rule 6 (varDecl)
    EXISTS   reduce using rule 6 (varDecl)
    NEG      reduce using rule 6 (varDecl)
    READ     reduce using rule 6 (varDecl)
    WRITE    reduce using rule 6 (varDecl)
    WRITELN  reduce using rule 6 (varDecl)
    INTEGER  reduce using rule 6 (varDecl)
    FLOAT    reduce using rule 6 (varDecl)
    EMPTY    reduce using rule 6 (varDecl)
    ';'      reduce using rule 6 (varDecl)
    '}'      reduce using rule 6 (varDecl)
    '('      reduce using rule 6 (varDecl)


State 284

   11 funcDecl: TYPE new_id arguments . '{' funcBody '}'

    '{'  shift, and go to state 322


State 285

   55 simpleExpr: simpleExpr . IN negExpr
   75 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 208
    ')'  shift, and go to state 323


State 286

   73 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 324


State 287

   55 simpleExpr: simpleExpr . IN negExpr
   74 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 208
    ')'  shift, and go to state 325


State 288

   70 factor: '(' simpleExpr ')' .

    RELOP   reduce using rule 70 (factor)
    ARTOP1  reduce using rule 70 (factor)
    ARTOP2  reduce using rule 70 (factor)
    IN      reduce using rule 70 (factor)
    DISJ    reduce using rule 70 (factor)
    CONJ    reduce using rule 70 (factor)
    ')'     reduce using rule 70 (factor)


State 289

   79 call: var '(' params . ')'

    ')'  shift, and go to state 326


State 290

   59 disjExpr: disjExpr DISJ conjExpr .
   61 conjExpr: conjExpr . CONJ relExpr

    CONJ  shift, and go to state 246

    IN    reduce using rule 59 (disjExpr)
    DISJ  reduce using rule 59 (disjExpr)
    ')'   reduce using rule 59 (disjExpr)


State 291

   61 conjExpr: conjExpr CONJ relExpr .
   63 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 247

    IN    reduce using rule 61 (conjExpr)
    DISJ  reduce using rule 61 (conjExpr)
    CONJ  reduce using rule 61 (conjExpr)
    ')'   reduce using rule 61 (conjExpr)


State 292

   63 relExpr: relExpr RELOP artExpr1 .
   65 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 248

    RELOP  reduce using rule 63 (relExpr)
    IN     reduce using rule 63 (relExpr)
    DISJ   reduce using rule 63 (relExpr)
    CONJ   reduce using rule 63 (relExpr)
    ')'    reduce using rule 63 (relExpr)


State 293

   65 artExpr1: artExpr1 ARTOP1 artExpr2 .
   67 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 249

    RELOP   reduce using rule 65 (artExpr1)
    ARTOP1  reduce using rule 65 (artExpr1)
    IN      reduce using rule 65 (artExpr1)
    DISJ    reduce using rule 65 (artExpr1)
    CONJ    reduce using rule 65 (artExpr1)
    ')'     reduce using rule 65 (artExpr1)


State 294

   67 artExpr2: artExpr2 ARTOP2 factor .

    RELOP   reduce using rule 67 (artExpr2)
    ARTOP1  reduce using rule 67 (artExpr2)
    ARTOP2  reduce using rule 67 (artExpr2)
    IN      reduce using rule 67 (artExpr2)
    DISJ    reduce using rule 67 (artExpr2)
    CONJ    reduce using rule 67 (artExpr2)
    ')'     reduce using rule 67 (artExpr2)


State 295

   49 inExpr: READ '(' var . ')'

    ')'  shift, and go to state 327


State 296

   50 outExpr: WRITE '(' output . ')'

    ')'  shift, and go to state 328


State 297

   51 outExpr: WRITELN '(' output . ')'

    ')'  shift, and go to state 329


State 298

   47 assign: var '=' simpleExpr .
   55 simpleExpr: simpleExpr . IN negExpr

    IN  shift, and go to state 208

    ')'  reduce using rule 47 (assign)


State 299

    6 varDecl: TYPE varList ';' .

    error    reduce using rule 6 (varDecl)
    TYPE     reduce using rule 6 (varDecl)
    SETOP    reduce using rule 6 (varDecl)
    ID       reduce using rule 6 (varDecl)
    IF       reduce using rule 6 (varDecl)
    ELSE     reduce using rule 6 (varDecl)
    FOR      reduce using rule 6 (varDecl)
    RETURN   reduce using rule 6 (varDecl)
    FORALL   reduce using rule 6 (varDecl)
    IS_SET   reduce using rule 6 (varDecl)
    EXISTS   reduce using rule 6 (varDecl)
    NEG      reduce using rule 6 (varDecl)
    READ     reduce using rule 6 (varDecl)
    WRITE    reduce using rule 6 (varDecl)
    WRITELN  reduce using rule 6 (varDecl)
    INTEGER  reduce using rule 6 (varDecl)
    FLOAT    reduce using rule 6 (varDecl)
    EMPTY    reduce using rule 6 (varDecl)
    ';'      reduce using rule 6 (varDecl)
    '}'      reduce using rule 6 (varDecl)
    '('      reduce using rule 6 (varDecl)


State 300

   11 funcDecl: TYPE new_id arguments . '{' funcBody '}'

    '{'  shift, and go to state 330


State 301

   35 condStmt: IF cond body .
   36         | IF cond body . ELSE body

    ELSE  shift, and go to state 331

    error    reduce using rule 35 (condStmt)
    TYPE     reduce using rule 35 (condStmt)
    SETOP    reduce using rule 35 (condStmt)
    ID       reduce using rule 35 (condStmt)
    IF       reduce using rule 35 (condStmt)
    FOR      reduce using rule 35 (condStmt)
    RETURN   reduce using rule 35 (condStmt)
    FORALL   reduce using rule 35 (condStmt)
    IS_SET   reduce using rule 35 (condStmt)
    EXISTS   reduce using rule 35 (condStmt)
    NEG      reduce using rule 35 (condStmt)
    READ     reduce using rule 35 (condStmt)
    WRITE    reduce using rule 35 (condStmt)
    WRITELN  reduce using rule 35 (condStmt)
    INTEGER  reduce using rule 35 (condStmt)
    FLOAT    reduce using rule 35 (condStmt)
    EMPTY    reduce using rule 35 (condStmt)
    ';'      reduce using rule 35 (condStmt)
    '}'      reduce using rule 35 (condStmt)
    '('      reduce using rule 35 (condStmt)


State 302

   30 iterStmt: FOR '(' error . ')' body
   41 exprStmt: error .

    ')'  shift, and go to state 332

    error    reduce using rule 41 (exprStmt)
    SETOP    reduce using rule 41 (exprStmt)
    ID       reduce using rule 41 (exprStmt)
    IS_SET   reduce using rule 41 (exprStmt)
    EXISTS   reduce using rule 41 (exprStmt)
    NEG      reduce using rule 41 (exprStmt)
    READ     reduce using rule 41 (exprStmt)
    WRITE    reduce using rule 41 (exprStmt)
    WRITELN  reduce using rule 41 (exprStmt)
    INTEGER  reduce using rule 41 (exprStmt)
    FLOAT    reduce using rule 41 (exprStmt)
    EMPTY    reduce using rule 41 (exprStmt)
    ';'      reduce using rule 41 (exprStmt)
    '('      reduce using rule 41 (exprStmt)


State 303

   26 iterStmt: FOR '(' exprStmt . exprStmt ')' body
   27         | FOR '(' exprStmt . exprStmt expression ')' body

    error    shift, and go to state 228
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 229
    '('      shift, and go to state 47

    exprStmt    go to state 333
    expression  go to state 230
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 304

   29 iterStmt: FORALL '(' error . ')' body

    ')'  shift, and go to state 334


State 305

   28 iterStmt: FORALL '(' simpleExpr . ')' body
   55 simpleExpr: simpleExpr . IN negExpr

    IN   shift, and go to state 208
    ')'  shift, and go to state 335


State 306

   55 simpleExpr: simpleExpr . IN negExpr
   75 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 208
    ')'  shift, and go to state 336


State 307

   73 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 337


State 308

   55 simpleExpr: simpleExpr . IN negExpr
   74 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 208
    ')'  shift, and go to state 338


State 309

   70 factor: '(' simpleExpr ')' .

    ')'  reduce using rule 70 (factor)


State 310

   79 call: var '(' params . ')'

    ')'  shift, and go to state 339


State 311

   55 simpleExpr: simpleExpr . IN negExpr
   75 factor: SETOP '(' simpleExpr . ')'

    IN   shift, and go to state 208
    ')'  shift, and go to state 340


State 312

   73 factor: IS_SET '(' factor . ')'

    ')'  shift, and go to state 341


State 313

   55 simpleExpr: simpleExpr . IN negExpr
   74 factor: EXISTS '(' simpleExpr . ')'

    IN   shift, and go to state 208
    ')'  shift, and go to state 342


State 314

   70 factor: '(' simpleExpr ')' .

    RELOP   reduce using rule 70 (factor)
    ARTOP1  reduce using rule 70 (factor)
    ARTOP2  reduce using rule 70 (factor)
    IN      reduce using rule 70 (factor)
    DISJ    reduce using rule 70 (factor)
    CONJ    reduce using rule 70 (factor)
    ','     reduce using rule 70 (factor)
    ')'     reduce using rule 70 (factor)


State 315

   79 call: var '(' params . ')'

    ')'  shift, and go to state 343


State 316

   59 disjExpr: disjExpr DISJ conjExpr .
   61 conjExpr: conjExpr . CONJ relExpr

    CONJ  shift, and go to state 276

    IN    reduce using rule 59 (disjExpr)
    DISJ  reduce using rule 59 (disjExpr)
    ','   reduce using rule 59 (disjExpr)
    ')'   reduce using rule 59 (disjExpr)


State 317

   61 conjExpr: conjExpr CONJ relExpr .
   63 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 277

    IN    reduce using rule 61 (conjExpr)
    DISJ  reduce using rule 61 (conjExpr)
    CONJ  reduce using rule 61 (conjExpr)
    ','   reduce using rule 61 (conjExpr)
    ')'   reduce using rule 61 (conjExpr)


State 318

   63 relExpr: relExpr RELOP artExpr1 .
   65 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 278

    RELOP  reduce using rule 63 (relExpr)
    IN     reduce using rule 63 (relExpr)
    DISJ   reduce using rule 63 (relExpr)
    CONJ   reduce using rule 63 (relExpr)
    ','    reduce using rule 63 (relExpr)
    ')'    reduce using rule 63 (relExpr)


State 319

   65 artExpr1: artExpr1 ARTOP1 artExpr2 .
   67 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 279

    RELOP   reduce using rule 65 (artExpr1)
    ARTOP1  reduce using rule 65 (artExpr1)
    IN      reduce using rule 65 (artExpr1)
    DISJ    reduce using rule 65 (artExpr1)
    CONJ    reduce using rule 65 (artExpr1)
    ','     reduce using rule 65 (artExpr1)
    ')'     reduce using rule 65 (artExpr1)


State 320

   67 artExpr2: artExpr2 ARTOP2 factor .

    RELOP   reduce using rule 67 (artExpr2)
    ARTOP1  reduce using rule 67 (artExpr2)
    ARTOP2  reduce using rule 67 (artExpr2)
    IN      reduce using rule 67 (artExpr2)
    DISJ    reduce using rule 67 (artExpr2)
    CONJ    reduce using rule 67 (artExpr2)
    ','     reduce using rule 67 (artExpr2)
    ')'     reduce using rule 67 (artExpr2)


State 321

   31 body: '{' funcBody '}' .

    error    reduce using rule 31 (body)
    TYPE     reduce using rule 31 (body)
    SETOP    reduce using rule 31 (body)
    ID       reduce using rule 31 (body)
    IF       reduce using rule 31 (body)
    FOR      reduce using rule 31 (body)
    RETURN   reduce using rule 31 (body)
    FORALL   reduce using rule 31 (body)
    IS_SET   reduce using rule 31 (body)
    EXISTS   reduce using rule 31 (body)
    NEG      reduce using rule 31 (body)
    READ     reduce using rule 31 (body)
    WRITE    reduce using rule 31 (body)
    WRITELN  reduce using rule 31 (body)
    INTEGER  reduce using rule 31 (body)
    FLOAT    reduce using rule 31 (body)
    EMPTY    reduce using rule 31 (body)
    ';'      reduce using rule 31 (body)
    '}'      reduce using rule 31 (body)
    '('      reduce using rule 31 (body)


State 322

   11 funcDecl: TYPE new_id arguments '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)

    funcBody  go to state 344


State 323

   75 factor: SETOP '(' simpleExpr ')' .

    RELOP   reduce using rule 75 (factor)
    ARTOP1  reduce using rule 75 (factor)
    ARTOP2  reduce using rule 75 (factor)
    IN      reduce using rule 75 (factor)
    DISJ    reduce using rule 75 (factor)
    CONJ    reduce using rule 75 (factor)
    ')'     reduce using rule 75 (factor)


State 324

   73 factor: IS_SET '(' factor ')' .

    RELOP   reduce using rule 73 (factor)
    ARTOP1  reduce using rule 73 (factor)
    ARTOP2  reduce using rule 73 (factor)
    IN      reduce using rule 73 (factor)
    DISJ    reduce using rule 73 (factor)
    CONJ    reduce using rule 73 (factor)
    ')'     reduce using rule 73 (factor)


State 325

   74 factor: EXISTS '(' simpleExpr ')' .

    RELOP   reduce using rule 74 (factor)
    ARTOP1  reduce using rule 74 (factor)
    ARTOP2  reduce using rule 74 (factor)
    IN      reduce using rule 74 (factor)
    DISJ    reduce using rule 74 (factor)
    CONJ    reduce using rule 74 (factor)
    ')'     reduce using rule 74 (factor)


State 326

   79 call: var '(' params ')' .

    RELOP   reduce using rule 79 (call)
    ARTOP1  reduce using rule 79 (call)
    ARTOP2  reduce using rule 79 (call)
    IN      reduce using rule 79 (call)
    DISJ    reduce using rule 79 (call)
    CONJ    reduce using rule 79 (call)
    ')'     reduce using rule 79 (call)


State 327

   49 inExpr: READ '(' var ')' .

    ')'  reduce using rule 49 (inExpr)


State 328

   50 outExpr: WRITE '(' output ')' .

    ')'  reduce using rule 50 (outExpr)


State 329

   51 outExpr: WRITELN '(' output ')' .

    ')'  reduce using rule 51 (outExpr)


State 330

   11 funcDecl: TYPE new_id arguments '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)

    funcBody  go to state 345


State 331

   36 condStmt: IF cond body ELSE . body

    error    shift, and go to state 183
    TYPE     shift, and go to state 184
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 185
    FOR      shift, and go to state 186
    RETURN   shift, and go to state 187
    FORALL   shift, and go to state 188
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 189
    '{'      shift, and go to state 96
    '('      shift, and go to state 47

    varDecl     go to state 97
    funcDecl    go to state 98
    stmt        go to state 99
    iterStmt    go to state 190
    body        go to state 346
    condStmt    go to state 191
    returnStmt  go to state 192
    exprStmt    go to state 193
    expression  go to state 194
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 332

   30 iterStmt: FOR '(' error ')' . body

    error    shift, and go to state 183
    TYPE     shift, and go to state 184
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 185
    FOR      shift, and go to state 186
    RETURN   shift, and go to state 187
    FORALL   shift, and go to state 188
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 189
    '{'      shift, and go to state 96
    '('      shift, and go to state 47

    varDecl     go to state 97
    funcDecl    go to state 98
    stmt        go to state 99
    iterStmt    go to state 190
    body        go to state 347
    condStmt    go to state 191
    returnStmt  go to state 192
    exprStmt    go to state 193
    expression  go to state 194
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 333

   26 iterStmt: FOR '(' exprStmt exprStmt . ')' body
   27         | FOR '(' exprStmt exprStmt . expression ')' body

    SETOP    shift, and go to state 155
    ID       shift, and go to state 174
    IS_SET   shift, and go to state 157
    EXISTS   shift, and go to state 158
    NEG      shift, and go to state 159
    READ     shift, and go to state 175
    WRITE    shift, and go to state 176
    WRITELN  shift, and go to state 177
    INTEGER  shift, and go to state 160
    FLOAT    shift, and go to state 161
    EMPTY    shift, and go to state 162
    '('      shift, and go to state 163
    ')'      shift, and go to state 348

    expression  go to state 349
    assign      go to state 178
    var         go to state 179
    inExpr      go to state 180
    outExpr     go to state 181
    simpleExpr  go to state 182
    negExpr     go to state 165
    disjExpr    go to state 166
    conjExpr    go to state 167
    relExpr     go to state 168
    artExpr1    go to state 169
    artExpr2    go to state 170
    factor      go to state 171
    constant    go to state 172
    call        go to state 173


State 334

   29 iterStmt: FORALL '(' error ')' . body

    error    shift, and go to state 183
    TYPE     shift, and go to state 184
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 185
    FOR      shift, and go to state 186
    RETURN   shift, and go to state 187
    FORALL   shift, and go to state 188
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 189
    '{'      shift, and go to state 96
    '('      shift, and go to state 47

    varDecl     go to state 97
    funcDecl    go to state 98
    stmt        go to state 99
    iterStmt    go to state 190
    body        go to state 350
    condStmt    go to state 191
    returnStmt  go to state 192
    exprStmt    go to state 193
    expression  go to state 194
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 335

   28 iterStmt: FORALL '(' simpleExpr ')' . body

    error    shift, and go to state 183
    TYPE     shift, and go to state 184
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 185
    FOR      shift, and go to state 186
    RETURN   shift, and go to state 187
    FORALL   shift, and go to state 188
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 189
    '{'      shift, and go to state 96
    '('      shift, and go to state 47

    varDecl     go to state 97
    funcDecl    go to state 98
    stmt        go to state 99
    iterStmt    go to state 190
    body        go to state 351
    condStmt    go to state 191
    returnStmt  go to state 192
    exprStmt    go to state 193
    expression  go to state 194
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 336

   75 factor: SETOP '(' simpleExpr ')' .

    ')'  reduce using rule 75 (factor)


State 337

   73 factor: IS_SET '(' factor ')' .

    ')'  reduce using rule 73 (factor)


State 338

   74 factor: EXISTS '(' simpleExpr ')' .

    ')'  reduce using rule 74 (factor)


State 339

   79 call: var '(' params ')' .

    ')'  reduce using rule 79 (call)


State 340

   75 factor: SETOP '(' simpleExpr ')' .

    RELOP   reduce using rule 75 (factor)
    ARTOP1  reduce using rule 75 (factor)
    ARTOP2  reduce using rule 75 (factor)
    IN      reduce using rule 75 (factor)
    DISJ    reduce using rule 75 (factor)
    CONJ    reduce using rule 75 (factor)
    ','     reduce using rule 75 (factor)
    ')'     reduce using rule 75 (factor)


State 341

   73 factor: IS_SET '(' factor ')' .

    RELOP   reduce using rule 73 (factor)
    ARTOP1  reduce using rule 73 (factor)
    ARTOP2  reduce using rule 73 (factor)
    IN      reduce using rule 73 (factor)
    DISJ    reduce using rule 73 (factor)
    CONJ    reduce using rule 73 (factor)
    ','     reduce using rule 73 (factor)
    ')'     reduce using rule 73 (factor)


State 342

   74 factor: EXISTS '(' simpleExpr ')' .

    RELOP   reduce using rule 74 (factor)
    ARTOP1  reduce using rule 74 (factor)
    ARTOP2  reduce using rule 74 (factor)
    IN      reduce using rule 74 (factor)
    DISJ    reduce using rule 74 (factor)
    CONJ    reduce using rule 74 (factor)
    ','     reduce using rule 74 (factor)
    ')'     reduce using rule 74 (factor)


State 343

   79 call: var '(' params ')' .

    RELOP   reduce using rule 79 (call)
    ARTOP1  reduce using rule 79 (call)
    ARTOP2  reduce using rule 79 (call)
    IN      reduce using rule 79 (call)
    DISJ    reduce using rule 79 (call)
    CONJ    reduce using rule 79 (call)
    ','     reduce using rule 79 (call)
    ')'     reduce using rule 79 (call)


State 344

   11 funcDecl: TYPE new_id arguments '{' funcBody . '}'
   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt

    error    shift, and go to state 29
    TYPE     shift, and go to state 153
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '}'      shift, and go to state 352
    '('      shift, and go to state 47

    varDecl     go to state 48
    funcDecl    go to state 49
    stmt        go to state 50
    iterStmt    go to state 51
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 345

   11 funcDecl: TYPE new_id arguments '{' funcBody . '}'
   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt

    error    shift, and go to state 29
    TYPE     shift, and go to state 153
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '}'      shift, and go to state 353
    '('      shift, and go to state 47

    varDecl     go to state 48
    funcDecl    go to state 49
    stmt        go to state 50
    iterStmt    go to state 51
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 346

   36 condStmt: IF cond body ELSE body .

    error    reduce using rule 36 (condStmt)
    TYPE     reduce using rule 36 (condStmt)
    SETOP    reduce using rule 36 (condStmt)
    ID       reduce using rule 36 (condStmt)
    IF       reduce using rule 36 (condStmt)
    ELSE     reduce using rule 36 (condStmt)
    FOR      reduce using rule 36 (condStmt)
    RETURN   reduce using rule 36 (condStmt)
    FORALL   reduce using rule 36 (condStmt)
    IS_SET   reduce using rule 36 (condStmt)
    EXISTS   reduce using rule 36 (condStmt)
    NEG      reduce using rule 36 (condStmt)
    READ     reduce using rule 36 (condStmt)
    WRITE    reduce using rule 36 (condStmt)
    WRITELN  reduce using rule 36 (condStmt)
    INTEGER  reduce using rule 36 (condStmt)
    FLOAT    reduce using rule 36 (condStmt)
    EMPTY    reduce using rule 36 (condStmt)
    ';'      reduce using rule 36 (condStmt)
    '}'      reduce using rule 36 (condStmt)
    '('      reduce using rule 36 (condStmt)


State 347

   30 iterStmt: FOR '(' error ')' body .

    error    reduce using rule 30 (iterStmt)
    TYPE     reduce using rule 30 (iterStmt)
    SETOP    reduce using rule 30 (iterStmt)
    ID       reduce using rule 30 (iterStmt)
    IF       reduce using rule 30 (iterStmt)
    ELSE     reduce using rule 30 (iterStmt)
    FOR      reduce using rule 30 (iterStmt)
    RETURN   reduce using rule 30 (iterStmt)
    FORALL   reduce using rule 30 (iterStmt)
    IS_SET   reduce using rule 30 (iterStmt)
    EXISTS   reduce using rule 30 (iterStmt)
    NEG      reduce using rule 30 (iterStmt)
    READ     reduce using rule 30 (iterStmt)
    WRITE    reduce using rule 30 (iterStmt)
    WRITELN  reduce using rule 30 (iterStmt)
    INTEGER  reduce using rule 30 (iterStmt)
    FLOAT    reduce using rule 30 (iterStmt)
    EMPTY    reduce using rule 30 (iterStmt)
    ';'      reduce using rule 30 (iterStmt)
    '}'      reduce using rule 30 (iterStmt)
    '('      reduce using rule 30 (iterStmt)


State 348

   26 iterStmt: FOR '(' exprStmt exprStmt ')' . body

    error    shift, and go to state 183
    TYPE     shift, and go to state 184
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 185
    FOR      shift, and go to state 186
    RETURN   shift, and go to state 187
    FORALL   shift, and go to state 188
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 189
    '{'      shift, and go to state 96
    '('      shift, and go to state 47

    varDecl     go to state 97
    funcDecl    go to state 98
    stmt        go to state 99
    iterStmt    go to state 190
    body        go to state 354
    condStmt    go to state 191
    returnStmt  go to state 192
    exprStmt    go to state 193
    expression  go to state 194
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 349

   27 iterStmt: FOR '(' exprStmt exprStmt expression . ')' body

    ')'  shift, and go to state 355


State 350

   29 iterStmt: FORALL '(' error ')' body .

    error    reduce using rule 29 (iterStmt)
    TYPE     reduce using rule 29 (iterStmt)
    SETOP    reduce using rule 29 (iterStmt)
    ID       reduce using rule 29 (iterStmt)
    IF       reduce using rule 29 (iterStmt)
    ELSE     reduce using rule 29 (iterStmt)
    FOR      reduce using rule 29 (iterStmt)
    RETURN   reduce using rule 29 (iterStmt)
    FORALL   reduce using rule 29 (iterStmt)
    IS_SET   reduce using rule 29 (iterStmt)
    EXISTS   reduce using rule 29 (iterStmt)
    NEG      reduce using rule 29 (iterStmt)
    READ     reduce using rule 29 (iterStmt)
    WRITE    reduce using rule 29 (iterStmt)
    WRITELN  reduce using rule 29 (iterStmt)
    INTEGER  reduce using rule 29 (iterStmt)
    FLOAT    reduce using rule 29 (iterStmt)
    EMPTY    reduce using rule 29 (iterStmt)
    ';'      reduce using rule 29 (iterStmt)
    '}'      reduce using rule 29 (iterStmt)
    '('      reduce using rule 29 (iterStmt)


State 351

   28 iterStmt: FORALL '(' simpleExpr ')' body .

    error    reduce using rule 28 (iterStmt)
    TYPE     reduce using rule 28 (iterStmt)
    SETOP    reduce using rule 28 (iterStmt)
    ID       reduce using rule 28 (iterStmt)
    IF       reduce using rule 28 (iterStmt)
    ELSE     reduce using rule 28 (iterStmt)
    FOR      reduce using rule 28 (iterStmt)
    RETURN   reduce using rule 28 (iterStmt)
    FORALL   reduce using rule 28 (iterStmt)
    IS_SET   reduce using rule 28 (iterStmt)
    EXISTS   reduce using rule 28 (iterStmt)
    NEG      reduce using rule 28 (iterStmt)
    READ     reduce using rule 28 (iterStmt)
    WRITE    reduce using rule 28 (iterStmt)
    WRITELN  reduce using rule 28 (iterStmt)
    INTEGER  reduce using rule 28 (iterStmt)
    FLOAT    reduce using rule 28 (iterStmt)
    EMPTY    reduce using rule 28 (iterStmt)
    ';'      reduce using rule 28 (iterStmt)
    '}'      reduce using rule 28 (iterStmt)
    '('      reduce using rule 28 (iterStmt)


State 352

   11 funcDecl: TYPE new_id arguments '{' funcBody '}' .

    error    reduce using rule 11 (funcDecl)
    TYPE     reduce using rule 11 (funcDecl)
    SETOP    reduce using rule 11 (funcDecl)
    ID       reduce using rule 11 (funcDecl)
    IF       reduce using rule 11 (funcDecl)
    FOR      reduce using rule 11 (funcDecl)
    RETURN   reduce using rule 11 (funcDecl)
    FORALL   reduce using rule 11 (funcDecl)
    IS_SET   reduce using rule 11 (funcDecl)
    EXISTS   reduce using rule 11 (funcDecl)
    NEG      reduce using rule 11 (funcDecl)
    READ     reduce using rule 11 (funcDecl)
    WRITE    reduce using rule 11 (funcDecl)
    WRITELN  reduce using rule 11 (funcDecl)
    INTEGER  reduce using rule 11 (funcDecl)
    FLOAT    reduce using rule 11 (funcDecl)
    EMPTY    reduce using rule 11 (funcDecl)
    ';'      reduce using rule 11 (funcDecl)
    '}'      reduce using rule 11 (funcDecl)
    '('      reduce using rule 11 (funcDecl)


State 353

   11 funcDecl: TYPE new_id arguments '{' funcBody '}' .

    error    reduce using rule 11 (funcDecl)
    TYPE     reduce using rule 11 (funcDecl)
    SETOP    reduce using rule 11 (funcDecl)
    ID       reduce using rule 11 (funcDecl)
    IF       reduce using rule 11 (funcDecl)
    ELSE     reduce using rule 11 (funcDecl)
    FOR      reduce using rule 11 (funcDecl)
    RETURN   reduce using rule 11 (funcDecl)
    FORALL   reduce using rule 11 (funcDecl)
    IS_SET   reduce using rule 11 (funcDecl)
    EXISTS   reduce using rule 11 (funcDecl)
    NEG      reduce using rule 11 (funcDecl)
    READ     reduce using rule 11 (funcDecl)
    WRITE    reduce using rule 11 (funcDecl)
    WRITELN  reduce using rule 11 (funcDecl)
    INTEGER  reduce using rule 11 (funcDecl)
    FLOAT    reduce using rule 11 (funcDecl)
    EMPTY    reduce using rule 11 (funcDecl)
    ';'      reduce using rule 11 (funcDecl)
    '}'      reduce using rule 11 (funcDecl)
    '('      reduce using rule 11 (funcDecl)


State 354

   26 iterStmt: FOR '(' exprStmt exprStmt ')' body .

    error    reduce using rule 26 (iterStmt)
    TYPE     reduce using rule 26 (iterStmt)
    SETOP    reduce using rule 26 (iterStmt)
    ID       reduce using rule 26 (iterStmt)
    IF       reduce using rule 26 (iterStmt)
    ELSE     reduce using rule 26 (iterStmt)
    FOR      reduce using rule 26 (iterStmt)
    RETURN   reduce using rule 26 (iterStmt)
    FORALL   reduce using rule 26 (iterStmt)
    IS_SET   reduce using rule 26 (iterStmt)
    EXISTS   reduce using rule 26 (iterStmt)
    NEG      reduce using rule 26 (iterStmt)
    READ     reduce using rule 26 (iterStmt)
    WRITE    reduce using rule 26 (iterStmt)
    WRITELN  reduce using rule 26 (iterStmt)
    INTEGER  reduce using rule 26 (iterStmt)
    FLOAT    reduce using rule 26 (iterStmt)
    EMPTY    reduce using rule 26 (iterStmt)
    ';'      reduce using rule 26 (iterStmt)
    '}'      reduce using rule 26 (iterStmt)
    '('      reduce using rule 26 (iterStmt)


State 355

   27 iterStmt: FOR '(' exprStmt exprStmt expression ')' . body

    error    shift, and go to state 183
    TYPE     shift, and go to state 184
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 185
    FOR      shift, and go to state 186
    RETURN   shift, and go to state 187
    FORALL   shift, and go to state 188
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 189
    '{'      shift, and go to state 96
    '('      shift, and go to state 47

    varDecl     go to state 97
    funcDecl    go to state 98
    stmt        go to state 99
    iterStmt    go to state 190
    body        go to state 356
    condStmt    go to state 191
    returnStmt  go to state 192
    exprStmt    go to state 193
    expression  go to state 194
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    negExpr     go to state 61
    disjExpr    go to state 62
    conjExpr    go to state 63
    relExpr     go to state 64
    artExpr1    go to state 65
    artExpr2    go to state 66
    factor      go to state 67
    constant    go to state 68
    call        go to state 69


State 356

   27 iterStmt: FOR '(' exprStmt exprStmt expression ')' body .

    error    reduce using rule 27 (iterStmt)
    TYPE     reduce using rule 27 (iterStmt)
    SETOP    reduce using rule 27 (iterStmt)
    ID       reduce using rule 27 (iterStmt)
    IF       reduce using rule 27 (iterStmt)
    ELSE     reduce using rule 27 (iterStmt)
    FOR      reduce using rule 27 (iterStmt)
    RETURN   reduce using rule 27 (iterStmt)
    FORALL   reduce using rule 27 (iterStmt)
    IS_SET   reduce using rule 27 (iterStmt)
    EXISTS   reduce using rule 27 (iterStmt)
    NEG      reduce using rule 27 (iterStmt)
    READ     reduce using rule 27 (iterStmt)
    WRITE    reduce using rule 27 (iterStmt)
    WRITELN  reduce using rule 27 (iterStmt)
    INTEGER  reduce using rule 27 (iterStmt)
    FLOAT    reduce using rule 27 (iterStmt)
    EMPTY    reduce using rule 27 (iterStmt)
    ';'      reduce using rule 27 (iterStmt)
    '}'      reduce using rule 27 (iterStmt)
    '('      reduce using rule 27 (iterStmt)
