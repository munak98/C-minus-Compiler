Grammar

    0 $accept: begin $end

    1 begin: program

    2 program: program declaration
    3        | %empty

    4 declaration: varDecl
    5            | funcDecl

    6 varDecl: TYPE varList ';'
    7        | TYPE error

    8 varList: varList ',' new_id
    9        | new_id

   10 new_id: ID

   11 funcDecl: TYPE new_id arguments '{' funcBody '}'

   12 arguments: '(' ')'
   13          | '(' argsList ')'
   14          | '(' error ')'

   15 argsList: argsList ',' arg
   16         | arg

   17 arg: TYPE ID

   18 funcBody: %empty
   19         | funcBody varDecl
   20         | funcBody funcDecl
   21         | funcBody stmt

   22 stmt: exprStmt
   23     | returnStmt
   24     | iterStmt
   25     | condStmt

   26 iterStmt: FOR '(' exprStmt exprStmt ')' body
   27         | FOR '(' exprStmt exprStmt expression ')' body
   28         | FORALL '(' pertExpr ')' body
   29         | FORALL '(' error ')' body
   30         | FOR '(' error ')' body

   31 body: '{' funcBody '}'
   32     | stmt
   33     | varDecl
   34     | funcDecl

   35 condStmt: IF cond body
   36         | IF cond body ELSE body

   37 cond: '(' expression ')'
   38     | '(' error ')'

   39 returnStmt: RETURN exprStmt

   40 exprStmt: expression ';'
   41         | error
   42         | ';'

   43 expression: assign
   44           | inExpr
   45           | outExpr
   46           | simpleExpr
   47           | setExpr

   48 assign: var '=' simpleExpr

   49 var: ID

   50 inExpr: READ '(' var ')'

   51 outExpr: WRITE '(' output ')'
   52        | WRITELN '(' output ')'

   53 output: ID
   54       | CHAR
   55       | STRING

   56 simpleExpr: simpleExpr DISJ disjExpr
   57           | disjExpr

   58 disjExpr: disjExpr CONJ negExpr
   59         | negExpr

   60 negExpr: NEG negExpr
   61        | relExpr

   62 relExpr: relExpr RELOP artExpr1
   63        | artExpr1

   64 artExpr1: artExpr1 ARTOP1 artExpr2
   65         | artExpr2

   66 artExpr2: artExpr2 ARTOP2 factor
   67         | factor

   68 factor: ID
   69       | '(' simpleExpr ')'
   70       | constant
   71       | call
   72       | IS_SET '(' set ')'
   73       | pertExpr
   74       | EXISTS '(' pertExpr ')'

   75 constant: INTEGER
   76         | FLOAT
   77         | EMPTY

   78 call: var '(' params ')'

   79 params: %empty
   80       | paramList

   81 paramList: paramList ',' simpleExpr
   82          | simpleExpr

   83 pertExpr: elem IN set

   84 setExpr: SETOP '(' pertExpr ')'

   85 elem: ID
   86     | EXISTS '(' pertExpr ')'
   87     | call
   88     | '(' simpleExpr ')'
   89     | constant

   90 set: ID
   91    | setExpr


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 12 13 14 26 27 28 29 30 37 38 50 51 52 69 72 74 78 84 86 88
    ')' (41) 12 13 14 26 27 28 29 30 37 38 50 51 52 69 72 74 78 84 86 88
    ',' (44) 8 15 81
    ';' (59) 6 40 42
    '=' (61) 48
    '{' (123) 11 31
    '}' (125) 11 31
    error (256) 7 14 29 30 38 41
    TYPE <ival> (258) 6 7 11 17
    RELOP <ival> (259) 62
    SETOP <ival> (260) 84
    ARTOP1 <ival> (261) 64
    ARTOP2 <ival> (262) 66
    ID <sval> (263) 10 17 49 53 68 85 90
    IF (264) 35 36
    ELSE (265) 36
    FOR (266) 26 27 30
    RETURN (267) 39
    FORALL (268) 28 29
    IN (269) 83
    IS_SET (270) 72
    EXISTS (271) 74 86
    DISJ (272) 56
    CONJ (273) 58
    NEG (274) 60
    READ (275) 50
    WRITE (276) 51
    WRITELN (277) 52
    INTEGER <ival> (278) 75
    FLOAT <fval> (279) 76
    CHAR <cval> (280) 54
    STRING <sval> (281) 55
    EMPTY (282) 77
    THEN (283)


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    begin (37)
        on left: 1
        on right: 0
    program <tnode> (38)
        on left: 2 3
        on right: 1 2
    declaration <tnode> (39)
        on left: 4 5
        on right: 2
    varDecl <tnode> (40)
        on left: 6 7
        on right: 4 19 33
    varList <tnode> (41)
        on left: 8 9
        on right: 6 8
    new_id <tnode> (42)
        on left: 10
        on right: 8 9 11
    funcDecl <tnode> (43)
        on left: 11
        on right: 5 20 34
    arguments <tnode> (44)
        on left: 12 13 14
        on right: 11
    argsList <tnode> (45)
        on left: 15 16
        on right: 13 15
    arg <tnode> (46)
        on left: 17
        on right: 15 16
    funcBody <tnode> (47)
        on left: 18 19 20 21
        on right: 11 19 20 21 31
    stmt <tnode> (48)
        on left: 22 23 24 25
        on right: 21 32
    iterStmt <tnode> (49)
        on left: 26 27 28 29 30
        on right: 24
    body <tnode> (50)
        on left: 31 32 33 34
        on right: 26 27 28 29 30 35 36
    condStmt <tnode> (51)
        on left: 35 36
        on right: 25
    cond <tnode> (52)
        on left: 37 38
        on right: 35 36
    returnStmt <tnode> (53)
        on left: 39
        on right: 23
    exprStmt <tnode> (54)
        on left: 40 41 42
        on right: 22 26 27 39
    expression <tnode> (55)
        on left: 43 44 45 46 47
        on right: 27 37 40
    assign <tnode> (56)
        on left: 48
        on right: 43
    var <tnode> (57)
        on left: 49
        on right: 48 50 78
    inExpr <tnode> (58)
        on left: 50
        on right: 44
    outExpr <tnode> (59)
        on left: 51 52
        on right: 45
    output <tnode> (60)
        on left: 53 54 55
        on right: 51 52
    simpleExpr <tnode> (61)
        on left: 56 57
        on right: 46 48 56 69 81 82 88
    disjExpr <tnode> (62)
        on left: 58 59
        on right: 56 57 58
    negExpr <tnode> (63)
        on left: 60 61
        on right: 58 59 60
    relExpr <tnode> (64)
        on left: 62 63
        on right: 61 62
    artExpr1 <tnode> (65)
        on left: 64 65
        on right: 62 63 64
    artExpr2 <tnode> (66)
        on left: 66 67
        on right: 64 65 66
    factor <tnode> (67)
        on left: 68 69 70 71 72 73 74
        on right: 66 67
    constant <tnode> (68)
        on left: 75 76 77
        on right: 70 89
    call <tnode> (69)
        on left: 78
        on right: 71 87
    params <tnode> (70)
        on left: 79 80
        on right: 78
    paramList <tnode> (71)
        on left: 81 82
        on right: 80 81
    pertExpr <tnode> (72)
        on left: 83
        on right: 28 73 74 84 86
    setExpr <tnode> (73)
        on left: 84
        on right: 47 91
    elem <tnode> (74)
        on left: 85 86 87 88 89
        on right: 83
    set <tnode> (75)
        on left: 90 91
        on right: 72 83


State 0

    0 $accept: . begin $end

    $end  reduce using rule 3 (program)
    TYPE  reduce using rule 3 (program)

    begin    go to state 1
    program  go to state 2


State 1

    0 $accept: begin . $end

    $end  shift, and go to state 3


State 2

    1 begin: program .
    2 program: program . declaration

    TYPE  shift, and go to state 4

    $end  reduce using rule 1 (begin)

    declaration  go to state 5
    varDecl      go to state 6
    funcDecl     go to state 7


State 3

    0 $accept: begin $end .

    $default  accept


State 4

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error
   11 funcDecl: TYPE . new_id arguments '{' funcBody '}'

    error  shift, and go to state 8
    ID     shift, and go to state 9

    varList  go to state 10
    new_id   go to state 11


State 5

    2 program: program declaration .

    $end  reduce using rule 2 (program)
    TYPE  reduce using rule 2 (program)


State 6

    4 declaration: varDecl .

    $end  reduce using rule 4 (declaration)
    TYPE  reduce using rule 4 (declaration)


State 7

    5 declaration: funcDecl .

    $end  reduce using rule 5 (declaration)
    TYPE  reduce using rule 5 (declaration)


State 8

    7 varDecl: TYPE error .

    $end  reduce using rule 7 (varDecl)
    TYPE  reduce using rule 7 (varDecl)


State 9

   10 new_id: ID .

    ';'  reduce using rule 10 (new_id)
    ','  reduce using rule 10 (new_id)
    '('  reduce using rule 10 (new_id)


State 10

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 12
    ','  shift, and go to state 13


State 11

    9 varList: new_id .
   11 funcDecl: TYPE new_id . arguments '{' funcBody '}'

    '('  shift, and go to state 14

    ';'  reduce using rule 9 (varList)
    ','  reduce using rule 9 (varList)

    arguments  go to state 15


State 12

    6 varDecl: TYPE varList ';' .

    $end  reduce using rule 6 (varDecl)
    TYPE  reduce using rule 6 (varDecl)


State 13

    8 varList: varList ',' . new_id

    ID  shift, and go to state 166

    new_id  go to state 16


State 14

   12 arguments: '(' . ')'
   13          | '(' . argsList ')'
   14          | '(' . error ')'

    error  shift, and go to state 17
    TYPE   shift, and go to state 18
    ')'    shift, and go to state 19

    argsList  go to state 20
    arg       go to state 21


State 15

   11 funcDecl: TYPE new_id arguments . '{' funcBody '}'

    '{'  shift, and go to state 22


State 16

    8 varList: varList ',' new_id .

    ';'  reduce using rule 8 (varList)
    ','  reduce using rule 8 (varList)


State 17

   14 arguments: '(' error . ')'

    ')'  shift, and go to state 23


State 18

   17 arg: TYPE . ID

    ID  shift, and go to state 24


State 19

   12 arguments: '(' ')' .

    '{'  reduce using rule 12 (arguments)


State 20

   13 arguments: '(' argsList . ')'
   15 argsList: argsList . ',' arg

    ','  shift, and go to state 25
    ')'  shift, and go to state 26


State 21

   16 argsList: arg .

    ','  reduce using rule 16 (argsList)
    ')'  reduce using rule 16 (argsList)


State 22

   11 funcDecl: TYPE new_id arguments '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)

    funcBody  go to state 27


State 23

   14 arguments: '(' error ')' .

    '{'  reduce using rule 14 (arguments)


State 24

   17 arg: TYPE ID .

    ','  reduce using rule 17 (arg)
    ')'  reduce using rule 17 (arg)


State 25

   15 argsList: argsList ',' . arg

    TYPE  shift, and go to state 18

    arg  go to state 28


State 26

   13 arguments: '(' argsList ')' .

    '{'  reduce using rule 13 (arguments)


State 27

   11 funcDecl: TYPE new_id arguments '{' funcBody . '}'
   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt

    error    shift, and go to state 29
    TYPE     shift, and go to state 167
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '}'      shift, and go to state 46
    '('      shift, and go to state 47

    varDecl     go to state 48
    funcDecl    go to state 49
    stmt        go to state 50
    iterStmt    go to state 51
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 28

   15 argsList: argsList ',' arg .

    ','  reduce using rule 15 (argsList)
    ')'  reduce using rule 15 (argsList)


State 29

   41 exprStmt: error .

    error    reduce using rule 41 (exprStmt)
    TYPE     reduce using rule 41 (exprStmt)
    SETOP    reduce using rule 41 (exprStmt)
    ID       reduce using rule 41 (exprStmt)
    IF       reduce using rule 41 (exprStmt)
    FOR      reduce using rule 41 (exprStmt)
    RETURN   reduce using rule 41 (exprStmt)
    FORALL   reduce using rule 41 (exprStmt)
    IS_SET   reduce using rule 41 (exprStmt)
    EXISTS   reduce using rule 41 (exprStmt)
    NEG      reduce using rule 41 (exprStmt)
    READ     reduce using rule 41 (exprStmt)
    WRITE    reduce using rule 41 (exprStmt)
    WRITELN  reduce using rule 41 (exprStmt)
    INTEGER  reduce using rule 41 (exprStmt)
    FLOAT    reduce using rule 41 (exprStmt)
    EMPTY    reduce using rule 41 (exprStmt)
    ';'      reduce using rule 41 (exprStmt)
    '}'      reduce using rule 41 (exprStmt)
    '('      reduce using rule 41 (exprStmt)


State 30

   84 setExpr: SETOP . '(' pertExpr ')'

    '('  shift, and go to state 72


State 31

   49 var: ID .
   68 factor: ID .
   85 elem: ID .

    RELOP   reduce using rule 68 (factor)
    ARTOP1  reduce using rule 68 (factor)
    ARTOP2  reduce using rule 68 (factor)
    IN      reduce using rule 85 (elem)
    DISJ    reduce using rule 68 (factor)
    CONJ    reduce using rule 68 (factor)
    ';'     reduce using rule 68 (factor)
    '('     reduce using rule 49 (var)
    '='     reduce using rule 49 (var)


State 32

   35 condStmt: IF . cond body
   36         | IF . cond body ELSE body

    '('  shift, and go to state 73

    cond  go to state 74


State 33

   26 iterStmt: FOR . '(' exprStmt exprStmt ')' body
   27         | FOR . '(' exprStmt exprStmt expression ')' body
   30         | FOR . '(' error ')' body

    '('  shift, and go to state 75


State 34

   39 returnStmt: RETURN . exprStmt

    error    shift, and go to state 29
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '('      shift, and go to state 47

    exprStmt    go to state 76
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 35

   28 iterStmt: FORALL . '(' pertExpr ')' body
   29         | FORALL . '(' error ')' body

    '('  shift, and go to state 77


State 36

   72 factor: IS_SET . '(' set ')'

    '('  shift, and go to state 78


State 37

   74 factor: EXISTS . '(' pertExpr ')'
   86 elem: EXISTS . '(' pertExpr ')'

    '('  shift, and go to state 79


State 38

   60 negExpr: NEG . negExpr

    ID       shift, and go to state 168
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var       go to state 80
    negExpr   go to state 81
    relExpr   go to state 63
    artExpr1  go to state 64
    artExpr2  go to state 65
    factor    go to state 66
    constant  go to state 67
    call      go to state 68
    pertExpr  go to state 69
    elem      go to state 71


State 39

   50 inExpr: READ . '(' var ')'

    '('  shift, and go to state 82


State 40

   51 outExpr: WRITE . '(' output ')'

    '('  shift, and go to state 83


State 41

   52 outExpr: WRITELN . '(' output ')'

    '('  shift, and go to state 84


State 42

   75 constant: INTEGER .

    RELOP   reduce using rule 75 (constant)
    ARTOP1  reduce using rule 75 (constant)
    ARTOP2  reduce using rule 75 (constant)
    IN      reduce using rule 75 (constant)
    DISJ    reduce using rule 75 (constant)
    CONJ    reduce using rule 75 (constant)
    ';'     reduce using rule 75 (constant)


State 43

   76 constant: FLOAT .

    RELOP   reduce using rule 76 (constant)
    ARTOP1  reduce using rule 76 (constant)
    ARTOP2  reduce using rule 76 (constant)
    IN      reduce using rule 76 (constant)
    DISJ    reduce using rule 76 (constant)
    CONJ    reduce using rule 76 (constant)
    ';'     reduce using rule 76 (constant)


State 44

   77 constant: EMPTY .

    RELOP   reduce using rule 77 (constant)
    ARTOP1  reduce using rule 77 (constant)
    ARTOP2  reduce using rule 77 (constant)
    IN      reduce using rule 77 (constant)
    DISJ    reduce using rule 77 (constant)
    CONJ    reduce using rule 77 (constant)
    ';'     reduce using rule 77 (constant)


State 45

   42 exprStmt: ';' .

    error    reduce using rule 42 (exprStmt)
    TYPE     reduce using rule 42 (exprStmt)
    SETOP    reduce using rule 42 (exprStmt)
    ID       reduce using rule 42 (exprStmt)
    IF       reduce using rule 42 (exprStmt)
    FOR      reduce using rule 42 (exprStmt)
    RETURN   reduce using rule 42 (exprStmt)
    FORALL   reduce using rule 42 (exprStmt)
    IS_SET   reduce using rule 42 (exprStmt)
    EXISTS   reduce using rule 42 (exprStmt)
    NEG      reduce using rule 42 (exprStmt)
    READ     reduce using rule 42 (exprStmt)
    WRITE    reduce using rule 42 (exprStmt)
    WRITELN  reduce using rule 42 (exprStmt)
    INTEGER  reduce using rule 42 (exprStmt)
    FLOAT    reduce using rule 42 (exprStmt)
    EMPTY    reduce using rule 42 (exprStmt)
    ';'      reduce using rule 42 (exprStmt)
    '}'      reduce using rule 42 (exprStmt)
    '('      reduce using rule 42 (exprStmt)


State 46

   11 funcDecl: TYPE new_id arguments '{' funcBody '}' .

    $end  reduce using rule 11 (funcDecl)
    TYPE  reduce using rule 11 (funcDecl)


State 47

   69 factor: '(' . simpleExpr ')'
   88 elem: '(' . simpleExpr ')'

    ID       shift, and go to state 169
    IS_SET   shift, and go to state 170
    EXISTS   shift, and go to state 171
    NEG      shift, and go to state 172
    INTEGER  shift, and go to state 173
    FLOAT    shift, and go to state 174
    EMPTY    shift, and go to state 175
    '('      shift, and go to state 176

    var         go to state 177
    simpleExpr  go to state 85
    disjExpr    go to state 178
    negExpr     go to state 179
    relExpr     go to state 180
    artExpr1    go to state 181
    artExpr2    go to state 182
    factor      go to state 183
    constant    go to state 184
    call        go to state 185
    pertExpr    go to state 186
    elem        go to state 187


State 48

   19 funcBody: funcBody varDecl .

    error    reduce using rule 19 (funcBody)
    TYPE     reduce using rule 19 (funcBody)
    SETOP    reduce using rule 19 (funcBody)
    ID       reduce using rule 19 (funcBody)
    IF       reduce using rule 19 (funcBody)
    FOR      reduce using rule 19 (funcBody)
    RETURN   reduce using rule 19 (funcBody)
    FORALL   reduce using rule 19 (funcBody)
    IS_SET   reduce using rule 19 (funcBody)
    EXISTS   reduce using rule 19 (funcBody)
    NEG      reduce using rule 19 (funcBody)
    READ     reduce using rule 19 (funcBody)
    WRITE    reduce using rule 19 (funcBody)
    WRITELN  reduce using rule 19 (funcBody)
    INTEGER  reduce using rule 19 (funcBody)
    FLOAT    reduce using rule 19 (funcBody)
    EMPTY    reduce using rule 19 (funcBody)
    ';'      reduce using rule 19 (funcBody)
    '}'      reduce using rule 19 (funcBody)
    '('      reduce using rule 19 (funcBody)


State 49

   20 funcBody: funcBody funcDecl .

    error    reduce using rule 20 (funcBody)
    TYPE     reduce using rule 20 (funcBody)
    SETOP    reduce using rule 20 (funcBody)
    ID       reduce using rule 20 (funcBody)
    IF       reduce using rule 20 (funcBody)
    FOR      reduce using rule 20 (funcBody)
    RETURN   reduce using rule 20 (funcBody)
    FORALL   reduce using rule 20 (funcBody)
    IS_SET   reduce using rule 20 (funcBody)
    EXISTS   reduce using rule 20 (funcBody)
    NEG      reduce using rule 20 (funcBody)
    READ     reduce using rule 20 (funcBody)
    WRITE    reduce using rule 20 (funcBody)
    WRITELN  reduce using rule 20 (funcBody)
    INTEGER  reduce using rule 20 (funcBody)
    FLOAT    reduce using rule 20 (funcBody)
    EMPTY    reduce using rule 20 (funcBody)
    ';'      reduce using rule 20 (funcBody)
    '}'      reduce using rule 20 (funcBody)
    '('      reduce using rule 20 (funcBody)


State 50

   21 funcBody: funcBody stmt .

    error    reduce using rule 21 (funcBody)
    TYPE     reduce using rule 21 (funcBody)
    SETOP    reduce using rule 21 (funcBody)
    ID       reduce using rule 21 (funcBody)
    IF       reduce using rule 21 (funcBody)
    FOR      reduce using rule 21 (funcBody)
    RETURN   reduce using rule 21 (funcBody)
    FORALL   reduce using rule 21 (funcBody)
    IS_SET   reduce using rule 21 (funcBody)
    EXISTS   reduce using rule 21 (funcBody)
    NEG      reduce using rule 21 (funcBody)
    READ     reduce using rule 21 (funcBody)
    WRITE    reduce using rule 21 (funcBody)
    WRITELN  reduce using rule 21 (funcBody)
    INTEGER  reduce using rule 21 (funcBody)
    FLOAT    reduce using rule 21 (funcBody)
    EMPTY    reduce using rule 21 (funcBody)
    ';'      reduce using rule 21 (funcBody)
    '}'      reduce using rule 21 (funcBody)
    '('      reduce using rule 21 (funcBody)


State 51

   24 stmt: iterStmt .

    error    reduce using rule 24 (stmt)
    TYPE     reduce using rule 24 (stmt)
    SETOP    reduce using rule 24 (stmt)
    ID       reduce using rule 24 (stmt)
    IF       reduce using rule 24 (stmt)
    FOR      reduce using rule 24 (stmt)
    RETURN   reduce using rule 24 (stmt)
    FORALL   reduce using rule 24 (stmt)
    IS_SET   reduce using rule 24 (stmt)
    EXISTS   reduce using rule 24 (stmt)
    NEG      reduce using rule 24 (stmt)
    READ     reduce using rule 24 (stmt)
    WRITE    reduce using rule 24 (stmt)
    WRITELN  reduce using rule 24 (stmt)
    INTEGER  reduce using rule 24 (stmt)
    FLOAT    reduce using rule 24 (stmt)
    EMPTY    reduce using rule 24 (stmt)
    ';'      reduce using rule 24 (stmt)
    '}'      reduce using rule 24 (stmt)
    '('      reduce using rule 24 (stmt)


State 52

   25 stmt: condStmt .

    error    reduce using rule 25 (stmt)
    TYPE     reduce using rule 25 (stmt)
    SETOP    reduce using rule 25 (stmt)
    ID       reduce using rule 25 (stmt)
    IF       reduce using rule 25 (stmt)
    FOR      reduce using rule 25 (stmt)
    RETURN   reduce using rule 25 (stmt)
    FORALL   reduce using rule 25 (stmt)
    IS_SET   reduce using rule 25 (stmt)
    EXISTS   reduce using rule 25 (stmt)
    NEG      reduce using rule 25 (stmt)
    READ     reduce using rule 25 (stmt)
    WRITE    reduce using rule 25 (stmt)
    WRITELN  reduce using rule 25 (stmt)
    INTEGER  reduce using rule 25 (stmt)
    FLOAT    reduce using rule 25 (stmt)
    EMPTY    reduce using rule 25 (stmt)
    ';'      reduce using rule 25 (stmt)
    '}'      reduce using rule 25 (stmt)
    '('      reduce using rule 25 (stmt)


State 53

   23 stmt: returnStmt .

    error    reduce using rule 23 (stmt)
    TYPE     reduce using rule 23 (stmt)
    SETOP    reduce using rule 23 (stmt)
    ID       reduce using rule 23 (stmt)
    IF       reduce using rule 23 (stmt)
    FOR      reduce using rule 23 (stmt)
    RETURN   reduce using rule 23 (stmt)
    FORALL   reduce using rule 23 (stmt)
    IS_SET   reduce using rule 23 (stmt)
    EXISTS   reduce using rule 23 (stmt)
    NEG      reduce using rule 23 (stmt)
    READ     reduce using rule 23 (stmt)
    WRITE    reduce using rule 23 (stmt)
    WRITELN  reduce using rule 23 (stmt)
    INTEGER  reduce using rule 23 (stmt)
    FLOAT    reduce using rule 23 (stmt)
    EMPTY    reduce using rule 23 (stmt)
    ';'      reduce using rule 23 (stmt)
    '}'      reduce using rule 23 (stmt)
    '('      reduce using rule 23 (stmt)


State 54

   22 stmt: exprStmt .

    error    reduce using rule 22 (stmt)
    TYPE     reduce using rule 22 (stmt)
    SETOP    reduce using rule 22 (stmt)
    ID       reduce using rule 22 (stmt)
    IF       reduce using rule 22 (stmt)
    FOR      reduce using rule 22 (stmt)
    RETURN   reduce using rule 22 (stmt)
    FORALL   reduce using rule 22 (stmt)
    IS_SET   reduce using rule 22 (stmt)
    EXISTS   reduce using rule 22 (stmt)
    NEG      reduce using rule 22 (stmt)
    READ     reduce using rule 22 (stmt)
    WRITE    reduce using rule 22 (stmt)
    WRITELN  reduce using rule 22 (stmt)
    INTEGER  reduce using rule 22 (stmt)
    FLOAT    reduce using rule 22 (stmt)
    EMPTY    reduce using rule 22 (stmt)
    ';'      reduce using rule 22 (stmt)
    '}'      reduce using rule 22 (stmt)
    '('      reduce using rule 22 (stmt)


State 55

   40 exprStmt: expression . ';'

    ';'  shift, and go to state 86


State 56

   43 expression: assign .

    ';'  reduce using rule 43 (expression)


State 57

   48 assign: var . '=' simpleExpr
   78 call: var . '(' params ')'

    '('  shift, and go to state 87
    '='  shift, and go to state 88


State 58

   44 expression: inExpr .

    ';'  reduce using rule 44 (expression)


State 59

   45 expression: outExpr .

    ';'  reduce using rule 45 (expression)


State 60

   46 expression: simpleExpr .
   56 simpleExpr: simpleExpr . DISJ disjExpr

    DISJ  shift, and go to state 89

    ';'  reduce using rule 46 (expression)


State 61

   57 simpleExpr: disjExpr .
   58 disjExpr: disjExpr . CONJ negExpr

    CONJ  shift, and go to state 90

    DISJ  reduce using rule 57 (simpleExpr)
    ';'   reduce using rule 57 (simpleExpr)


State 62

   59 disjExpr: negExpr .

    DISJ  reduce using rule 59 (disjExpr)
    CONJ  reduce using rule 59 (disjExpr)
    ';'   reduce using rule 59 (disjExpr)


State 63

   61 negExpr: relExpr .
   62 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 91

    DISJ  reduce using rule 61 (negExpr)
    CONJ  reduce using rule 61 (negExpr)
    ';'   reduce using rule 61 (negExpr)


State 64

   63 relExpr: artExpr1 .
   64 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 92

    RELOP  reduce using rule 63 (relExpr)
    DISJ   reduce using rule 63 (relExpr)
    CONJ   reduce using rule 63 (relExpr)
    ';'    reduce using rule 63 (relExpr)


State 65

   65 artExpr1: artExpr2 .
   66 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 93

    RELOP   reduce using rule 65 (artExpr1)
    ARTOP1  reduce using rule 65 (artExpr1)
    DISJ    reduce using rule 65 (artExpr1)
    CONJ    reduce using rule 65 (artExpr1)
    ';'     reduce using rule 65 (artExpr1)


State 66

   67 artExpr2: factor .

    RELOP   reduce using rule 67 (artExpr2)
    ARTOP1  reduce using rule 67 (artExpr2)
    ARTOP2  reduce using rule 67 (artExpr2)
    DISJ    reduce using rule 67 (artExpr2)
    CONJ    reduce using rule 67 (artExpr2)
    ';'     reduce using rule 67 (artExpr2)


State 67

   70 factor: constant .
   89 elem: constant .

    RELOP   reduce using rule 70 (factor)
    ARTOP1  reduce using rule 70 (factor)
    ARTOP2  reduce using rule 70 (factor)
    IN      reduce using rule 89 (elem)
    DISJ    reduce using rule 70 (factor)
    CONJ    reduce using rule 70 (factor)
    ';'     reduce using rule 70 (factor)


State 68

   71 factor: call .
   87 elem: call .

    RELOP   reduce using rule 71 (factor)
    ARTOP1  reduce using rule 71 (factor)
    ARTOP2  reduce using rule 71 (factor)
    IN      reduce using rule 87 (elem)
    DISJ    reduce using rule 71 (factor)
    CONJ    reduce using rule 71 (factor)
    ';'     reduce using rule 71 (factor)


State 69

   73 factor: pertExpr .

    RELOP   reduce using rule 73 (factor)
    ARTOP1  reduce using rule 73 (factor)
    ARTOP2  reduce using rule 73 (factor)
    DISJ    reduce using rule 73 (factor)
    CONJ    reduce using rule 73 (factor)
    ';'     reduce using rule 73 (factor)


State 70

   47 expression: setExpr .

    ';'  reduce using rule 47 (expression)


State 71

   83 pertExpr: elem . IN set

    IN  shift, and go to state 94


State 72

   84 setExpr: SETOP '(' . pertExpr ')'

    ID       shift, and go to state 95
    EXISTS   shift, and go to state 96
    INTEGER  shift, and go to state 188
    FLOAT    shift, and go to state 189
    EMPTY    shift, and go to state 190
    '('      shift, and go to state 97

    var       go to state 191
    constant  go to state 98
    call      go to state 99
    pertExpr  go to state 100
    elem      go to state 192


State 73

   37 cond: '(' . expression ')'
   38     | '(' . error ')'

    error    shift, and go to state 101
    SETOP    shift, and go to state 193
    ID       shift, and go to state 194
    IS_SET   shift, and go to state 170
    EXISTS   shift, and go to state 171
    NEG      shift, and go to state 172
    READ     shift, and go to state 195
    WRITE    shift, and go to state 196
    WRITELN  shift, and go to state 197
    INTEGER  shift, and go to state 173
    FLOAT    shift, and go to state 174
    EMPTY    shift, and go to state 175
    '('      shift, and go to state 176

    expression  go to state 102
    assign      go to state 198
    var         go to state 199
    inExpr      go to state 200
    outExpr     go to state 201
    simpleExpr  go to state 202
    disjExpr    go to state 178
    negExpr     go to state 179
    relExpr     go to state 180
    artExpr1    go to state 181
    artExpr2    go to state 182
    factor      go to state 183
    constant    go to state 184
    call        go to state 185
    pertExpr    go to state 186
    setExpr     go to state 203
    elem        go to state 187


State 74

   35 condStmt: IF cond . body
   36         | IF cond . body ELSE body

    error    shift, and go to state 204
    TYPE     shift, and go to state 205
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 206
    FOR      shift, and go to state 207
    RETURN   shift, and go to state 208
    FORALL   shift, and go to state 209
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 210
    '{'      shift, and go to state 103
    '('      shift, and go to state 47

    varDecl     go to state 104
    funcDecl    go to state 105
    stmt        go to state 106
    iterStmt    go to state 211
    body        go to state 107
    condStmt    go to state 212
    returnStmt  go to state 213
    exprStmt    go to state 214
    expression  go to state 215
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 75

   26 iterStmt: FOR '(' . exprStmt exprStmt ')' body
   27         | FOR '(' . exprStmt exprStmt expression ')' body
   30         | FOR '(' . error ')' body

    error    shift, and go to state 108
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 216
    '('      shift, and go to state 47

    exprStmt    go to state 109
    expression  go to state 217
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 76

   39 returnStmt: RETURN exprStmt .

    error    reduce using rule 39 (returnStmt)
    TYPE     reduce using rule 39 (returnStmt)
    SETOP    reduce using rule 39 (returnStmt)
    ID       reduce using rule 39 (returnStmt)
    IF       reduce using rule 39 (returnStmt)
    FOR      reduce using rule 39 (returnStmt)
    RETURN   reduce using rule 39 (returnStmt)
    FORALL   reduce using rule 39 (returnStmt)
    IS_SET   reduce using rule 39 (returnStmt)
    EXISTS   reduce using rule 39 (returnStmt)
    NEG      reduce using rule 39 (returnStmt)
    READ     reduce using rule 39 (returnStmt)
    WRITE    reduce using rule 39 (returnStmt)
    WRITELN  reduce using rule 39 (returnStmt)
    INTEGER  reduce using rule 39 (returnStmt)
    FLOAT    reduce using rule 39 (returnStmt)
    EMPTY    reduce using rule 39 (returnStmt)
    ';'      reduce using rule 39 (returnStmt)
    '}'      reduce using rule 39 (returnStmt)
    '('      reduce using rule 39 (returnStmt)


State 77

   28 iterStmt: FORALL '(' . pertExpr ')' body
   29         | FORALL '(' . error ')' body

    error    shift, and go to state 110
    ID       shift, and go to state 95
    EXISTS   shift, and go to state 96
    INTEGER  shift, and go to state 188
    FLOAT    shift, and go to state 189
    EMPTY    shift, and go to state 190
    '('      shift, and go to state 97

    var       go to state 191
    constant  go to state 98
    call      go to state 99
    pertExpr  go to state 111
    elem      go to state 192


State 78

   72 factor: IS_SET '(' . set ')'

    SETOP  shift, and go to state 193
    ID     shift, and go to state 112

    setExpr  go to state 113
    set      go to state 114


State 79

   74 factor: EXISTS '(' . pertExpr ')'
   86 elem: EXISTS '(' . pertExpr ')'

    ID       shift, and go to state 95
    EXISTS   shift, and go to state 96
    INTEGER  shift, and go to state 188
    FLOAT    shift, and go to state 189
    EMPTY    shift, and go to state 190
    '('      shift, and go to state 97

    var       go to state 191
    constant  go to state 98
    call      go to state 99
    pertExpr  go to state 115
    elem      go to state 192


State 80

   78 call: var . '(' params ')'

    '('  shift, and go to state 87


State 81

   60 negExpr: NEG negExpr .

    DISJ  reduce using rule 60 (negExpr)
    CONJ  reduce using rule 60 (negExpr)
    ';'   reduce using rule 60 (negExpr)


State 82

   50 inExpr: READ '(' . var ')'

    ID  shift, and go to state 116

    var  go to state 117


State 83

   51 outExpr: WRITE '(' . output ')'

    ID      shift, and go to state 118
    CHAR    shift, and go to state 119
    STRING  shift, and go to state 120

    output  go to state 121


State 84

   52 outExpr: WRITELN '(' . output ')'

    ID      shift, and go to state 118
    CHAR    shift, and go to state 119
    STRING  shift, and go to state 120

    output  go to state 122


State 85

   56 simpleExpr: simpleExpr . DISJ disjExpr
   69 factor: '(' simpleExpr . ')'
   88 elem: '(' simpleExpr . ')'

    DISJ  shift, and go to state 218
    ')'   shift, and go to state 123


State 86

   40 exprStmt: expression ';' .

    error    reduce using rule 40 (exprStmt)
    TYPE     reduce using rule 40 (exprStmt)
    SETOP    reduce using rule 40 (exprStmt)
    ID       reduce using rule 40 (exprStmt)
    IF       reduce using rule 40 (exprStmt)
    FOR      reduce using rule 40 (exprStmt)
    RETURN   reduce using rule 40 (exprStmt)
    FORALL   reduce using rule 40 (exprStmt)
    IS_SET   reduce using rule 40 (exprStmt)
    EXISTS   reduce using rule 40 (exprStmt)
    NEG      reduce using rule 40 (exprStmt)
    READ     reduce using rule 40 (exprStmt)
    WRITE    reduce using rule 40 (exprStmt)
    WRITELN  reduce using rule 40 (exprStmt)
    INTEGER  reduce using rule 40 (exprStmt)
    FLOAT    reduce using rule 40 (exprStmt)
    EMPTY    reduce using rule 40 (exprStmt)
    ';'      reduce using rule 40 (exprStmt)
    '}'      reduce using rule 40 (exprStmt)
    '('      reduce using rule 40 (exprStmt)


State 87

   78 call: var '(' . params ')'

    ID       shift, and go to state 219
    IS_SET   shift, and go to state 220
    EXISTS   shift, and go to state 221
    NEG      shift, and go to state 222
    INTEGER  shift, and go to state 223
    FLOAT    shift, and go to state 224
    EMPTY    shift, and go to state 225
    '('      shift, and go to state 226

    ')'  reduce using rule 79 (params)

    var         go to state 227
    simpleExpr  go to state 124
    disjExpr    go to state 228
    negExpr     go to state 229
    relExpr     go to state 230
    artExpr1    go to state 231
    artExpr2    go to state 232
    factor      go to state 233
    constant    go to state 234
    call        go to state 235
    params      go to state 125
    paramList   go to state 126
    pertExpr    go to state 236
    elem        go to state 237


State 88

   48 assign: var '=' . simpleExpr

    ID       shift, and go to state 168
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var         go to state 80
    simpleExpr  go to state 127
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    elem        go to state 71


State 89

   56 simpleExpr: simpleExpr DISJ . disjExpr

    ID       shift, and go to state 168
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var       go to state 80
    disjExpr  go to state 128
    negExpr   go to state 62
    relExpr   go to state 63
    artExpr1  go to state 64
    artExpr2  go to state 65
    factor    go to state 66
    constant  go to state 67
    call      go to state 68
    pertExpr  go to state 69
    elem      go to state 71


State 90

   58 disjExpr: disjExpr CONJ . negExpr

    ID       shift, and go to state 168
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var       go to state 80
    negExpr   go to state 129
    relExpr   go to state 63
    artExpr1  go to state 64
    artExpr2  go to state 65
    factor    go to state 66
    constant  go to state 67
    call      go to state 68
    pertExpr  go to state 69
    elem      go to state 71


State 91

   62 relExpr: relExpr RELOP . artExpr1

    ID       shift, and go to state 168
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var       go to state 80
    artExpr1  go to state 130
    artExpr2  go to state 65
    factor    go to state 66
    constant  go to state 67
    call      go to state 68
    pertExpr  go to state 69
    elem      go to state 71


State 92

   64 artExpr1: artExpr1 ARTOP1 . artExpr2

    ID       shift, and go to state 168
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var       go to state 80
    artExpr2  go to state 131
    factor    go to state 66
    constant  go to state 67
    call      go to state 68
    pertExpr  go to state 69
    elem      go to state 71


State 93

   66 artExpr2: artExpr2 ARTOP2 . factor

    ID       shift, and go to state 168
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    '('      shift, and go to state 47

    var       go to state 80
    factor    go to state 132
    constant  go to state 67
    call      go to state 68
    pertExpr  go to state 69
    elem      go to state 71


State 94

   83 pertExpr: elem IN . set

    SETOP  shift, and go to state 238
    ID     shift, and go to state 239

    setExpr  go to state 240
    set      go to state 133


State 95

   49 var: ID .
   85 elem: ID .

    IN   reduce using rule 85 (elem)
    '('  reduce using rule 49 (var)


State 96

   86 elem: EXISTS . '(' pertExpr ')'

    '('  shift, and go to state 134


State 97

   88 elem: '(' . simpleExpr ')'

    ID       shift, and go to state 169
    IS_SET   shift, and go to state 170
    EXISTS   shift, and go to state 171
    NEG      shift, and go to state 172
    INTEGER  shift, and go to state 173
    FLOAT    shift, and go to state 174
    EMPTY    shift, and go to state 175
    '('      shift, and go to state 176

    var         go to state 177
    simpleExpr  go to state 135
    disjExpr    go to state 178
    negExpr     go to state 179
    relExpr     go to state 180
    artExpr1    go to state 181
    artExpr2    go to state 182
    factor      go to state 183
    constant    go to state 184
    call        go to state 185
    pertExpr    go to state 186
    elem        go to state 187


State 98

   89 elem: constant .

    IN  reduce using rule 89 (elem)


State 99

   87 elem: call .

    IN  reduce using rule 87 (elem)


State 100

   84 setExpr: SETOP '(' pertExpr . ')'

    ')'  shift, and go to state 136


State 101

   38 cond: '(' error . ')'

    ')'  shift, and go to state 137


State 102

   37 cond: '(' expression . ')'

    ')'  shift, and go to state 138


State 103

   31 body: '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)

    funcBody  go to state 139


State 104

   33 body: varDecl .

    error    reduce using rule 33 (body)
    TYPE     reduce using rule 33 (body)
    SETOP    reduce using rule 33 (body)
    ID       reduce using rule 33 (body)
    IF       reduce using rule 33 (body)
    ELSE     reduce using rule 33 (body)
    FOR      reduce using rule 33 (body)
    RETURN   reduce using rule 33 (body)
    FORALL   reduce using rule 33 (body)
    IS_SET   reduce using rule 33 (body)
    EXISTS   reduce using rule 33 (body)
    NEG      reduce using rule 33 (body)
    READ     reduce using rule 33 (body)
    WRITE    reduce using rule 33 (body)
    WRITELN  reduce using rule 33 (body)
    INTEGER  reduce using rule 33 (body)
    FLOAT    reduce using rule 33 (body)
    EMPTY    reduce using rule 33 (body)
    ';'      reduce using rule 33 (body)
    '}'      reduce using rule 33 (body)
    '('      reduce using rule 33 (body)


State 105

   34 body: funcDecl .

    error    reduce using rule 34 (body)
    TYPE     reduce using rule 34 (body)
    SETOP    reduce using rule 34 (body)
    ID       reduce using rule 34 (body)
    IF       reduce using rule 34 (body)
    ELSE     reduce using rule 34 (body)
    FOR      reduce using rule 34 (body)
    RETURN   reduce using rule 34 (body)
    FORALL   reduce using rule 34 (body)
    IS_SET   reduce using rule 34 (body)
    EXISTS   reduce using rule 34 (body)
    NEG      reduce using rule 34 (body)
    READ     reduce using rule 34 (body)
    WRITE    reduce using rule 34 (body)
    WRITELN  reduce using rule 34 (body)
    INTEGER  reduce using rule 34 (body)
    FLOAT    reduce using rule 34 (body)
    EMPTY    reduce using rule 34 (body)
    ';'      reduce using rule 34 (body)
    '}'      reduce using rule 34 (body)
    '('      reduce using rule 34 (body)


State 106

   32 body: stmt .

    error    reduce using rule 32 (body)
    TYPE     reduce using rule 32 (body)
    SETOP    reduce using rule 32 (body)
    ID       reduce using rule 32 (body)
    IF       reduce using rule 32 (body)
    ELSE     reduce using rule 32 (body)
    FOR      reduce using rule 32 (body)
    RETURN   reduce using rule 32 (body)
    FORALL   reduce using rule 32 (body)
    IS_SET   reduce using rule 32 (body)
    EXISTS   reduce using rule 32 (body)
    NEG      reduce using rule 32 (body)
    READ     reduce using rule 32 (body)
    WRITE    reduce using rule 32 (body)
    WRITELN  reduce using rule 32 (body)
    INTEGER  reduce using rule 32 (body)
    FLOAT    reduce using rule 32 (body)
    EMPTY    reduce using rule 32 (body)
    ';'      reduce using rule 32 (body)
    '}'      reduce using rule 32 (body)
    '('      reduce using rule 32 (body)


State 107

   35 condStmt: IF cond body .
   36         | IF cond body . ELSE body

    ELSE  shift, and go to state 140

    error    reduce using rule 35 (condStmt)
    TYPE     reduce using rule 35 (condStmt)
    SETOP    reduce using rule 35 (condStmt)
    ID       reduce using rule 35 (condStmt)
    IF       reduce using rule 35 (condStmt)
    FOR      reduce using rule 35 (condStmt)
    RETURN   reduce using rule 35 (condStmt)
    FORALL   reduce using rule 35 (condStmt)
    IS_SET   reduce using rule 35 (condStmt)
    EXISTS   reduce using rule 35 (condStmt)
    NEG      reduce using rule 35 (condStmt)
    READ     reduce using rule 35 (condStmt)
    WRITE    reduce using rule 35 (condStmt)
    WRITELN  reduce using rule 35 (condStmt)
    INTEGER  reduce using rule 35 (condStmt)
    FLOAT    reduce using rule 35 (condStmt)
    EMPTY    reduce using rule 35 (condStmt)
    ';'      reduce using rule 35 (condStmt)
    '}'      reduce using rule 35 (condStmt)
    '('      reduce using rule 35 (condStmt)


State 108

   30 iterStmt: FOR '(' error . ')' body
   41 exprStmt: error .

    ')'  shift, and go to state 141

    error    reduce using rule 41 (exprStmt)
    SETOP    reduce using rule 41 (exprStmt)
    ID       reduce using rule 41 (exprStmt)
    IS_SET   reduce using rule 41 (exprStmt)
    EXISTS   reduce using rule 41 (exprStmt)
    NEG      reduce using rule 41 (exprStmt)
    READ     reduce using rule 41 (exprStmt)
    WRITE    reduce using rule 41 (exprStmt)
    WRITELN  reduce using rule 41 (exprStmt)
    INTEGER  reduce using rule 41 (exprStmt)
    FLOAT    reduce using rule 41 (exprStmt)
    EMPTY    reduce using rule 41 (exprStmt)
    ';'      reduce using rule 41 (exprStmt)
    '('      reduce using rule 41 (exprStmt)


State 109

   26 iterStmt: FOR '(' exprStmt . exprStmt ')' body
   27         | FOR '(' exprStmt . exprStmt expression ')' body

    error    shift, and go to state 241
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 242
    '('      shift, and go to state 47

    exprStmt    go to state 142
    expression  go to state 243
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 110

   29 iterStmt: FORALL '(' error . ')' body

    ')'  shift, and go to state 143


State 111

   28 iterStmt: FORALL '(' pertExpr . ')' body

    ')'  shift, and go to state 144


State 112

   90 set: ID .

    ')'  reduce using rule 90 (set)


State 113

   91 set: setExpr .

    ')'  reduce using rule 91 (set)


State 114

   72 factor: IS_SET '(' set . ')'

    ')'  shift, and go to state 145


State 115

   74 factor: EXISTS '(' pertExpr . ')'
   86 elem: EXISTS '(' pertExpr . ')'

    ')'  shift, and go to state 146


State 116

   49 var: ID .

    ')'  reduce using rule 49 (var)


State 117

   50 inExpr: READ '(' var . ')'

    ')'  shift, and go to state 147


State 118

   53 output: ID .

    ')'  reduce using rule 53 (output)


State 119

   54 output: CHAR .

    ')'  reduce using rule 54 (output)


State 120

   55 output: STRING .

    ')'  reduce using rule 55 (output)


State 121

   51 outExpr: WRITE '(' output . ')'

    ')'  shift, and go to state 148


State 122

   52 outExpr: WRITELN '(' output . ')'

    ')'  shift, and go to state 149


State 123

   69 factor: '(' simpleExpr ')' .
   88 elem: '(' simpleExpr ')' .

    RELOP   reduce using rule 69 (factor)
    ARTOP1  reduce using rule 69 (factor)
    ARTOP2  reduce using rule 69 (factor)
    IN      reduce using rule 88 (elem)
    DISJ    reduce using rule 69 (factor)
    CONJ    reduce using rule 69 (factor)
    ';'     reduce using rule 69 (factor)


State 124

   56 simpleExpr: simpleExpr . DISJ disjExpr
   82 paramList: simpleExpr .

    DISJ  shift, and go to state 244

    ','  reduce using rule 82 (paramList)
    ')'  reduce using rule 82 (paramList)


State 125

   78 call: var '(' params . ')'

    ')'  shift, and go to state 150


State 126

   80 params: paramList .
   81 paramList: paramList . ',' simpleExpr

    ','  shift, and go to state 151

    ')'  reduce using rule 80 (params)


State 127

   48 assign: var '=' simpleExpr .
   56 simpleExpr: simpleExpr . DISJ disjExpr

    DISJ  shift, and go to state 89

    ';'  reduce using rule 48 (assign)


State 128

   56 simpleExpr: simpleExpr DISJ disjExpr .
   58 disjExpr: disjExpr . CONJ negExpr

    CONJ  shift, and go to state 90

    DISJ  reduce using rule 56 (simpleExpr)
    ';'   reduce using rule 56 (simpleExpr)


State 129

   58 disjExpr: disjExpr CONJ negExpr .

    DISJ  reduce using rule 58 (disjExpr)
    CONJ  reduce using rule 58 (disjExpr)
    ';'   reduce using rule 58 (disjExpr)


State 130

   62 relExpr: relExpr RELOP artExpr1 .
   64 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 92

    RELOP  reduce using rule 62 (relExpr)
    DISJ   reduce using rule 62 (relExpr)
    CONJ   reduce using rule 62 (relExpr)
    ';'    reduce using rule 62 (relExpr)


State 131

   64 artExpr1: artExpr1 ARTOP1 artExpr2 .
   66 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 93

    RELOP   reduce using rule 64 (artExpr1)
    ARTOP1  reduce using rule 64 (artExpr1)
    DISJ    reduce using rule 64 (artExpr1)
    CONJ    reduce using rule 64 (artExpr1)
    ';'     reduce using rule 64 (artExpr1)


State 132

   66 artExpr2: artExpr2 ARTOP2 factor .

    RELOP   reduce using rule 66 (artExpr2)
    ARTOP1  reduce using rule 66 (artExpr2)
    ARTOP2  reduce using rule 66 (artExpr2)
    DISJ    reduce using rule 66 (artExpr2)
    CONJ    reduce using rule 66 (artExpr2)
    ';'     reduce using rule 66 (artExpr2)


State 133

   83 pertExpr: elem IN set .

    RELOP   reduce using rule 83 (pertExpr)
    ARTOP1  reduce using rule 83 (pertExpr)
    ARTOP2  reduce using rule 83 (pertExpr)
    DISJ    reduce using rule 83 (pertExpr)
    CONJ    reduce using rule 83 (pertExpr)
    ';'     reduce using rule 83 (pertExpr)


State 134

   86 elem: EXISTS '(' . pertExpr ')'

    ID       shift, and go to state 95
    EXISTS   shift, and go to state 96
    INTEGER  shift, and go to state 188
    FLOAT    shift, and go to state 189
    EMPTY    shift, and go to state 190
    '('      shift, and go to state 97

    var       go to state 191
    constant  go to state 98
    call      go to state 99
    pertExpr  go to state 152
    elem      go to state 192


State 135

   56 simpleExpr: simpleExpr . DISJ disjExpr
   88 elem: '(' simpleExpr . ')'

    DISJ  shift, and go to state 218
    ')'   shift, and go to state 153


State 136

   84 setExpr: SETOP '(' pertExpr ')' .

    ';'  reduce using rule 84 (setExpr)


State 137

   38 cond: '(' error ')' .

    error    reduce using rule 38 (cond)
    TYPE     reduce using rule 38 (cond)
    SETOP    reduce using rule 38 (cond)
    ID       reduce using rule 38 (cond)
    IF       reduce using rule 38 (cond)
    FOR      reduce using rule 38 (cond)
    RETURN   reduce using rule 38 (cond)
    FORALL   reduce using rule 38 (cond)
    IS_SET   reduce using rule 38 (cond)
    EXISTS   reduce using rule 38 (cond)
    NEG      reduce using rule 38 (cond)
    READ     reduce using rule 38 (cond)
    WRITE    reduce using rule 38 (cond)
    WRITELN  reduce using rule 38 (cond)
    INTEGER  reduce using rule 38 (cond)
    FLOAT    reduce using rule 38 (cond)
    EMPTY    reduce using rule 38 (cond)
    ';'      reduce using rule 38 (cond)
    '{'      reduce using rule 38 (cond)
    '('      reduce using rule 38 (cond)


State 138

   37 cond: '(' expression ')' .

    error    reduce using rule 37 (cond)
    TYPE     reduce using rule 37 (cond)
    SETOP    reduce using rule 37 (cond)
    ID       reduce using rule 37 (cond)
    IF       reduce using rule 37 (cond)
    FOR      reduce using rule 37 (cond)
    RETURN   reduce using rule 37 (cond)
    FORALL   reduce using rule 37 (cond)
    IS_SET   reduce using rule 37 (cond)
    EXISTS   reduce using rule 37 (cond)
    NEG      reduce using rule 37 (cond)
    READ     reduce using rule 37 (cond)
    WRITE    reduce using rule 37 (cond)
    WRITELN  reduce using rule 37 (cond)
    INTEGER  reduce using rule 37 (cond)
    FLOAT    reduce using rule 37 (cond)
    EMPTY    reduce using rule 37 (cond)
    ';'      reduce using rule 37 (cond)
    '{'      reduce using rule 37 (cond)
    '('      reduce using rule 37 (cond)


State 139

   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt
   31 body: '{' funcBody . '}'

    error    shift, and go to state 29
    TYPE     shift, and go to state 167
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '}'      shift, and go to state 154
    '('      shift, and go to state 47

    varDecl     go to state 48
    funcDecl    go to state 49
    stmt        go to state 50
    iterStmt    go to state 51
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 140

   36 condStmt: IF cond body ELSE . body

    error    shift, and go to state 29
    TYPE     shift, and go to state 167
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '{'      shift, and go to state 245
    '('      shift, and go to state 47

    varDecl     go to state 246
    funcDecl    go to state 247
    stmt        go to state 248
    iterStmt    go to state 51
    body        go to state 155
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 141

   30 iterStmt: FOR '(' error ')' . body

    error    shift, and go to state 29
    TYPE     shift, and go to state 167
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '{'      shift, and go to state 245
    '('      shift, and go to state 47

    varDecl     go to state 246
    funcDecl    go to state 247
    stmt        go to state 248
    iterStmt    go to state 51
    body        go to state 156
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 142

   26 iterStmt: FOR '(' exprStmt exprStmt . ')' body
   27         | FOR '(' exprStmt exprStmt . expression ')' body

    SETOP    shift, and go to state 193
    ID       shift, and go to state 194
    IS_SET   shift, and go to state 170
    EXISTS   shift, and go to state 171
    NEG      shift, and go to state 172
    READ     shift, and go to state 195
    WRITE    shift, and go to state 196
    WRITELN  shift, and go to state 197
    INTEGER  shift, and go to state 173
    FLOAT    shift, and go to state 174
    EMPTY    shift, and go to state 175
    '('      shift, and go to state 176
    ')'      shift, and go to state 157

    expression  go to state 158
    assign      go to state 198
    var         go to state 199
    inExpr      go to state 200
    outExpr     go to state 201
    simpleExpr  go to state 202
    disjExpr    go to state 178
    negExpr     go to state 179
    relExpr     go to state 180
    artExpr1    go to state 181
    artExpr2    go to state 182
    factor      go to state 183
    constant    go to state 184
    call        go to state 185
    pertExpr    go to state 186
    setExpr     go to state 203
    elem        go to state 187


State 143

   29 iterStmt: FORALL '(' error ')' . body

    error    shift, and go to state 29
    TYPE     shift, and go to state 167
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '{'      shift, and go to state 245
    '('      shift, and go to state 47

    varDecl     go to state 246
    funcDecl    go to state 247
    stmt        go to state 248
    iterStmt    go to state 51
    body        go to state 159
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 144

   28 iterStmt: FORALL '(' pertExpr ')' . body

    error    shift, and go to state 29
    TYPE     shift, and go to state 167
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '{'      shift, and go to state 245
    '('      shift, and go to state 47

    varDecl     go to state 246
    funcDecl    go to state 247
    stmt        go to state 248
    iterStmt    go to state 51
    body        go to state 160
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 145

   72 factor: IS_SET '(' set ')' .

    RELOP   reduce using rule 72 (factor)
    ARTOP1  reduce using rule 72 (factor)
    ARTOP2  reduce using rule 72 (factor)
    DISJ    reduce using rule 72 (factor)
    CONJ    reduce using rule 72 (factor)
    ';'     reduce using rule 72 (factor)


State 146

   74 factor: EXISTS '(' pertExpr ')' .
   86 elem: EXISTS '(' pertExpr ')' .

    RELOP   reduce using rule 74 (factor)
    ARTOP1  reduce using rule 74 (factor)
    ARTOP2  reduce using rule 74 (factor)
    IN      reduce using rule 86 (elem)
    DISJ    reduce using rule 74 (factor)
    CONJ    reduce using rule 74 (factor)
    ';'     reduce using rule 74 (factor)


State 147

   50 inExpr: READ '(' var ')' .

    ';'  reduce using rule 50 (inExpr)


State 148

   51 outExpr: WRITE '(' output ')' .

    ';'  reduce using rule 51 (outExpr)


State 149

   52 outExpr: WRITELN '(' output ')' .

    ';'  reduce using rule 52 (outExpr)


State 150

   78 call: var '(' params ')' .

    RELOP   reduce using rule 78 (call)
    ARTOP1  reduce using rule 78 (call)
    ARTOP2  reduce using rule 78 (call)
    IN      reduce using rule 78 (call)
    DISJ    reduce using rule 78 (call)
    CONJ    reduce using rule 78 (call)
    ';'     reduce using rule 78 (call)


State 151

   81 paramList: paramList ',' . simpleExpr

    ID       shift, and go to state 219
    IS_SET   shift, and go to state 220
    EXISTS   shift, and go to state 221
    NEG      shift, and go to state 222
    INTEGER  shift, and go to state 223
    FLOAT    shift, and go to state 224
    EMPTY    shift, and go to state 225
    '('      shift, and go to state 226

    var         go to state 227
    simpleExpr  go to state 161
    disjExpr    go to state 228
    negExpr     go to state 229
    relExpr     go to state 230
    artExpr1    go to state 231
    artExpr2    go to state 232
    factor      go to state 233
    constant    go to state 234
    call        go to state 235
    pertExpr    go to state 236
    elem        go to state 237


State 152

   86 elem: EXISTS '(' pertExpr . ')'

    ')'  shift, and go to state 162


State 153

   88 elem: '(' simpleExpr ')' .

    IN  reduce using rule 88 (elem)


State 154

   31 body: '{' funcBody '}' .

    error    reduce using rule 31 (body)
    TYPE     reduce using rule 31 (body)
    SETOP    reduce using rule 31 (body)
    ID       reduce using rule 31 (body)
    IF       reduce using rule 31 (body)
    ELSE     reduce using rule 31 (body)
    FOR      reduce using rule 31 (body)
    RETURN   reduce using rule 31 (body)
    FORALL   reduce using rule 31 (body)
    IS_SET   reduce using rule 31 (body)
    EXISTS   reduce using rule 31 (body)
    NEG      reduce using rule 31 (body)
    READ     reduce using rule 31 (body)
    WRITE    reduce using rule 31 (body)
    WRITELN  reduce using rule 31 (body)
    INTEGER  reduce using rule 31 (body)
    FLOAT    reduce using rule 31 (body)
    EMPTY    reduce using rule 31 (body)
    ';'      reduce using rule 31 (body)
    '}'      reduce using rule 31 (body)
    '('      reduce using rule 31 (body)


State 155

   36 condStmt: IF cond body ELSE body .

    error    reduce using rule 36 (condStmt)
    TYPE     reduce using rule 36 (condStmt)
    SETOP    reduce using rule 36 (condStmt)
    ID       reduce using rule 36 (condStmt)
    IF       reduce using rule 36 (condStmt)
    FOR      reduce using rule 36 (condStmt)
    RETURN   reduce using rule 36 (condStmt)
    FORALL   reduce using rule 36 (condStmt)
    IS_SET   reduce using rule 36 (condStmt)
    EXISTS   reduce using rule 36 (condStmt)
    NEG      reduce using rule 36 (condStmt)
    READ     reduce using rule 36 (condStmt)
    WRITE    reduce using rule 36 (condStmt)
    WRITELN  reduce using rule 36 (condStmt)
    INTEGER  reduce using rule 36 (condStmt)
    FLOAT    reduce using rule 36 (condStmt)
    EMPTY    reduce using rule 36 (condStmt)
    ';'      reduce using rule 36 (condStmt)
    '}'      reduce using rule 36 (condStmt)
    '('      reduce using rule 36 (condStmt)


State 156

   30 iterStmt: FOR '(' error ')' body .

    error    reduce using rule 30 (iterStmt)
    TYPE     reduce using rule 30 (iterStmt)
    SETOP    reduce using rule 30 (iterStmt)
    ID       reduce using rule 30 (iterStmt)
    IF       reduce using rule 30 (iterStmt)
    FOR      reduce using rule 30 (iterStmt)
    RETURN   reduce using rule 30 (iterStmt)
    FORALL   reduce using rule 30 (iterStmt)
    IS_SET   reduce using rule 30 (iterStmt)
    EXISTS   reduce using rule 30 (iterStmt)
    NEG      reduce using rule 30 (iterStmt)
    READ     reduce using rule 30 (iterStmt)
    WRITE    reduce using rule 30 (iterStmt)
    WRITELN  reduce using rule 30 (iterStmt)
    INTEGER  reduce using rule 30 (iterStmt)
    FLOAT    reduce using rule 30 (iterStmt)
    EMPTY    reduce using rule 30 (iterStmt)
    ';'      reduce using rule 30 (iterStmt)
    '}'      reduce using rule 30 (iterStmt)
    '('      reduce using rule 30 (iterStmt)


State 157

   26 iterStmt: FOR '(' exprStmt exprStmt ')' . body

    error    shift, and go to state 29
    TYPE     shift, and go to state 167
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '{'      shift, and go to state 245
    '('      shift, and go to state 47

    varDecl     go to state 246
    funcDecl    go to state 247
    stmt        go to state 248
    iterStmt    go to state 51
    body        go to state 163
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 158

   27 iterStmt: FOR '(' exprStmt exprStmt expression . ')' body

    ')'  shift, and go to state 164


State 159

   29 iterStmt: FORALL '(' error ')' body .

    error    reduce using rule 29 (iterStmt)
    TYPE     reduce using rule 29 (iterStmt)
    SETOP    reduce using rule 29 (iterStmt)
    ID       reduce using rule 29 (iterStmt)
    IF       reduce using rule 29 (iterStmt)
    FOR      reduce using rule 29 (iterStmt)
    RETURN   reduce using rule 29 (iterStmt)
    FORALL   reduce using rule 29 (iterStmt)
    IS_SET   reduce using rule 29 (iterStmt)
    EXISTS   reduce using rule 29 (iterStmt)
    NEG      reduce using rule 29 (iterStmt)
    READ     reduce using rule 29 (iterStmt)
    WRITE    reduce using rule 29 (iterStmt)
    WRITELN  reduce using rule 29 (iterStmt)
    INTEGER  reduce using rule 29 (iterStmt)
    FLOAT    reduce using rule 29 (iterStmt)
    EMPTY    reduce using rule 29 (iterStmt)
    ';'      reduce using rule 29 (iterStmt)
    '}'      reduce using rule 29 (iterStmt)
    '('      reduce using rule 29 (iterStmt)


State 160

   28 iterStmt: FORALL '(' pertExpr ')' body .

    error    reduce using rule 28 (iterStmt)
    TYPE     reduce using rule 28 (iterStmt)
    SETOP    reduce using rule 28 (iterStmt)
    ID       reduce using rule 28 (iterStmt)
    IF       reduce using rule 28 (iterStmt)
    FOR      reduce using rule 28 (iterStmt)
    RETURN   reduce using rule 28 (iterStmt)
    FORALL   reduce using rule 28 (iterStmt)
    IS_SET   reduce using rule 28 (iterStmt)
    EXISTS   reduce using rule 28 (iterStmt)
    NEG      reduce using rule 28 (iterStmt)
    READ     reduce using rule 28 (iterStmt)
    WRITE    reduce using rule 28 (iterStmt)
    WRITELN  reduce using rule 28 (iterStmt)
    INTEGER  reduce using rule 28 (iterStmt)
    FLOAT    reduce using rule 28 (iterStmt)
    EMPTY    reduce using rule 28 (iterStmt)
    ';'      reduce using rule 28 (iterStmt)
    '}'      reduce using rule 28 (iterStmt)
    '('      reduce using rule 28 (iterStmt)


State 161

   56 simpleExpr: simpleExpr . DISJ disjExpr
   81 paramList: paramList ',' simpleExpr .

    DISJ  shift, and go to state 244

    ','  reduce using rule 81 (paramList)
    ')'  reduce using rule 81 (paramList)


State 162

   86 elem: EXISTS '(' pertExpr ')' .

    IN  reduce using rule 86 (elem)


State 163

   26 iterStmt: FOR '(' exprStmt exprStmt ')' body .

    error    reduce using rule 26 (iterStmt)
    TYPE     reduce using rule 26 (iterStmt)
    SETOP    reduce using rule 26 (iterStmt)
    ID       reduce using rule 26 (iterStmt)
    IF       reduce using rule 26 (iterStmt)
    FOR      reduce using rule 26 (iterStmt)
    RETURN   reduce using rule 26 (iterStmt)
    FORALL   reduce using rule 26 (iterStmt)
    IS_SET   reduce using rule 26 (iterStmt)
    EXISTS   reduce using rule 26 (iterStmt)
    NEG      reduce using rule 26 (iterStmt)
    READ     reduce using rule 26 (iterStmt)
    WRITE    reduce using rule 26 (iterStmt)
    WRITELN  reduce using rule 26 (iterStmt)
    INTEGER  reduce using rule 26 (iterStmt)
    FLOAT    reduce using rule 26 (iterStmt)
    EMPTY    reduce using rule 26 (iterStmt)
    ';'      reduce using rule 26 (iterStmt)
    '}'      reduce using rule 26 (iterStmt)
    '('      reduce using rule 26 (iterStmt)


State 164

   27 iterStmt: FOR '(' exprStmt exprStmt expression ')' . body

    error    shift, and go to state 29
    TYPE     shift, and go to state 167
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '{'      shift, and go to state 245
    '('      shift, and go to state 47

    varDecl     go to state 246
    funcDecl    go to state 247
    stmt        go to state 248
    iterStmt    go to state 51
    body        go to state 165
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 165

   27 iterStmt: FOR '(' exprStmt exprStmt expression ')' body .

    error    reduce using rule 27 (iterStmt)
    TYPE     reduce using rule 27 (iterStmt)
    SETOP    reduce using rule 27 (iterStmt)
    ID       reduce using rule 27 (iterStmt)
    IF       reduce using rule 27 (iterStmt)
    FOR      reduce using rule 27 (iterStmt)
    RETURN   reduce using rule 27 (iterStmt)
    FORALL   reduce using rule 27 (iterStmt)
    IS_SET   reduce using rule 27 (iterStmt)
    EXISTS   reduce using rule 27 (iterStmt)
    NEG      reduce using rule 27 (iterStmt)
    READ     reduce using rule 27 (iterStmt)
    WRITE    reduce using rule 27 (iterStmt)
    WRITELN  reduce using rule 27 (iterStmt)
    INTEGER  reduce using rule 27 (iterStmt)
    FLOAT    reduce using rule 27 (iterStmt)
    EMPTY    reduce using rule 27 (iterStmt)
    ';'      reduce using rule 27 (iterStmt)
    '}'      reduce using rule 27 (iterStmt)
    '('      reduce using rule 27 (iterStmt)


State 166

   10 new_id: ID .

    ';'  reduce using rule 10 (new_id)
    ','  reduce using rule 10 (new_id)


State 167

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error
   11 funcDecl: TYPE . new_id arguments '{' funcBody '}'

    error  shift, and go to state 249
    ID     shift, and go to state 9

    varList  go to state 250
    new_id   go to state 251


State 168

   49 var: ID .
   68 factor: ID .
   85 elem: ID .

    RELOP   reduce using rule 68 (factor)
    ARTOP1  reduce using rule 68 (factor)
    ARTOP2  reduce using rule 68 (factor)
    IN      reduce using rule 85 (elem)
    DISJ    reduce using rule 68 (factor)
    CONJ    reduce using rule 68 (factor)
    ';'     reduce using rule 68 (factor)
    '('     reduce using rule 49 (var)


State 169

   49 var: ID .
   68 factor: ID .
   85 elem: ID .

    RELOP   reduce using rule 68 (factor)
    ARTOP1  reduce using rule 68 (factor)
    ARTOP2  reduce using rule 68 (factor)
    IN      reduce using rule 85 (elem)
    DISJ    reduce using rule 68 (factor)
    CONJ    reduce using rule 68 (factor)
    '('     reduce using rule 49 (var)
    ')'     reduce using rule 68 (factor)


State 170

   72 factor: IS_SET . '(' set ')'

    '('  shift, and go to state 252


State 171

   74 factor: EXISTS . '(' pertExpr ')'
   86 elem: EXISTS . '(' pertExpr ')'

    '('  shift, and go to state 253


State 172

   60 negExpr: NEG . negExpr

    ID       shift, and go to state 169
    IS_SET   shift, and go to state 170
    EXISTS   shift, and go to state 171
    NEG      shift, and go to state 172
    INTEGER  shift, and go to state 173
    FLOAT    shift, and go to state 174
    EMPTY    shift, and go to state 175
    '('      shift, and go to state 176

    var       go to state 177
    negExpr   go to state 254
    relExpr   go to state 180
    artExpr1  go to state 181
    artExpr2  go to state 182
    factor    go to state 183
    constant  go to state 184
    call      go to state 185
    pertExpr  go to state 186
    elem      go to state 187


State 173

   75 constant: INTEGER .

    RELOP   reduce using rule 75 (constant)
    ARTOP1  reduce using rule 75 (constant)
    ARTOP2  reduce using rule 75 (constant)
    IN      reduce using rule 75 (constant)
    DISJ    reduce using rule 75 (constant)
    CONJ    reduce using rule 75 (constant)
    ')'     reduce using rule 75 (constant)


State 174

   76 constant: FLOAT .

    RELOP   reduce using rule 76 (constant)
    ARTOP1  reduce using rule 76 (constant)
    ARTOP2  reduce using rule 76 (constant)
    IN      reduce using rule 76 (constant)
    DISJ    reduce using rule 76 (constant)
    CONJ    reduce using rule 76 (constant)
    ')'     reduce using rule 76 (constant)


State 175

   77 constant: EMPTY .

    RELOP   reduce using rule 77 (constant)
    ARTOP1  reduce using rule 77 (constant)
    ARTOP2  reduce using rule 77 (constant)
    IN      reduce using rule 77 (constant)
    DISJ    reduce using rule 77 (constant)
    CONJ    reduce using rule 77 (constant)
    ')'     reduce using rule 77 (constant)


State 176

   69 factor: '(' . simpleExpr ')'
   88 elem: '(' . simpleExpr ')'

    ID       shift, and go to state 169
    IS_SET   shift, and go to state 170
    EXISTS   shift, and go to state 171
    NEG      shift, and go to state 172
    INTEGER  shift, and go to state 173
    FLOAT    shift, and go to state 174
    EMPTY    shift, and go to state 175
    '('      shift, and go to state 176

    var         go to state 177
    simpleExpr  go to state 255
    disjExpr    go to state 178
    negExpr     go to state 179
    relExpr     go to state 180
    artExpr1    go to state 181
    artExpr2    go to state 182
    factor      go to state 183
    constant    go to state 184
    call        go to state 185
    pertExpr    go to state 186
    elem        go to state 187


State 177

   78 call: var . '(' params ')'

    '('  shift, and go to state 256


State 178

   57 simpleExpr: disjExpr .
   58 disjExpr: disjExpr . CONJ negExpr

    CONJ  shift, and go to state 257

    DISJ  reduce using rule 57 (simpleExpr)
    ')'   reduce using rule 57 (simpleExpr)


State 179

   59 disjExpr: negExpr .

    DISJ  reduce using rule 59 (disjExpr)
    CONJ  reduce using rule 59 (disjExpr)
    ')'   reduce using rule 59 (disjExpr)


State 180

   61 negExpr: relExpr .
   62 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 258

    DISJ  reduce using rule 61 (negExpr)
    CONJ  reduce using rule 61 (negExpr)
    ')'   reduce using rule 61 (negExpr)


State 181

   63 relExpr: artExpr1 .
   64 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 259

    RELOP  reduce using rule 63 (relExpr)
    DISJ   reduce using rule 63 (relExpr)
    CONJ   reduce using rule 63 (relExpr)
    ')'    reduce using rule 63 (relExpr)


State 182

   65 artExpr1: artExpr2 .
   66 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 260

    RELOP   reduce using rule 65 (artExpr1)
    ARTOP1  reduce using rule 65 (artExpr1)
    DISJ    reduce using rule 65 (artExpr1)
    CONJ    reduce using rule 65 (artExpr1)
    ')'     reduce using rule 65 (artExpr1)


State 183

   67 artExpr2: factor .

    RELOP   reduce using rule 67 (artExpr2)
    ARTOP1  reduce using rule 67 (artExpr2)
    ARTOP2  reduce using rule 67 (artExpr2)
    DISJ    reduce using rule 67 (artExpr2)
    CONJ    reduce using rule 67 (artExpr2)
    ')'     reduce using rule 67 (artExpr2)


State 184

   70 factor: constant .
   89 elem: constant .

    RELOP   reduce using rule 70 (factor)
    ARTOP1  reduce using rule 70 (factor)
    ARTOP2  reduce using rule 70 (factor)
    IN      reduce using rule 89 (elem)
    DISJ    reduce using rule 70 (factor)
    CONJ    reduce using rule 70 (factor)
    ')'     reduce using rule 70 (factor)


State 185

   71 factor: call .
   87 elem: call .

    RELOP   reduce using rule 71 (factor)
    ARTOP1  reduce using rule 71 (factor)
    ARTOP2  reduce using rule 71 (factor)
    IN      reduce using rule 87 (elem)
    DISJ    reduce using rule 71 (factor)
    CONJ    reduce using rule 71 (factor)
    ')'     reduce using rule 71 (factor)


State 186

   73 factor: pertExpr .

    RELOP   reduce using rule 73 (factor)
    ARTOP1  reduce using rule 73 (factor)
    ARTOP2  reduce using rule 73 (factor)
    DISJ    reduce using rule 73 (factor)
    CONJ    reduce using rule 73 (factor)
    ')'     reduce using rule 73 (factor)


State 187

   83 pertExpr: elem . IN set

    IN  shift, and go to state 261


State 188

   75 constant: INTEGER .

    IN  reduce using rule 75 (constant)


State 189

   76 constant: FLOAT .

    IN  reduce using rule 76 (constant)


State 190

   77 constant: EMPTY .

    IN  reduce using rule 77 (constant)


State 191

   78 call: var . '(' params ')'

    '('  shift, and go to state 262


State 192

   83 pertExpr: elem . IN set

    IN  shift, and go to state 263


State 193

   84 setExpr: SETOP . '(' pertExpr ')'

    '('  shift, and go to state 264


State 194

   49 var: ID .
   68 factor: ID .
   85 elem: ID .

    RELOP   reduce using rule 68 (factor)
    ARTOP1  reduce using rule 68 (factor)
    ARTOP2  reduce using rule 68 (factor)
    IN      reduce using rule 85 (elem)
    DISJ    reduce using rule 68 (factor)
    CONJ    reduce using rule 68 (factor)
    '('     reduce using rule 49 (var)
    ')'     reduce using rule 68 (factor)
    '='     reduce using rule 49 (var)


State 195

   50 inExpr: READ . '(' var ')'

    '('  shift, and go to state 265


State 196

   51 outExpr: WRITE . '(' output ')'

    '('  shift, and go to state 266


State 197

   52 outExpr: WRITELN . '(' output ')'

    '('  shift, and go to state 267


State 198

   43 expression: assign .

    ')'  reduce using rule 43 (expression)


State 199

   48 assign: var . '=' simpleExpr
   78 call: var . '(' params ')'

    '('  shift, and go to state 256
    '='  shift, and go to state 268


State 200

   44 expression: inExpr .

    ')'  reduce using rule 44 (expression)


State 201

   45 expression: outExpr .

    ')'  reduce using rule 45 (expression)


State 202

   46 expression: simpleExpr .
   56 simpleExpr: simpleExpr . DISJ disjExpr

    DISJ  shift, and go to state 218

    ')'  reduce using rule 46 (expression)


State 203

   47 expression: setExpr .

    ')'  reduce using rule 47 (expression)


State 204

   41 exprStmt: error .

    error    reduce using rule 41 (exprStmt)
    TYPE     reduce using rule 41 (exprStmt)
    SETOP    reduce using rule 41 (exprStmt)
    ID       reduce using rule 41 (exprStmt)
    IF       reduce using rule 41 (exprStmt)
    ELSE     reduce using rule 41 (exprStmt)
    FOR      reduce using rule 41 (exprStmt)
    RETURN   reduce using rule 41 (exprStmt)
    FORALL   reduce using rule 41 (exprStmt)
    IS_SET   reduce using rule 41 (exprStmt)
    EXISTS   reduce using rule 41 (exprStmt)
    NEG      reduce using rule 41 (exprStmt)
    READ     reduce using rule 41 (exprStmt)
    WRITE    reduce using rule 41 (exprStmt)
    WRITELN  reduce using rule 41 (exprStmt)
    INTEGER  reduce using rule 41 (exprStmt)
    FLOAT    reduce using rule 41 (exprStmt)
    EMPTY    reduce using rule 41 (exprStmt)
    ';'      reduce using rule 41 (exprStmt)
    '}'      reduce using rule 41 (exprStmt)
    '('      reduce using rule 41 (exprStmt)


State 205

    6 varDecl: TYPE . varList ';'
    7        | TYPE . error
   11 funcDecl: TYPE . new_id arguments '{' funcBody '}'

    error  shift, and go to state 269
    ID     shift, and go to state 9

    varList  go to state 270
    new_id   go to state 271


State 206

   35 condStmt: IF . cond body
   36         | IF . cond body ELSE body

    '('  shift, and go to state 73

    cond  go to state 272


State 207

   26 iterStmt: FOR . '(' exprStmt exprStmt ')' body
   27         | FOR . '(' exprStmt exprStmt expression ')' body
   30         | FOR . '(' error ')' body

    '('  shift, and go to state 273


State 208

   39 returnStmt: RETURN . exprStmt

    error    shift, and go to state 204
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 210
    '('      shift, and go to state 47

    exprStmt    go to state 274
    expression  go to state 215
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 209

   28 iterStmt: FORALL . '(' pertExpr ')' body
   29         | FORALL . '(' error ')' body

    '('  shift, and go to state 275


State 210

   42 exprStmt: ';' .

    error    reduce using rule 42 (exprStmt)
    TYPE     reduce using rule 42 (exprStmt)
    SETOP    reduce using rule 42 (exprStmt)
    ID       reduce using rule 42 (exprStmt)
    IF       reduce using rule 42 (exprStmt)
    ELSE     reduce using rule 42 (exprStmt)
    FOR      reduce using rule 42 (exprStmt)
    RETURN   reduce using rule 42 (exprStmt)
    FORALL   reduce using rule 42 (exprStmt)
    IS_SET   reduce using rule 42 (exprStmt)
    EXISTS   reduce using rule 42 (exprStmt)
    NEG      reduce using rule 42 (exprStmt)
    READ     reduce using rule 42 (exprStmt)
    WRITE    reduce using rule 42 (exprStmt)
    WRITELN  reduce using rule 42 (exprStmt)
    INTEGER  reduce using rule 42 (exprStmt)
    FLOAT    reduce using rule 42 (exprStmt)
    EMPTY    reduce using rule 42 (exprStmt)
    ';'      reduce using rule 42 (exprStmt)
    '}'      reduce using rule 42 (exprStmt)
    '('      reduce using rule 42 (exprStmt)


State 211

   24 stmt: iterStmt .

    error    reduce using rule 24 (stmt)
    TYPE     reduce using rule 24 (stmt)
    SETOP    reduce using rule 24 (stmt)
    ID       reduce using rule 24 (stmt)
    IF       reduce using rule 24 (stmt)
    ELSE     reduce using rule 24 (stmt)
    FOR      reduce using rule 24 (stmt)
    RETURN   reduce using rule 24 (stmt)
    FORALL   reduce using rule 24 (stmt)
    IS_SET   reduce using rule 24 (stmt)
    EXISTS   reduce using rule 24 (stmt)
    NEG      reduce using rule 24 (stmt)
    READ     reduce using rule 24 (stmt)
    WRITE    reduce using rule 24 (stmt)
    WRITELN  reduce using rule 24 (stmt)
    INTEGER  reduce using rule 24 (stmt)
    FLOAT    reduce using rule 24 (stmt)
    EMPTY    reduce using rule 24 (stmt)
    ';'      reduce using rule 24 (stmt)
    '}'      reduce using rule 24 (stmt)
    '('      reduce using rule 24 (stmt)


State 212

   25 stmt: condStmt .

    error    reduce using rule 25 (stmt)
    TYPE     reduce using rule 25 (stmt)
    SETOP    reduce using rule 25 (stmt)
    ID       reduce using rule 25 (stmt)
    IF       reduce using rule 25 (stmt)
    ELSE     reduce using rule 25 (stmt)
    FOR      reduce using rule 25 (stmt)
    RETURN   reduce using rule 25 (stmt)
    FORALL   reduce using rule 25 (stmt)
    IS_SET   reduce using rule 25 (stmt)
    EXISTS   reduce using rule 25 (stmt)
    NEG      reduce using rule 25 (stmt)
    READ     reduce using rule 25 (stmt)
    WRITE    reduce using rule 25 (stmt)
    WRITELN  reduce using rule 25 (stmt)
    INTEGER  reduce using rule 25 (stmt)
    FLOAT    reduce using rule 25 (stmt)
    EMPTY    reduce using rule 25 (stmt)
    ';'      reduce using rule 25 (stmt)
    '}'      reduce using rule 25 (stmt)
    '('      reduce using rule 25 (stmt)


State 213

   23 stmt: returnStmt .

    error    reduce using rule 23 (stmt)
    TYPE     reduce using rule 23 (stmt)
    SETOP    reduce using rule 23 (stmt)
    ID       reduce using rule 23 (stmt)
    IF       reduce using rule 23 (stmt)
    ELSE     reduce using rule 23 (stmt)
    FOR      reduce using rule 23 (stmt)
    RETURN   reduce using rule 23 (stmt)
    FORALL   reduce using rule 23 (stmt)
    IS_SET   reduce using rule 23 (stmt)
    EXISTS   reduce using rule 23 (stmt)
    NEG      reduce using rule 23 (stmt)
    READ     reduce using rule 23 (stmt)
    WRITE    reduce using rule 23 (stmt)
    WRITELN  reduce using rule 23 (stmt)
    INTEGER  reduce using rule 23 (stmt)
    FLOAT    reduce using rule 23 (stmt)
    EMPTY    reduce using rule 23 (stmt)
    ';'      reduce using rule 23 (stmt)
    '}'      reduce using rule 23 (stmt)
    '('      reduce using rule 23 (stmt)


State 214

   22 stmt: exprStmt .

    error    reduce using rule 22 (stmt)
    TYPE     reduce using rule 22 (stmt)
    SETOP    reduce using rule 22 (stmt)
    ID       reduce using rule 22 (stmt)
    IF       reduce using rule 22 (stmt)
    ELSE     reduce using rule 22 (stmt)
    FOR      reduce using rule 22 (stmt)
    RETURN   reduce using rule 22 (stmt)
    FORALL   reduce using rule 22 (stmt)
    IS_SET   reduce using rule 22 (stmt)
    EXISTS   reduce using rule 22 (stmt)
    NEG      reduce using rule 22 (stmt)
    READ     reduce using rule 22 (stmt)
    WRITE    reduce using rule 22 (stmt)
    WRITELN  reduce using rule 22 (stmt)
    INTEGER  reduce using rule 22 (stmt)
    FLOAT    reduce using rule 22 (stmt)
    EMPTY    reduce using rule 22 (stmt)
    ';'      reduce using rule 22 (stmt)
    '}'      reduce using rule 22 (stmt)
    '('      reduce using rule 22 (stmt)


State 215

   40 exprStmt: expression . ';'

    ';'  shift, and go to state 276


State 216

   42 exprStmt: ';' .

    error    reduce using rule 42 (exprStmt)
    SETOP    reduce using rule 42 (exprStmt)
    ID       reduce using rule 42 (exprStmt)
    IS_SET   reduce using rule 42 (exprStmt)
    EXISTS   reduce using rule 42 (exprStmt)
    NEG      reduce using rule 42 (exprStmt)
    READ     reduce using rule 42 (exprStmt)
    WRITE    reduce using rule 42 (exprStmt)
    WRITELN  reduce using rule 42 (exprStmt)
    INTEGER  reduce using rule 42 (exprStmt)
    FLOAT    reduce using rule 42 (exprStmt)
    EMPTY    reduce using rule 42 (exprStmt)
    ';'      reduce using rule 42 (exprStmt)
    '('      reduce using rule 42 (exprStmt)


State 217

   40 exprStmt: expression . ';'

    ';'  shift, and go to state 277


State 218

   56 simpleExpr: simpleExpr DISJ . disjExpr

    ID       shift, and go to state 169
    IS_SET   shift, and go to state 170
    EXISTS   shift, and go to state 171
    NEG      shift, and go to state 172
    INTEGER  shift, and go to state 173
    FLOAT    shift, and go to state 174
    EMPTY    shift, and go to state 175
    '('      shift, and go to state 176

    var       go to state 177
    disjExpr  go to state 278
    negExpr   go to state 179
    relExpr   go to state 180
    artExpr1  go to state 181
    artExpr2  go to state 182
    factor    go to state 183
    constant  go to state 184
    call      go to state 185
    pertExpr  go to state 186
    elem      go to state 187


State 219

   49 var: ID .
   68 factor: ID .
   85 elem: ID .

    RELOP   reduce using rule 68 (factor)
    ARTOP1  reduce using rule 68 (factor)
    ARTOP2  reduce using rule 68 (factor)
    IN      reduce using rule 85 (elem)
    DISJ    reduce using rule 68 (factor)
    CONJ    reduce using rule 68 (factor)
    ','     reduce using rule 68 (factor)
    '('     reduce using rule 49 (var)
    ')'     reduce using rule 68 (factor)


State 220

   72 factor: IS_SET . '(' set ')'

    '('  shift, and go to state 279


State 221

   74 factor: EXISTS . '(' pertExpr ')'
   86 elem: EXISTS . '(' pertExpr ')'

    '('  shift, and go to state 280


State 222

   60 negExpr: NEG . negExpr

    ID       shift, and go to state 219
    IS_SET   shift, and go to state 220
    EXISTS   shift, and go to state 221
    NEG      shift, and go to state 222
    INTEGER  shift, and go to state 223
    FLOAT    shift, and go to state 224
    EMPTY    shift, and go to state 225
    '('      shift, and go to state 226

    var       go to state 227
    negExpr   go to state 281
    relExpr   go to state 230
    artExpr1  go to state 231
    artExpr2  go to state 232
    factor    go to state 233
    constant  go to state 234
    call      go to state 235
    pertExpr  go to state 236
    elem      go to state 237


State 223

   75 constant: INTEGER .

    RELOP   reduce using rule 75 (constant)
    ARTOP1  reduce using rule 75 (constant)
    ARTOP2  reduce using rule 75 (constant)
    IN      reduce using rule 75 (constant)
    DISJ    reduce using rule 75 (constant)
    CONJ    reduce using rule 75 (constant)
    ','     reduce using rule 75 (constant)
    ')'     reduce using rule 75 (constant)


State 224

   76 constant: FLOAT .

    RELOP   reduce using rule 76 (constant)
    ARTOP1  reduce using rule 76 (constant)
    ARTOP2  reduce using rule 76 (constant)
    IN      reduce using rule 76 (constant)
    DISJ    reduce using rule 76 (constant)
    CONJ    reduce using rule 76 (constant)
    ','     reduce using rule 76 (constant)
    ')'     reduce using rule 76 (constant)


State 225

   77 constant: EMPTY .

    RELOP   reduce using rule 77 (constant)
    ARTOP1  reduce using rule 77 (constant)
    ARTOP2  reduce using rule 77 (constant)
    IN      reduce using rule 77 (constant)
    DISJ    reduce using rule 77 (constant)
    CONJ    reduce using rule 77 (constant)
    ','     reduce using rule 77 (constant)
    ')'     reduce using rule 77 (constant)


State 226

   69 factor: '(' . simpleExpr ')'
   88 elem: '(' . simpleExpr ')'

    ID       shift, and go to state 169
    IS_SET   shift, and go to state 170
    EXISTS   shift, and go to state 171
    NEG      shift, and go to state 172
    INTEGER  shift, and go to state 173
    FLOAT    shift, and go to state 174
    EMPTY    shift, and go to state 175
    '('      shift, and go to state 176

    var         go to state 177
    simpleExpr  go to state 282
    disjExpr    go to state 178
    negExpr     go to state 179
    relExpr     go to state 180
    artExpr1    go to state 181
    artExpr2    go to state 182
    factor      go to state 183
    constant    go to state 184
    call        go to state 185
    pertExpr    go to state 186
    elem        go to state 187


State 227

   78 call: var . '(' params ')'

    '('  shift, and go to state 283


State 228

   57 simpleExpr: disjExpr .
   58 disjExpr: disjExpr . CONJ negExpr

    CONJ  shift, and go to state 284

    DISJ  reduce using rule 57 (simpleExpr)
    ','   reduce using rule 57 (simpleExpr)
    ')'   reduce using rule 57 (simpleExpr)


State 229

   59 disjExpr: negExpr .

    DISJ  reduce using rule 59 (disjExpr)
    CONJ  reduce using rule 59 (disjExpr)
    ','   reduce using rule 59 (disjExpr)
    ')'   reduce using rule 59 (disjExpr)


State 230

   61 negExpr: relExpr .
   62 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 285

    DISJ  reduce using rule 61 (negExpr)
    CONJ  reduce using rule 61 (negExpr)
    ','   reduce using rule 61 (negExpr)
    ')'   reduce using rule 61 (negExpr)


State 231

   63 relExpr: artExpr1 .
   64 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 286

    RELOP  reduce using rule 63 (relExpr)
    DISJ   reduce using rule 63 (relExpr)
    CONJ   reduce using rule 63 (relExpr)
    ','    reduce using rule 63 (relExpr)
    ')'    reduce using rule 63 (relExpr)


State 232

   65 artExpr1: artExpr2 .
   66 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 287

    RELOP   reduce using rule 65 (artExpr1)
    ARTOP1  reduce using rule 65 (artExpr1)
    DISJ    reduce using rule 65 (artExpr1)
    CONJ    reduce using rule 65 (artExpr1)
    ','     reduce using rule 65 (artExpr1)
    ')'     reduce using rule 65 (artExpr1)


State 233

   67 artExpr2: factor .

    RELOP   reduce using rule 67 (artExpr2)
    ARTOP1  reduce using rule 67 (artExpr2)
    ARTOP2  reduce using rule 67 (artExpr2)
    DISJ    reduce using rule 67 (artExpr2)
    CONJ    reduce using rule 67 (artExpr2)
    ','     reduce using rule 67 (artExpr2)
    ')'     reduce using rule 67 (artExpr2)


State 234

   70 factor: constant .
   89 elem: constant .

    RELOP   reduce using rule 70 (factor)
    ARTOP1  reduce using rule 70 (factor)
    ARTOP2  reduce using rule 70 (factor)
    IN      reduce using rule 89 (elem)
    DISJ    reduce using rule 70 (factor)
    CONJ    reduce using rule 70 (factor)
    ','     reduce using rule 70 (factor)
    ')'     reduce using rule 70 (factor)


State 235

   71 factor: call .
   87 elem: call .

    RELOP   reduce using rule 71 (factor)
    ARTOP1  reduce using rule 71 (factor)
    ARTOP2  reduce using rule 71 (factor)
    IN      reduce using rule 87 (elem)
    DISJ    reduce using rule 71 (factor)
    CONJ    reduce using rule 71 (factor)
    ','     reduce using rule 71 (factor)
    ')'     reduce using rule 71 (factor)


State 236

   73 factor: pertExpr .

    RELOP   reduce using rule 73 (factor)
    ARTOP1  reduce using rule 73 (factor)
    ARTOP2  reduce using rule 73 (factor)
    DISJ    reduce using rule 73 (factor)
    CONJ    reduce using rule 73 (factor)
    ','     reduce using rule 73 (factor)
    ')'     reduce using rule 73 (factor)


State 237

   83 pertExpr: elem . IN set

    IN  shift, and go to state 288


State 238

   84 setExpr: SETOP . '(' pertExpr ')'

    '('  shift, and go to state 289


State 239

   90 set: ID .

    RELOP   reduce using rule 90 (set)
    ARTOP1  reduce using rule 90 (set)
    ARTOP2  reduce using rule 90 (set)
    DISJ    reduce using rule 90 (set)
    CONJ    reduce using rule 90 (set)
    ';'     reduce using rule 90 (set)


State 240

   91 set: setExpr .

    RELOP   reduce using rule 91 (set)
    ARTOP1  reduce using rule 91 (set)
    ARTOP2  reduce using rule 91 (set)
    DISJ    reduce using rule 91 (set)
    CONJ    reduce using rule 91 (set)
    ';'     reduce using rule 91 (set)


State 241

   41 exprStmt: error .

    SETOP    reduce using rule 41 (exprStmt)
    ID       reduce using rule 41 (exprStmt)
    IS_SET   reduce using rule 41 (exprStmt)
    EXISTS   reduce using rule 41 (exprStmt)
    NEG      reduce using rule 41 (exprStmt)
    READ     reduce using rule 41 (exprStmt)
    WRITE    reduce using rule 41 (exprStmt)
    WRITELN  reduce using rule 41 (exprStmt)
    INTEGER  reduce using rule 41 (exprStmt)
    FLOAT    reduce using rule 41 (exprStmt)
    EMPTY    reduce using rule 41 (exprStmt)
    '('      reduce using rule 41 (exprStmt)
    ')'      reduce using rule 41 (exprStmt)


State 242

   42 exprStmt: ';' .

    SETOP    reduce using rule 42 (exprStmt)
    ID       reduce using rule 42 (exprStmt)
    IS_SET   reduce using rule 42 (exprStmt)
    EXISTS   reduce using rule 42 (exprStmt)
    NEG      reduce using rule 42 (exprStmt)
    READ     reduce using rule 42 (exprStmt)
    WRITE    reduce using rule 42 (exprStmt)
    WRITELN  reduce using rule 42 (exprStmt)
    INTEGER  reduce using rule 42 (exprStmt)
    FLOAT    reduce using rule 42 (exprStmt)
    EMPTY    reduce using rule 42 (exprStmt)
    '('      reduce using rule 42 (exprStmt)
    ')'      reduce using rule 42 (exprStmt)


State 243

   40 exprStmt: expression . ';'

    ';'  shift, and go to state 290


State 244

   56 simpleExpr: simpleExpr DISJ . disjExpr

    ID       shift, and go to state 219
    IS_SET   shift, and go to state 220
    EXISTS   shift, and go to state 221
    NEG      shift, and go to state 222
    INTEGER  shift, and go to state 223
    FLOAT    shift, and go to state 224
    EMPTY    shift, and go to state 225
    '('      shift, and go to state 226

    var       go to state 227
    disjExpr  go to state 291
    negExpr   go to state 229
    relExpr   go to state 230
    artExpr1  go to state 231
    artExpr2  go to state 232
    factor    go to state 233
    constant  go to state 234
    call      go to state 235
    pertExpr  go to state 236
    elem      go to state 237


State 245

   31 body: '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)

    funcBody  go to state 292


State 246

   33 body: varDecl .

    error    reduce using rule 33 (body)
    TYPE     reduce using rule 33 (body)
    SETOP    reduce using rule 33 (body)
    ID       reduce using rule 33 (body)
    IF       reduce using rule 33 (body)
    FOR      reduce using rule 33 (body)
    RETURN   reduce using rule 33 (body)
    FORALL   reduce using rule 33 (body)
    IS_SET   reduce using rule 33 (body)
    EXISTS   reduce using rule 33 (body)
    NEG      reduce using rule 33 (body)
    READ     reduce using rule 33 (body)
    WRITE    reduce using rule 33 (body)
    WRITELN  reduce using rule 33 (body)
    INTEGER  reduce using rule 33 (body)
    FLOAT    reduce using rule 33 (body)
    EMPTY    reduce using rule 33 (body)
    ';'      reduce using rule 33 (body)
    '}'      reduce using rule 33 (body)
    '('      reduce using rule 33 (body)


State 247

   34 body: funcDecl .

    error    reduce using rule 34 (body)
    TYPE     reduce using rule 34 (body)
    SETOP    reduce using rule 34 (body)
    ID       reduce using rule 34 (body)
    IF       reduce using rule 34 (body)
    FOR      reduce using rule 34 (body)
    RETURN   reduce using rule 34 (body)
    FORALL   reduce using rule 34 (body)
    IS_SET   reduce using rule 34 (body)
    EXISTS   reduce using rule 34 (body)
    NEG      reduce using rule 34 (body)
    READ     reduce using rule 34 (body)
    WRITE    reduce using rule 34 (body)
    WRITELN  reduce using rule 34 (body)
    INTEGER  reduce using rule 34 (body)
    FLOAT    reduce using rule 34 (body)
    EMPTY    reduce using rule 34 (body)
    ';'      reduce using rule 34 (body)
    '}'      reduce using rule 34 (body)
    '('      reduce using rule 34 (body)


State 248

   32 body: stmt .

    error    reduce using rule 32 (body)
    TYPE     reduce using rule 32 (body)
    SETOP    reduce using rule 32 (body)
    ID       reduce using rule 32 (body)
    IF       reduce using rule 32 (body)
    FOR      reduce using rule 32 (body)
    RETURN   reduce using rule 32 (body)
    FORALL   reduce using rule 32 (body)
    IS_SET   reduce using rule 32 (body)
    EXISTS   reduce using rule 32 (body)
    NEG      reduce using rule 32 (body)
    READ     reduce using rule 32 (body)
    WRITE    reduce using rule 32 (body)
    WRITELN  reduce using rule 32 (body)
    INTEGER  reduce using rule 32 (body)
    FLOAT    reduce using rule 32 (body)
    EMPTY    reduce using rule 32 (body)
    ';'      reduce using rule 32 (body)
    '}'      reduce using rule 32 (body)
    '('      reduce using rule 32 (body)


State 249

    7 varDecl: TYPE error .

    error    reduce using rule 7 (varDecl)
    TYPE     reduce using rule 7 (varDecl)
    SETOP    reduce using rule 7 (varDecl)
    ID       reduce using rule 7 (varDecl)
    IF       reduce using rule 7 (varDecl)
    FOR      reduce using rule 7 (varDecl)
    RETURN   reduce using rule 7 (varDecl)
    FORALL   reduce using rule 7 (varDecl)
    IS_SET   reduce using rule 7 (varDecl)
    EXISTS   reduce using rule 7 (varDecl)
    NEG      reduce using rule 7 (varDecl)
    READ     reduce using rule 7 (varDecl)
    WRITE    reduce using rule 7 (varDecl)
    WRITELN  reduce using rule 7 (varDecl)
    INTEGER  reduce using rule 7 (varDecl)
    FLOAT    reduce using rule 7 (varDecl)
    EMPTY    reduce using rule 7 (varDecl)
    ';'      reduce using rule 7 (varDecl)
    '}'      reduce using rule 7 (varDecl)
    '('      reduce using rule 7 (varDecl)


State 250

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 293
    ','  shift, and go to state 13


State 251

    9 varList: new_id .
   11 funcDecl: TYPE new_id . arguments '{' funcBody '}'

    '('  shift, and go to state 14

    ';'  reduce using rule 9 (varList)
    ','  reduce using rule 9 (varList)

    arguments  go to state 294


State 252

   72 factor: IS_SET '(' . set ')'

    SETOP  shift, and go to state 193
    ID     shift, and go to state 112

    setExpr  go to state 113
    set      go to state 295


State 253

   74 factor: EXISTS '(' . pertExpr ')'
   86 elem: EXISTS '(' . pertExpr ')'

    ID       shift, and go to state 95
    EXISTS   shift, and go to state 96
    INTEGER  shift, and go to state 188
    FLOAT    shift, and go to state 189
    EMPTY    shift, and go to state 190
    '('      shift, and go to state 97

    var       go to state 191
    constant  go to state 98
    call      go to state 99
    pertExpr  go to state 296
    elem      go to state 192


State 254

   60 negExpr: NEG negExpr .

    DISJ  reduce using rule 60 (negExpr)
    CONJ  reduce using rule 60 (negExpr)
    ')'   reduce using rule 60 (negExpr)


State 255

   56 simpleExpr: simpleExpr . DISJ disjExpr
   69 factor: '(' simpleExpr . ')'
   88 elem: '(' simpleExpr . ')'

    DISJ  shift, and go to state 218
    ')'   shift, and go to state 297


State 256

   78 call: var '(' . params ')'

    ID       shift, and go to state 219
    IS_SET   shift, and go to state 220
    EXISTS   shift, and go to state 221
    NEG      shift, and go to state 222
    INTEGER  shift, and go to state 223
    FLOAT    shift, and go to state 224
    EMPTY    shift, and go to state 225
    '('      shift, and go to state 226

    ')'  reduce using rule 79 (params)

    var         go to state 227
    simpleExpr  go to state 124
    disjExpr    go to state 228
    negExpr     go to state 229
    relExpr     go to state 230
    artExpr1    go to state 231
    artExpr2    go to state 232
    factor      go to state 233
    constant    go to state 234
    call        go to state 235
    params      go to state 298
    paramList   go to state 126
    pertExpr    go to state 236
    elem        go to state 237


State 257

   58 disjExpr: disjExpr CONJ . negExpr

    ID       shift, and go to state 169
    IS_SET   shift, and go to state 170
    EXISTS   shift, and go to state 171
    NEG      shift, and go to state 172
    INTEGER  shift, and go to state 173
    FLOAT    shift, and go to state 174
    EMPTY    shift, and go to state 175
    '('      shift, and go to state 176

    var       go to state 177
    negExpr   go to state 299
    relExpr   go to state 180
    artExpr1  go to state 181
    artExpr2  go to state 182
    factor    go to state 183
    constant  go to state 184
    call      go to state 185
    pertExpr  go to state 186
    elem      go to state 187


State 258

   62 relExpr: relExpr RELOP . artExpr1

    ID       shift, and go to state 169
    IS_SET   shift, and go to state 170
    EXISTS   shift, and go to state 171
    INTEGER  shift, and go to state 173
    FLOAT    shift, and go to state 174
    EMPTY    shift, and go to state 175
    '('      shift, and go to state 176

    var       go to state 177
    artExpr1  go to state 300
    artExpr2  go to state 182
    factor    go to state 183
    constant  go to state 184
    call      go to state 185
    pertExpr  go to state 186
    elem      go to state 187


State 259

   64 artExpr1: artExpr1 ARTOP1 . artExpr2

    ID       shift, and go to state 169
    IS_SET   shift, and go to state 170
    EXISTS   shift, and go to state 171
    INTEGER  shift, and go to state 173
    FLOAT    shift, and go to state 174
    EMPTY    shift, and go to state 175
    '('      shift, and go to state 176

    var       go to state 177
    artExpr2  go to state 301
    factor    go to state 183
    constant  go to state 184
    call      go to state 185
    pertExpr  go to state 186
    elem      go to state 187


State 260

   66 artExpr2: artExpr2 ARTOP2 . factor

    ID       shift, and go to state 169
    IS_SET   shift, and go to state 170
    EXISTS   shift, and go to state 171
    INTEGER  shift, and go to state 173
    FLOAT    shift, and go to state 174
    EMPTY    shift, and go to state 175
    '('      shift, and go to state 176

    var       go to state 177
    factor    go to state 302
    constant  go to state 184
    call      go to state 185
    pertExpr  go to state 186
    elem      go to state 187


State 261

   83 pertExpr: elem IN . set

    SETOP  shift, and go to state 303
    ID     shift, and go to state 304

    setExpr  go to state 305
    set      go to state 306


State 262

   78 call: var '(' . params ')'

    ID       shift, and go to state 219
    IS_SET   shift, and go to state 220
    EXISTS   shift, and go to state 221
    NEG      shift, and go to state 222
    INTEGER  shift, and go to state 223
    FLOAT    shift, and go to state 224
    EMPTY    shift, and go to state 225
    '('      shift, and go to state 226

    ')'  reduce using rule 79 (params)

    var         go to state 227
    simpleExpr  go to state 124
    disjExpr    go to state 228
    negExpr     go to state 229
    relExpr     go to state 230
    artExpr1    go to state 231
    artExpr2    go to state 232
    factor      go to state 233
    constant    go to state 234
    call        go to state 235
    params      go to state 307
    paramList   go to state 126
    pertExpr    go to state 236
    elem        go to state 237


State 263

   83 pertExpr: elem IN . set

    SETOP  shift, and go to state 193
    ID     shift, and go to state 112

    setExpr  go to state 113
    set      go to state 308


State 264

   84 setExpr: SETOP '(' . pertExpr ')'

    ID       shift, and go to state 95
    EXISTS   shift, and go to state 96
    INTEGER  shift, and go to state 188
    FLOAT    shift, and go to state 189
    EMPTY    shift, and go to state 190
    '('      shift, and go to state 97

    var       go to state 191
    constant  go to state 98
    call      go to state 99
    pertExpr  go to state 309
    elem      go to state 192


State 265

   50 inExpr: READ '(' . var ')'

    ID  shift, and go to state 116

    var  go to state 310


State 266

   51 outExpr: WRITE '(' . output ')'

    ID      shift, and go to state 118
    CHAR    shift, and go to state 119
    STRING  shift, and go to state 120

    output  go to state 311


State 267

   52 outExpr: WRITELN '(' . output ')'

    ID      shift, and go to state 118
    CHAR    shift, and go to state 119
    STRING  shift, and go to state 120

    output  go to state 312


State 268

   48 assign: var '=' . simpleExpr

    ID       shift, and go to state 169
    IS_SET   shift, and go to state 170
    EXISTS   shift, and go to state 171
    NEG      shift, and go to state 172
    INTEGER  shift, and go to state 173
    FLOAT    shift, and go to state 174
    EMPTY    shift, and go to state 175
    '('      shift, and go to state 176

    var         go to state 177
    simpleExpr  go to state 313
    disjExpr    go to state 178
    negExpr     go to state 179
    relExpr     go to state 180
    artExpr1    go to state 181
    artExpr2    go to state 182
    factor      go to state 183
    constant    go to state 184
    call        go to state 185
    pertExpr    go to state 186
    elem        go to state 187


State 269

    7 varDecl: TYPE error .

    error    reduce using rule 7 (varDecl)
    TYPE     reduce using rule 7 (varDecl)
    SETOP    reduce using rule 7 (varDecl)
    ID       reduce using rule 7 (varDecl)
    IF       reduce using rule 7 (varDecl)
    ELSE     reduce using rule 7 (varDecl)
    FOR      reduce using rule 7 (varDecl)
    RETURN   reduce using rule 7 (varDecl)
    FORALL   reduce using rule 7 (varDecl)
    IS_SET   reduce using rule 7 (varDecl)
    EXISTS   reduce using rule 7 (varDecl)
    NEG      reduce using rule 7 (varDecl)
    READ     reduce using rule 7 (varDecl)
    WRITE    reduce using rule 7 (varDecl)
    WRITELN  reduce using rule 7 (varDecl)
    INTEGER  reduce using rule 7 (varDecl)
    FLOAT    reduce using rule 7 (varDecl)
    EMPTY    reduce using rule 7 (varDecl)
    ';'      reduce using rule 7 (varDecl)
    '}'      reduce using rule 7 (varDecl)
    '('      reduce using rule 7 (varDecl)


State 270

    6 varDecl: TYPE varList . ';'
    8 varList: varList . ',' new_id

    ';'  shift, and go to state 314
    ','  shift, and go to state 13


State 271

    9 varList: new_id .
   11 funcDecl: TYPE new_id . arguments '{' funcBody '}'

    '('  shift, and go to state 14

    ';'  reduce using rule 9 (varList)
    ','  reduce using rule 9 (varList)

    arguments  go to state 315


State 272

   35 condStmt: IF cond . body
   36         | IF cond . body ELSE body

    error    shift, and go to state 204
    TYPE     shift, and go to state 205
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 206
    FOR      shift, and go to state 207
    RETURN   shift, and go to state 208
    FORALL   shift, and go to state 209
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 210
    '{'      shift, and go to state 103
    '('      shift, and go to state 47

    varDecl     go to state 104
    funcDecl    go to state 105
    stmt        go to state 106
    iterStmt    go to state 211
    body        go to state 316
    condStmt    go to state 212
    returnStmt  go to state 213
    exprStmt    go to state 214
    expression  go to state 215
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 273

   26 iterStmt: FOR '(' . exprStmt exprStmt ')' body
   27         | FOR '(' . exprStmt exprStmt expression ')' body
   30         | FOR '(' . error ')' body

    error    shift, and go to state 317
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 216
    '('      shift, and go to state 47

    exprStmt    go to state 318
    expression  go to state 217
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 274

   39 returnStmt: RETURN exprStmt .

    error    reduce using rule 39 (returnStmt)
    TYPE     reduce using rule 39 (returnStmt)
    SETOP    reduce using rule 39 (returnStmt)
    ID       reduce using rule 39 (returnStmt)
    IF       reduce using rule 39 (returnStmt)
    ELSE     reduce using rule 39 (returnStmt)
    FOR      reduce using rule 39 (returnStmt)
    RETURN   reduce using rule 39 (returnStmt)
    FORALL   reduce using rule 39 (returnStmt)
    IS_SET   reduce using rule 39 (returnStmt)
    EXISTS   reduce using rule 39 (returnStmt)
    NEG      reduce using rule 39 (returnStmt)
    READ     reduce using rule 39 (returnStmt)
    WRITE    reduce using rule 39 (returnStmt)
    WRITELN  reduce using rule 39 (returnStmt)
    INTEGER  reduce using rule 39 (returnStmt)
    FLOAT    reduce using rule 39 (returnStmt)
    EMPTY    reduce using rule 39 (returnStmt)
    ';'      reduce using rule 39 (returnStmt)
    '}'      reduce using rule 39 (returnStmt)
    '('      reduce using rule 39 (returnStmt)


State 275

   28 iterStmt: FORALL '(' . pertExpr ')' body
   29         | FORALL '(' . error ')' body

    error    shift, and go to state 319
    ID       shift, and go to state 95
    EXISTS   shift, and go to state 96
    INTEGER  shift, and go to state 188
    FLOAT    shift, and go to state 189
    EMPTY    shift, and go to state 190
    '('      shift, and go to state 97

    var       go to state 191
    constant  go to state 98
    call      go to state 99
    pertExpr  go to state 320
    elem      go to state 192


State 276

   40 exprStmt: expression ';' .

    error    reduce using rule 40 (exprStmt)
    TYPE     reduce using rule 40 (exprStmt)
    SETOP    reduce using rule 40 (exprStmt)
    ID       reduce using rule 40 (exprStmt)
    IF       reduce using rule 40 (exprStmt)
    ELSE     reduce using rule 40 (exprStmt)
    FOR      reduce using rule 40 (exprStmt)
    RETURN   reduce using rule 40 (exprStmt)
    FORALL   reduce using rule 40 (exprStmt)
    IS_SET   reduce using rule 40 (exprStmt)
    EXISTS   reduce using rule 40 (exprStmt)
    NEG      reduce using rule 40 (exprStmt)
    READ     reduce using rule 40 (exprStmt)
    WRITE    reduce using rule 40 (exprStmt)
    WRITELN  reduce using rule 40 (exprStmt)
    INTEGER  reduce using rule 40 (exprStmt)
    FLOAT    reduce using rule 40 (exprStmt)
    EMPTY    reduce using rule 40 (exprStmt)
    ';'      reduce using rule 40 (exprStmt)
    '}'      reduce using rule 40 (exprStmt)
    '('      reduce using rule 40 (exprStmt)


State 277

   40 exprStmt: expression ';' .

    error    reduce using rule 40 (exprStmt)
    SETOP    reduce using rule 40 (exprStmt)
    ID       reduce using rule 40 (exprStmt)
    IS_SET   reduce using rule 40 (exprStmt)
    EXISTS   reduce using rule 40 (exprStmt)
    NEG      reduce using rule 40 (exprStmt)
    READ     reduce using rule 40 (exprStmt)
    WRITE    reduce using rule 40 (exprStmt)
    WRITELN  reduce using rule 40 (exprStmt)
    INTEGER  reduce using rule 40 (exprStmt)
    FLOAT    reduce using rule 40 (exprStmt)
    EMPTY    reduce using rule 40 (exprStmt)
    ';'      reduce using rule 40 (exprStmt)
    '('      reduce using rule 40 (exprStmt)


State 278

   56 simpleExpr: simpleExpr DISJ disjExpr .
   58 disjExpr: disjExpr . CONJ negExpr

    CONJ  shift, and go to state 257

    DISJ  reduce using rule 56 (simpleExpr)
    ')'   reduce using rule 56 (simpleExpr)


State 279

   72 factor: IS_SET '(' . set ')'

    SETOP  shift, and go to state 193
    ID     shift, and go to state 112

    setExpr  go to state 113
    set      go to state 321


State 280

   74 factor: EXISTS '(' . pertExpr ')'
   86 elem: EXISTS '(' . pertExpr ')'

    ID       shift, and go to state 95
    EXISTS   shift, and go to state 96
    INTEGER  shift, and go to state 188
    FLOAT    shift, and go to state 189
    EMPTY    shift, and go to state 190
    '('      shift, and go to state 97

    var       go to state 191
    constant  go to state 98
    call      go to state 99
    pertExpr  go to state 322
    elem      go to state 192


State 281

   60 negExpr: NEG negExpr .

    DISJ  reduce using rule 60 (negExpr)
    CONJ  reduce using rule 60 (negExpr)
    ','   reduce using rule 60 (negExpr)
    ')'   reduce using rule 60 (negExpr)


State 282

   56 simpleExpr: simpleExpr . DISJ disjExpr
   69 factor: '(' simpleExpr . ')'
   88 elem: '(' simpleExpr . ')'

    DISJ  shift, and go to state 218
    ')'   shift, and go to state 323


State 283

   78 call: var '(' . params ')'

    ID       shift, and go to state 219
    IS_SET   shift, and go to state 220
    EXISTS   shift, and go to state 221
    NEG      shift, and go to state 222
    INTEGER  shift, and go to state 223
    FLOAT    shift, and go to state 224
    EMPTY    shift, and go to state 225
    '('      shift, and go to state 226

    ')'  reduce using rule 79 (params)

    var         go to state 227
    simpleExpr  go to state 124
    disjExpr    go to state 228
    negExpr     go to state 229
    relExpr     go to state 230
    artExpr1    go to state 231
    artExpr2    go to state 232
    factor      go to state 233
    constant    go to state 234
    call        go to state 235
    params      go to state 324
    paramList   go to state 126
    pertExpr    go to state 236
    elem        go to state 237


State 284

   58 disjExpr: disjExpr CONJ . negExpr

    ID       shift, and go to state 219
    IS_SET   shift, and go to state 220
    EXISTS   shift, and go to state 221
    NEG      shift, and go to state 222
    INTEGER  shift, and go to state 223
    FLOAT    shift, and go to state 224
    EMPTY    shift, and go to state 225
    '('      shift, and go to state 226

    var       go to state 227
    negExpr   go to state 325
    relExpr   go to state 230
    artExpr1  go to state 231
    artExpr2  go to state 232
    factor    go to state 233
    constant  go to state 234
    call      go to state 235
    pertExpr  go to state 236
    elem      go to state 237


State 285

   62 relExpr: relExpr RELOP . artExpr1

    ID       shift, and go to state 219
    IS_SET   shift, and go to state 220
    EXISTS   shift, and go to state 221
    INTEGER  shift, and go to state 223
    FLOAT    shift, and go to state 224
    EMPTY    shift, and go to state 225
    '('      shift, and go to state 226

    var       go to state 227
    artExpr1  go to state 326
    artExpr2  go to state 232
    factor    go to state 233
    constant  go to state 234
    call      go to state 235
    pertExpr  go to state 236
    elem      go to state 237


State 286

   64 artExpr1: artExpr1 ARTOP1 . artExpr2

    ID       shift, and go to state 219
    IS_SET   shift, and go to state 220
    EXISTS   shift, and go to state 221
    INTEGER  shift, and go to state 223
    FLOAT    shift, and go to state 224
    EMPTY    shift, and go to state 225
    '('      shift, and go to state 226

    var       go to state 227
    artExpr2  go to state 327
    factor    go to state 233
    constant  go to state 234
    call      go to state 235
    pertExpr  go to state 236
    elem      go to state 237


State 287

   66 artExpr2: artExpr2 ARTOP2 . factor

    ID       shift, and go to state 219
    IS_SET   shift, and go to state 220
    EXISTS   shift, and go to state 221
    INTEGER  shift, and go to state 223
    FLOAT    shift, and go to state 224
    EMPTY    shift, and go to state 225
    '('      shift, and go to state 226

    var       go to state 227
    factor    go to state 328
    constant  go to state 234
    call      go to state 235
    pertExpr  go to state 236
    elem      go to state 237


State 288

   83 pertExpr: elem IN . set

    SETOP  shift, and go to state 329
    ID     shift, and go to state 330

    setExpr  go to state 331
    set      go to state 332


State 289

   84 setExpr: SETOP '(' . pertExpr ')'

    ID       shift, and go to state 95
    EXISTS   shift, and go to state 96
    INTEGER  shift, and go to state 188
    FLOAT    shift, and go to state 189
    EMPTY    shift, and go to state 190
    '('      shift, and go to state 97

    var       go to state 191
    constant  go to state 98
    call      go to state 99
    pertExpr  go to state 333
    elem      go to state 192


State 290

   40 exprStmt: expression ';' .

    SETOP    reduce using rule 40 (exprStmt)
    ID       reduce using rule 40 (exprStmt)
    IS_SET   reduce using rule 40 (exprStmt)
    EXISTS   reduce using rule 40 (exprStmt)
    NEG      reduce using rule 40 (exprStmt)
    READ     reduce using rule 40 (exprStmt)
    WRITE    reduce using rule 40 (exprStmt)
    WRITELN  reduce using rule 40 (exprStmt)
    INTEGER  reduce using rule 40 (exprStmt)
    FLOAT    reduce using rule 40 (exprStmt)
    EMPTY    reduce using rule 40 (exprStmt)
    '('      reduce using rule 40 (exprStmt)
    ')'      reduce using rule 40 (exprStmt)


State 291

   56 simpleExpr: simpleExpr DISJ disjExpr .
   58 disjExpr: disjExpr . CONJ negExpr

    CONJ  shift, and go to state 284

    DISJ  reduce using rule 56 (simpleExpr)
    ','   reduce using rule 56 (simpleExpr)
    ')'   reduce using rule 56 (simpleExpr)


State 292

   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt
   31 body: '{' funcBody . '}'

    error    shift, and go to state 29
    TYPE     shift, and go to state 167
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '}'      shift, and go to state 334
    '('      shift, and go to state 47

    varDecl     go to state 48
    funcDecl    go to state 49
    stmt        go to state 50
    iterStmt    go to state 51
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 293

    6 varDecl: TYPE varList ';' .

    error    reduce using rule 6 (varDecl)
    TYPE     reduce using rule 6 (varDecl)
    SETOP    reduce using rule 6 (varDecl)
    ID       reduce using rule 6 (varDecl)
    IF       reduce using rule 6 (varDecl)
    FOR      reduce using rule 6 (varDecl)
    RETURN   reduce using rule 6 (varDecl)
    FORALL   reduce using rule 6 (varDecl)
    IS_SET   reduce using rule 6 (varDecl)
    EXISTS   reduce using rule 6 (varDecl)
    NEG      reduce using rule 6 (varDecl)
    READ     reduce using rule 6 (varDecl)
    WRITE    reduce using rule 6 (varDecl)
    WRITELN  reduce using rule 6 (varDecl)
    INTEGER  reduce using rule 6 (varDecl)
    FLOAT    reduce using rule 6 (varDecl)
    EMPTY    reduce using rule 6 (varDecl)
    ';'      reduce using rule 6 (varDecl)
    '}'      reduce using rule 6 (varDecl)
    '('      reduce using rule 6 (varDecl)


State 294

   11 funcDecl: TYPE new_id arguments . '{' funcBody '}'

    '{'  shift, and go to state 335


State 295

   72 factor: IS_SET '(' set . ')'

    ')'  shift, and go to state 336


State 296

   74 factor: EXISTS '(' pertExpr . ')'
   86 elem: EXISTS '(' pertExpr . ')'

    ')'  shift, and go to state 337


State 297

   69 factor: '(' simpleExpr ')' .
   88 elem: '(' simpleExpr ')' .

    RELOP   reduce using rule 69 (factor)
    ARTOP1  reduce using rule 69 (factor)
    ARTOP2  reduce using rule 69 (factor)
    IN      reduce using rule 88 (elem)
    DISJ    reduce using rule 69 (factor)
    CONJ    reduce using rule 69 (factor)
    ')'     reduce using rule 69 (factor)


State 298

   78 call: var '(' params . ')'

    ')'  shift, and go to state 338


State 299

   58 disjExpr: disjExpr CONJ negExpr .

    DISJ  reduce using rule 58 (disjExpr)
    CONJ  reduce using rule 58 (disjExpr)
    ')'   reduce using rule 58 (disjExpr)


State 300

   62 relExpr: relExpr RELOP artExpr1 .
   64 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 259

    RELOP  reduce using rule 62 (relExpr)
    DISJ   reduce using rule 62 (relExpr)
    CONJ   reduce using rule 62 (relExpr)
    ')'    reduce using rule 62 (relExpr)


State 301

   64 artExpr1: artExpr1 ARTOP1 artExpr2 .
   66 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 260

    RELOP   reduce using rule 64 (artExpr1)
    ARTOP1  reduce using rule 64 (artExpr1)
    DISJ    reduce using rule 64 (artExpr1)
    CONJ    reduce using rule 64 (artExpr1)
    ')'     reduce using rule 64 (artExpr1)


State 302

   66 artExpr2: artExpr2 ARTOP2 factor .

    RELOP   reduce using rule 66 (artExpr2)
    ARTOP1  reduce using rule 66 (artExpr2)
    ARTOP2  reduce using rule 66 (artExpr2)
    DISJ    reduce using rule 66 (artExpr2)
    CONJ    reduce using rule 66 (artExpr2)
    ')'     reduce using rule 66 (artExpr2)


State 303

   84 setExpr: SETOP . '(' pertExpr ')'

    '('  shift, and go to state 339


State 304

   90 set: ID .

    RELOP   reduce using rule 90 (set)
    ARTOP1  reduce using rule 90 (set)
    ARTOP2  reduce using rule 90 (set)
    DISJ    reduce using rule 90 (set)
    CONJ    reduce using rule 90 (set)
    ')'     reduce using rule 90 (set)


State 305

   91 set: setExpr .

    RELOP   reduce using rule 91 (set)
    ARTOP1  reduce using rule 91 (set)
    ARTOP2  reduce using rule 91 (set)
    DISJ    reduce using rule 91 (set)
    CONJ    reduce using rule 91 (set)
    ')'     reduce using rule 91 (set)


State 306

   83 pertExpr: elem IN set .

    RELOP   reduce using rule 83 (pertExpr)
    ARTOP1  reduce using rule 83 (pertExpr)
    ARTOP2  reduce using rule 83 (pertExpr)
    DISJ    reduce using rule 83 (pertExpr)
    CONJ    reduce using rule 83 (pertExpr)
    ')'     reduce using rule 83 (pertExpr)


State 307

   78 call: var '(' params . ')'

    ')'  shift, and go to state 340


State 308

   83 pertExpr: elem IN set .

    ')'  reduce using rule 83 (pertExpr)


State 309

   84 setExpr: SETOP '(' pertExpr . ')'

    ')'  shift, and go to state 341


State 310

   50 inExpr: READ '(' var . ')'

    ')'  shift, and go to state 342


State 311

   51 outExpr: WRITE '(' output . ')'

    ')'  shift, and go to state 343


State 312

   52 outExpr: WRITELN '(' output . ')'

    ')'  shift, and go to state 344


State 313

   48 assign: var '=' simpleExpr .
   56 simpleExpr: simpleExpr . DISJ disjExpr

    DISJ  shift, and go to state 218

    ')'  reduce using rule 48 (assign)


State 314

    6 varDecl: TYPE varList ';' .

    error    reduce using rule 6 (varDecl)
    TYPE     reduce using rule 6 (varDecl)
    SETOP    reduce using rule 6 (varDecl)
    ID       reduce using rule 6 (varDecl)
    IF       reduce using rule 6 (varDecl)
    ELSE     reduce using rule 6 (varDecl)
    FOR      reduce using rule 6 (varDecl)
    RETURN   reduce using rule 6 (varDecl)
    FORALL   reduce using rule 6 (varDecl)
    IS_SET   reduce using rule 6 (varDecl)
    EXISTS   reduce using rule 6 (varDecl)
    NEG      reduce using rule 6 (varDecl)
    READ     reduce using rule 6 (varDecl)
    WRITE    reduce using rule 6 (varDecl)
    WRITELN  reduce using rule 6 (varDecl)
    INTEGER  reduce using rule 6 (varDecl)
    FLOAT    reduce using rule 6 (varDecl)
    EMPTY    reduce using rule 6 (varDecl)
    ';'      reduce using rule 6 (varDecl)
    '}'      reduce using rule 6 (varDecl)
    '('      reduce using rule 6 (varDecl)


State 315

   11 funcDecl: TYPE new_id arguments . '{' funcBody '}'

    '{'  shift, and go to state 345


State 316

   35 condStmt: IF cond body .
   36         | IF cond body . ELSE body

    ELSE  shift, and go to state 346

    error    reduce using rule 35 (condStmt)
    TYPE     reduce using rule 35 (condStmt)
    SETOP    reduce using rule 35 (condStmt)
    ID       reduce using rule 35 (condStmt)
    IF       reduce using rule 35 (condStmt)
    FOR      reduce using rule 35 (condStmt)
    RETURN   reduce using rule 35 (condStmt)
    FORALL   reduce using rule 35 (condStmt)
    IS_SET   reduce using rule 35 (condStmt)
    EXISTS   reduce using rule 35 (condStmt)
    NEG      reduce using rule 35 (condStmt)
    READ     reduce using rule 35 (condStmt)
    WRITE    reduce using rule 35 (condStmt)
    WRITELN  reduce using rule 35 (condStmt)
    INTEGER  reduce using rule 35 (condStmt)
    FLOAT    reduce using rule 35 (condStmt)
    EMPTY    reduce using rule 35 (condStmt)
    ';'      reduce using rule 35 (condStmt)
    '}'      reduce using rule 35 (condStmt)
    '('      reduce using rule 35 (condStmt)


State 317

   30 iterStmt: FOR '(' error . ')' body
   41 exprStmt: error .

    ')'  shift, and go to state 347

    error    reduce using rule 41 (exprStmt)
    SETOP    reduce using rule 41 (exprStmt)
    ID       reduce using rule 41 (exprStmt)
    IS_SET   reduce using rule 41 (exprStmt)
    EXISTS   reduce using rule 41 (exprStmt)
    NEG      reduce using rule 41 (exprStmt)
    READ     reduce using rule 41 (exprStmt)
    WRITE    reduce using rule 41 (exprStmt)
    WRITELN  reduce using rule 41 (exprStmt)
    INTEGER  reduce using rule 41 (exprStmt)
    FLOAT    reduce using rule 41 (exprStmt)
    EMPTY    reduce using rule 41 (exprStmt)
    ';'      reduce using rule 41 (exprStmt)
    '('      reduce using rule 41 (exprStmt)


State 318

   26 iterStmt: FOR '(' exprStmt . exprStmt ')' body
   27         | FOR '(' exprStmt . exprStmt expression ')' body

    error    shift, and go to state 241
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 242
    '('      shift, and go to state 47

    exprStmt    go to state 348
    expression  go to state 243
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 319

   29 iterStmt: FORALL '(' error . ')' body

    ')'  shift, and go to state 349


State 320

   28 iterStmt: FORALL '(' pertExpr . ')' body

    ')'  shift, and go to state 350


State 321

   72 factor: IS_SET '(' set . ')'

    ')'  shift, and go to state 351


State 322

   74 factor: EXISTS '(' pertExpr . ')'
   86 elem: EXISTS '(' pertExpr . ')'

    ')'  shift, and go to state 352


State 323

   69 factor: '(' simpleExpr ')' .
   88 elem: '(' simpleExpr ')' .

    RELOP   reduce using rule 69 (factor)
    ARTOP1  reduce using rule 69 (factor)
    ARTOP2  reduce using rule 69 (factor)
    IN      reduce using rule 88 (elem)
    DISJ    reduce using rule 69 (factor)
    CONJ    reduce using rule 69 (factor)
    ','     reduce using rule 69 (factor)
    ')'     reduce using rule 69 (factor)


State 324

   78 call: var '(' params . ')'

    ')'  shift, and go to state 353


State 325

   58 disjExpr: disjExpr CONJ negExpr .

    DISJ  reduce using rule 58 (disjExpr)
    CONJ  reduce using rule 58 (disjExpr)
    ','   reduce using rule 58 (disjExpr)
    ')'   reduce using rule 58 (disjExpr)


State 326

   62 relExpr: relExpr RELOP artExpr1 .
   64 artExpr1: artExpr1 . ARTOP1 artExpr2

    ARTOP1  shift, and go to state 286

    RELOP  reduce using rule 62 (relExpr)
    DISJ   reduce using rule 62 (relExpr)
    CONJ   reduce using rule 62 (relExpr)
    ','    reduce using rule 62 (relExpr)
    ')'    reduce using rule 62 (relExpr)


State 327

   64 artExpr1: artExpr1 ARTOP1 artExpr2 .
   66 artExpr2: artExpr2 . ARTOP2 factor

    ARTOP2  shift, and go to state 287

    RELOP   reduce using rule 64 (artExpr1)
    ARTOP1  reduce using rule 64 (artExpr1)
    DISJ    reduce using rule 64 (artExpr1)
    CONJ    reduce using rule 64 (artExpr1)
    ','     reduce using rule 64 (artExpr1)
    ')'     reduce using rule 64 (artExpr1)


State 328

   66 artExpr2: artExpr2 ARTOP2 factor .

    RELOP   reduce using rule 66 (artExpr2)
    ARTOP1  reduce using rule 66 (artExpr2)
    ARTOP2  reduce using rule 66 (artExpr2)
    DISJ    reduce using rule 66 (artExpr2)
    CONJ    reduce using rule 66 (artExpr2)
    ','     reduce using rule 66 (artExpr2)
    ')'     reduce using rule 66 (artExpr2)


State 329

   84 setExpr: SETOP . '(' pertExpr ')'

    '('  shift, and go to state 354


State 330

   90 set: ID .

    RELOP   reduce using rule 90 (set)
    ARTOP1  reduce using rule 90 (set)
    ARTOP2  reduce using rule 90 (set)
    DISJ    reduce using rule 90 (set)
    CONJ    reduce using rule 90 (set)
    ','     reduce using rule 90 (set)
    ')'     reduce using rule 90 (set)


State 331

   91 set: setExpr .

    RELOP   reduce using rule 91 (set)
    ARTOP1  reduce using rule 91 (set)
    ARTOP2  reduce using rule 91 (set)
    DISJ    reduce using rule 91 (set)
    CONJ    reduce using rule 91 (set)
    ','     reduce using rule 91 (set)
    ')'     reduce using rule 91 (set)


State 332

   83 pertExpr: elem IN set .

    RELOP   reduce using rule 83 (pertExpr)
    ARTOP1  reduce using rule 83 (pertExpr)
    ARTOP2  reduce using rule 83 (pertExpr)
    DISJ    reduce using rule 83 (pertExpr)
    CONJ    reduce using rule 83 (pertExpr)
    ','     reduce using rule 83 (pertExpr)
    ')'     reduce using rule 83 (pertExpr)


State 333

   84 setExpr: SETOP '(' pertExpr . ')'

    ')'  shift, and go to state 355


State 334

   31 body: '{' funcBody '}' .

    error    reduce using rule 31 (body)
    TYPE     reduce using rule 31 (body)
    SETOP    reduce using rule 31 (body)
    ID       reduce using rule 31 (body)
    IF       reduce using rule 31 (body)
    FOR      reduce using rule 31 (body)
    RETURN   reduce using rule 31 (body)
    FORALL   reduce using rule 31 (body)
    IS_SET   reduce using rule 31 (body)
    EXISTS   reduce using rule 31 (body)
    NEG      reduce using rule 31 (body)
    READ     reduce using rule 31 (body)
    WRITE    reduce using rule 31 (body)
    WRITELN  reduce using rule 31 (body)
    INTEGER  reduce using rule 31 (body)
    FLOAT    reduce using rule 31 (body)
    EMPTY    reduce using rule 31 (body)
    ';'      reduce using rule 31 (body)
    '}'      reduce using rule 31 (body)
    '('      reduce using rule 31 (body)


State 335

   11 funcDecl: TYPE new_id arguments '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)

    funcBody  go to state 356


State 336

   72 factor: IS_SET '(' set ')' .

    RELOP   reduce using rule 72 (factor)
    ARTOP1  reduce using rule 72 (factor)
    ARTOP2  reduce using rule 72 (factor)
    DISJ    reduce using rule 72 (factor)
    CONJ    reduce using rule 72 (factor)
    ')'     reduce using rule 72 (factor)


State 337

   74 factor: EXISTS '(' pertExpr ')' .
   86 elem: EXISTS '(' pertExpr ')' .

    RELOP   reduce using rule 74 (factor)
    ARTOP1  reduce using rule 74 (factor)
    ARTOP2  reduce using rule 74 (factor)
    IN      reduce using rule 86 (elem)
    DISJ    reduce using rule 74 (factor)
    CONJ    reduce using rule 74 (factor)
    ')'     reduce using rule 74 (factor)


State 338

   78 call: var '(' params ')' .

    RELOP   reduce using rule 78 (call)
    ARTOP1  reduce using rule 78 (call)
    ARTOP2  reduce using rule 78 (call)
    IN      reduce using rule 78 (call)
    DISJ    reduce using rule 78 (call)
    CONJ    reduce using rule 78 (call)
    ')'     reduce using rule 78 (call)


State 339

   84 setExpr: SETOP '(' . pertExpr ')'

    ID       shift, and go to state 95
    EXISTS   shift, and go to state 96
    INTEGER  shift, and go to state 188
    FLOAT    shift, and go to state 189
    EMPTY    shift, and go to state 190
    '('      shift, and go to state 97

    var       go to state 191
    constant  go to state 98
    call      go to state 99
    pertExpr  go to state 357
    elem      go to state 192


State 340

   78 call: var '(' params ')' .

    IN  reduce using rule 78 (call)


State 341

   84 setExpr: SETOP '(' pertExpr ')' .

    ')'  reduce using rule 84 (setExpr)


State 342

   50 inExpr: READ '(' var ')' .

    ')'  reduce using rule 50 (inExpr)


State 343

   51 outExpr: WRITE '(' output ')' .

    ')'  reduce using rule 51 (outExpr)


State 344

   52 outExpr: WRITELN '(' output ')' .

    ')'  reduce using rule 52 (outExpr)


State 345

   11 funcDecl: TYPE new_id arguments '{' . funcBody '}'

    error    reduce using rule 18 (funcBody)
    TYPE     reduce using rule 18 (funcBody)
    SETOP    reduce using rule 18 (funcBody)
    ID       reduce using rule 18 (funcBody)
    IF       reduce using rule 18 (funcBody)
    FOR      reduce using rule 18 (funcBody)
    RETURN   reduce using rule 18 (funcBody)
    FORALL   reduce using rule 18 (funcBody)
    IS_SET   reduce using rule 18 (funcBody)
    EXISTS   reduce using rule 18 (funcBody)
    NEG      reduce using rule 18 (funcBody)
    READ     reduce using rule 18 (funcBody)
    WRITE    reduce using rule 18 (funcBody)
    WRITELN  reduce using rule 18 (funcBody)
    INTEGER  reduce using rule 18 (funcBody)
    FLOAT    reduce using rule 18 (funcBody)
    EMPTY    reduce using rule 18 (funcBody)
    ';'      reduce using rule 18 (funcBody)
    '}'      reduce using rule 18 (funcBody)
    '('      reduce using rule 18 (funcBody)

    funcBody  go to state 358


State 346

   36 condStmt: IF cond body ELSE . body

    error    shift, and go to state 204
    TYPE     shift, and go to state 205
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 206
    FOR      shift, and go to state 207
    RETURN   shift, and go to state 208
    FORALL   shift, and go to state 209
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 210
    '{'      shift, and go to state 103
    '('      shift, and go to state 47

    varDecl     go to state 104
    funcDecl    go to state 105
    stmt        go to state 106
    iterStmt    go to state 211
    body        go to state 359
    condStmt    go to state 212
    returnStmt  go to state 213
    exprStmt    go to state 214
    expression  go to state 215
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 347

   30 iterStmt: FOR '(' error ')' . body

    error    shift, and go to state 204
    TYPE     shift, and go to state 205
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 206
    FOR      shift, and go to state 207
    RETURN   shift, and go to state 208
    FORALL   shift, and go to state 209
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 210
    '{'      shift, and go to state 103
    '('      shift, and go to state 47

    varDecl     go to state 104
    funcDecl    go to state 105
    stmt        go to state 106
    iterStmt    go to state 211
    body        go to state 360
    condStmt    go to state 212
    returnStmt  go to state 213
    exprStmt    go to state 214
    expression  go to state 215
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 348

   26 iterStmt: FOR '(' exprStmt exprStmt . ')' body
   27         | FOR '(' exprStmt exprStmt . expression ')' body

    SETOP    shift, and go to state 193
    ID       shift, and go to state 194
    IS_SET   shift, and go to state 170
    EXISTS   shift, and go to state 171
    NEG      shift, and go to state 172
    READ     shift, and go to state 195
    WRITE    shift, and go to state 196
    WRITELN  shift, and go to state 197
    INTEGER  shift, and go to state 173
    FLOAT    shift, and go to state 174
    EMPTY    shift, and go to state 175
    '('      shift, and go to state 176
    ')'      shift, and go to state 361

    expression  go to state 362
    assign      go to state 198
    var         go to state 199
    inExpr      go to state 200
    outExpr     go to state 201
    simpleExpr  go to state 202
    disjExpr    go to state 178
    negExpr     go to state 179
    relExpr     go to state 180
    artExpr1    go to state 181
    artExpr2    go to state 182
    factor      go to state 183
    constant    go to state 184
    call        go to state 185
    pertExpr    go to state 186
    setExpr     go to state 203
    elem        go to state 187


State 349

   29 iterStmt: FORALL '(' error ')' . body

    error    shift, and go to state 204
    TYPE     shift, and go to state 205
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 206
    FOR      shift, and go to state 207
    RETURN   shift, and go to state 208
    FORALL   shift, and go to state 209
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 210
    '{'      shift, and go to state 103
    '('      shift, and go to state 47

    varDecl     go to state 104
    funcDecl    go to state 105
    stmt        go to state 106
    iterStmt    go to state 211
    body        go to state 363
    condStmt    go to state 212
    returnStmt  go to state 213
    exprStmt    go to state 214
    expression  go to state 215
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 350

   28 iterStmt: FORALL '(' pertExpr ')' . body

    error    shift, and go to state 204
    TYPE     shift, and go to state 205
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 206
    FOR      shift, and go to state 207
    RETURN   shift, and go to state 208
    FORALL   shift, and go to state 209
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 210
    '{'      shift, and go to state 103
    '('      shift, and go to state 47

    varDecl     go to state 104
    funcDecl    go to state 105
    stmt        go to state 106
    iterStmt    go to state 211
    body        go to state 364
    condStmt    go to state 212
    returnStmt  go to state 213
    exprStmt    go to state 214
    expression  go to state 215
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 351

   72 factor: IS_SET '(' set ')' .

    RELOP   reduce using rule 72 (factor)
    ARTOP1  reduce using rule 72 (factor)
    ARTOP2  reduce using rule 72 (factor)
    DISJ    reduce using rule 72 (factor)
    CONJ    reduce using rule 72 (factor)
    ','     reduce using rule 72 (factor)
    ')'     reduce using rule 72 (factor)


State 352

   74 factor: EXISTS '(' pertExpr ')' .
   86 elem: EXISTS '(' pertExpr ')' .

    RELOP   reduce using rule 74 (factor)
    ARTOP1  reduce using rule 74 (factor)
    ARTOP2  reduce using rule 74 (factor)
    IN      reduce using rule 86 (elem)
    DISJ    reduce using rule 74 (factor)
    CONJ    reduce using rule 74 (factor)
    ','     reduce using rule 74 (factor)
    ')'     reduce using rule 74 (factor)


State 353

   78 call: var '(' params ')' .

    RELOP   reduce using rule 78 (call)
    ARTOP1  reduce using rule 78 (call)
    ARTOP2  reduce using rule 78 (call)
    IN      reduce using rule 78 (call)
    DISJ    reduce using rule 78 (call)
    CONJ    reduce using rule 78 (call)
    ','     reduce using rule 78 (call)
    ')'     reduce using rule 78 (call)


State 354

   84 setExpr: SETOP '(' . pertExpr ')'

    ID       shift, and go to state 95
    EXISTS   shift, and go to state 96
    INTEGER  shift, and go to state 188
    FLOAT    shift, and go to state 189
    EMPTY    shift, and go to state 190
    '('      shift, and go to state 97

    var       go to state 191
    constant  go to state 98
    call      go to state 99
    pertExpr  go to state 365
    elem      go to state 192


State 355

   84 setExpr: SETOP '(' pertExpr ')' .

    RELOP   reduce using rule 84 (setExpr)
    ARTOP1  reduce using rule 84 (setExpr)
    ARTOP2  reduce using rule 84 (setExpr)
    DISJ    reduce using rule 84 (setExpr)
    CONJ    reduce using rule 84 (setExpr)
    ';'     reduce using rule 84 (setExpr)


State 356

   11 funcDecl: TYPE new_id arguments '{' funcBody . '}'
   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt

    error    shift, and go to state 29
    TYPE     shift, and go to state 167
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '}'      shift, and go to state 366
    '('      shift, and go to state 47

    varDecl     go to state 48
    funcDecl    go to state 49
    stmt        go to state 50
    iterStmt    go to state 51
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 357

   84 setExpr: SETOP '(' pertExpr . ')'

    ')'  shift, and go to state 367


State 358

   11 funcDecl: TYPE new_id arguments '{' funcBody . '}'
   19 funcBody: funcBody . varDecl
   20         | funcBody . funcDecl
   21         | funcBody . stmt

    error    shift, and go to state 29
    TYPE     shift, and go to state 167
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 32
    FOR      shift, and go to state 33
    RETURN   shift, and go to state 34
    FORALL   shift, and go to state 35
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 45
    '}'      shift, and go to state 368
    '('      shift, and go to state 47

    varDecl     go to state 48
    funcDecl    go to state 49
    stmt        go to state 50
    iterStmt    go to state 51
    condStmt    go to state 52
    returnStmt  go to state 53
    exprStmt    go to state 54
    expression  go to state 55
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 359

   36 condStmt: IF cond body ELSE body .

    error    reduce using rule 36 (condStmt)
    TYPE     reduce using rule 36 (condStmt)
    SETOP    reduce using rule 36 (condStmt)
    ID       reduce using rule 36 (condStmt)
    IF       reduce using rule 36 (condStmt)
    ELSE     reduce using rule 36 (condStmt)
    FOR      reduce using rule 36 (condStmt)
    RETURN   reduce using rule 36 (condStmt)
    FORALL   reduce using rule 36 (condStmt)
    IS_SET   reduce using rule 36 (condStmt)
    EXISTS   reduce using rule 36 (condStmt)
    NEG      reduce using rule 36 (condStmt)
    READ     reduce using rule 36 (condStmt)
    WRITE    reduce using rule 36 (condStmt)
    WRITELN  reduce using rule 36 (condStmt)
    INTEGER  reduce using rule 36 (condStmt)
    FLOAT    reduce using rule 36 (condStmt)
    EMPTY    reduce using rule 36 (condStmt)
    ';'      reduce using rule 36 (condStmt)
    '}'      reduce using rule 36 (condStmt)
    '('      reduce using rule 36 (condStmt)


State 360

   30 iterStmt: FOR '(' error ')' body .

    error    reduce using rule 30 (iterStmt)
    TYPE     reduce using rule 30 (iterStmt)
    SETOP    reduce using rule 30 (iterStmt)
    ID       reduce using rule 30 (iterStmt)
    IF       reduce using rule 30 (iterStmt)
    ELSE     reduce using rule 30 (iterStmt)
    FOR      reduce using rule 30 (iterStmt)
    RETURN   reduce using rule 30 (iterStmt)
    FORALL   reduce using rule 30 (iterStmt)
    IS_SET   reduce using rule 30 (iterStmt)
    EXISTS   reduce using rule 30 (iterStmt)
    NEG      reduce using rule 30 (iterStmt)
    READ     reduce using rule 30 (iterStmt)
    WRITE    reduce using rule 30 (iterStmt)
    WRITELN  reduce using rule 30 (iterStmt)
    INTEGER  reduce using rule 30 (iterStmt)
    FLOAT    reduce using rule 30 (iterStmt)
    EMPTY    reduce using rule 30 (iterStmt)
    ';'      reduce using rule 30 (iterStmt)
    '}'      reduce using rule 30 (iterStmt)
    '('      reduce using rule 30 (iterStmt)


State 361

   26 iterStmt: FOR '(' exprStmt exprStmt ')' . body

    error    shift, and go to state 204
    TYPE     shift, and go to state 205
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 206
    FOR      shift, and go to state 207
    RETURN   shift, and go to state 208
    FORALL   shift, and go to state 209
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 210
    '{'      shift, and go to state 103
    '('      shift, and go to state 47

    varDecl     go to state 104
    funcDecl    go to state 105
    stmt        go to state 106
    iterStmt    go to state 211
    body        go to state 369
    condStmt    go to state 212
    returnStmt  go to state 213
    exprStmt    go to state 214
    expression  go to state 215
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 362

   27 iterStmt: FOR '(' exprStmt exprStmt expression . ')' body

    ')'  shift, and go to state 370


State 363

   29 iterStmt: FORALL '(' error ')' body .

    error    reduce using rule 29 (iterStmt)
    TYPE     reduce using rule 29 (iterStmt)
    SETOP    reduce using rule 29 (iterStmt)
    ID       reduce using rule 29 (iterStmt)
    IF       reduce using rule 29 (iterStmt)
    ELSE     reduce using rule 29 (iterStmt)
    FOR      reduce using rule 29 (iterStmt)
    RETURN   reduce using rule 29 (iterStmt)
    FORALL   reduce using rule 29 (iterStmt)
    IS_SET   reduce using rule 29 (iterStmt)
    EXISTS   reduce using rule 29 (iterStmt)
    NEG      reduce using rule 29 (iterStmt)
    READ     reduce using rule 29 (iterStmt)
    WRITE    reduce using rule 29 (iterStmt)
    WRITELN  reduce using rule 29 (iterStmt)
    INTEGER  reduce using rule 29 (iterStmt)
    FLOAT    reduce using rule 29 (iterStmt)
    EMPTY    reduce using rule 29 (iterStmt)
    ';'      reduce using rule 29 (iterStmt)
    '}'      reduce using rule 29 (iterStmt)
    '('      reduce using rule 29 (iterStmt)


State 364

   28 iterStmt: FORALL '(' pertExpr ')' body .

    error    reduce using rule 28 (iterStmt)
    TYPE     reduce using rule 28 (iterStmt)
    SETOP    reduce using rule 28 (iterStmt)
    ID       reduce using rule 28 (iterStmt)
    IF       reduce using rule 28 (iterStmt)
    ELSE     reduce using rule 28 (iterStmt)
    FOR      reduce using rule 28 (iterStmt)
    RETURN   reduce using rule 28 (iterStmt)
    FORALL   reduce using rule 28 (iterStmt)
    IS_SET   reduce using rule 28 (iterStmt)
    EXISTS   reduce using rule 28 (iterStmt)
    NEG      reduce using rule 28 (iterStmt)
    READ     reduce using rule 28 (iterStmt)
    WRITE    reduce using rule 28 (iterStmt)
    WRITELN  reduce using rule 28 (iterStmt)
    INTEGER  reduce using rule 28 (iterStmt)
    FLOAT    reduce using rule 28 (iterStmt)
    EMPTY    reduce using rule 28 (iterStmt)
    ';'      reduce using rule 28 (iterStmt)
    '}'      reduce using rule 28 (iterStmt)
    '('      reduce using rule 28 (iterStmt)


State 365

   84 setExpr: SETOP '(' pertExpr . ')'

    ')'  shift, and go to state 371


State 366

   11 funcDecl: TYPE new_id arguments '{' funcBody '}' .

    error    reduce using rule 11 (funcDecl)
    TYPE     reduce using rule 11 (funcDecl)
    SETOP    reduce using rule 11 (funcDecl)
    ID       reduce using rule 11 (funcDecl)
    IF       reduce using rule 11 (funcDecl)
    FOR      reduce using rule 11 (funcDecl)
    RETURN   reduce using rule 11 (funcDecl)
    FORALL   reduce using rule 11 (funcDecl)
    IS_SET   reduce using rule 11 (funcDecl)
    EXISTS   reduce using rule 11 (funcDecl)
    NEG      reduce using rule 11 (funcDecl)
    READ     reduce using rule 11 (funcDecl)
    WRITE    reduce using rule 11 (funcDecl)
    WRITELN  reduce using rule 11 (funcDecl)
    INTEGER  reduce using rule 11 (funcDecl)
    FLOAT    reduce using rule 11 (funcDecl)
    EMPTY    reduce using rule 11 (funcDecl)
    ';'      reduce using rule 11 (funcDecl)
    '}'      reduce using rule 11 (funcDecl)
    '('      reduce using rule 11 (funcDecl)


State 367

   84 setExpr: SETOP '(' pertExpr ')' .

    RELOP   reduce using rule 84 (setExpr)
    ARTOP1  reduce using rule 84 (setExpr)
    ARTOP2  reduce using rule 84 (setExpr)
    DISJ    reduce using rule 84 (setExpr)
    CONJ    reduce using rule 84 (setExpr)
    ')'     reduce using rule 84 (setExpr)


State 368

   11 funcDecl: TYPE new_id arguments '{' funcBody '}' .

    error    reduce using rule 11 (funcDecl)
    TYPE     reduce using rule 11 (funcDecl)
    SETOP    reduce using rule 11 (funcDecl)
    ID       reduce using rule 11 (funcDecl)
    IF       reduce using rule 11 (funcDecl)
    ELSE     reduce using rule 11 (funcDecl)
    FOR      reduce using rule 11 (funcDecl)
    RETURN   reduce using rule 11 (funcDecl)
    FORALL   reduce using rule 11 (funcDecl)
    IS_SET   reduce using rule 11 (funcDecl)
    EXISTS   reduce using rule 11 (funcDecl)
    NEG      reduce using rule 11 (funcDecl)
    READ     reduce using rule 11 (funcDecl)
    WRITE    reduce using rule 11 (funcDecl)
    WRITELN  reduce using rule 11 (funcDecl)
    INTEGER  reduce using rule 11 (funcDecl)
    FLOAT    reduce using rule 11 (funcDecl)
    EMPTY    reduce using rule 11 (funcDecl)
    ';'      reduce using rule 11 (funcDecl)
    '}'      reduce using rule 11 (funcDecl)
    '('      reduce using rule 11 (funcDecl)


State 369

   26 iterStmt: FOR '(' exprStmt exprStmt ')' body .

    error    reduce using rule 26 (iterStmt)
    TYPE     reduce using rule 26 (iterStmt)
    SETOP    reduce using rule 26 (iterStmt)
    ID       reduce using rule 26 (iterStmt)
    IF       reduce using rule 26 (iterStmt)
    ELSE     reduce using rule 26 (iterStmt)
    FOR      reduce using rule 26 (iterStmt)
    RETURN   reduce using rule 26 (iterStmt)
    FORALL   reduce using rule 26 (iterStmt)
    IS_SET   reduce using rule 26 (iterStmt)
    EXISTS   reduce using rule 26 (iterStmt)
    NEG      reduce using rule 26 (iterStmt)
    READ     reduce using rule 26 (iterStmt)
    WRITE    reduce using rule 26 (iterStmt)
    WRITELN  reduce using rule 26 (iterStmt)
    INTEGER  reduce using rule 26 (iterStmt)
    FLOAT    reduce using rule 26 (iterStmt)
    EMPTY    reduce using rule 26 (iterStmt)
    ';'      reduce using rule 26 (iterStmt)
    '}'      reduce using rule 26 (iterStmt)
    '('      reduce using rule 26 (iterStmt)


State 370

   27 iterStmt: FOR '(' exprStmt exprStmt expression ')' . body

    error    shift, and go to state 204
    TYPE     shift, and go to state 205
    SETOP    shift, and go to state 30
    ID       shift, and go to state 31
    IF       shift, and go to state 206
    FOR      shift, and go to state 207
    RETURN   shift, and go to state 208
    FORALL   shift, and go to state 209
    IS_SET   shift, and go to state 36
    EXISTS   shift, and go to state 37
    NEG      shift, and go to state 38
    READ     shift, and go to state 39
    WRITE    shift, and go to state 40
    WRITELN  shift, and go to state 41
    INTEGER  shift, and go to state 42
    FLOAT    shift, and go to state 43
    EMPTY    shift, and go to state 44
    ';'      shift, and go to state 210
    '{'      shift, and go to state 103
    '('      shift, and go to state 47

    varDecl     go to state 104
    funcDecl    go to state 105
    stmt        go to state 106
    iterStmt    go to state 211
    body        go to state 372
    condStmt    go to state 212
    returnStmt  go to state 213
    exprStmt    go to state 214
    expression  go to state 215
    assign      go to state 56
    var         go to state 57
    inExpr      go to state 58
    outExpr     go to state 59
    simpleExpr  go to state 60
    disjExpr    go to state 61
    negExpr     go to state 62
    relExpr     go to state 63
    artExpr1    go to state 64
    artExpr2    go to state 65
    factor      go to state 66
    constant    go to state 67
    call        go to state 68
    pertExpr    go to state 69
    setExpr     go to state 70
    elem        go to state 71


State 371

   84 setExpr: SETOP '(' pertExpr ')' .

    RELOP   reduce using rule 84 (setExpr)
    ARTOP1  reduce using rule 84 (setExpr)
    ARTOP2  reduce using rule 84 (setExpr)
    DISJ    reduce using rule 84 (setExpr)
    CONJ    reduce using rule 84 (setExpr)
    ','     reduce using rule 84 (setExpr)
    ')'     reduce using rule 84 (setExpr)


State 372

   27 iterStmt: FOR '(' exprStmt exprStmt expression ')' body .

    error    reduce using rule 27 (iterStmt)
    TYPE     reduce using rule 27 (iterStmt)
    SETOP    reduce using rule 27 (iterStmt)
    ID       reduce using rule 27 (iterStmt)
    IF       reduce using rule 27 (iterStmt)
    ELSE     reduce using rule 27 (iterStmt)
    FOR      reduce using rule 27 (iterStmt)
    RETURN   reduce using rule 27 (iterStmt)
    FORALL   reduce using rule 27 (iterStmt)
    IS_SET   reduce using rule 27 (iterStmt)
    EXISTS   reduce using rule 27 (iterStmt)
    NEG      reduce using rule 27 (iterStmt)
    READ     reduce using rule 27 (iterStmt)
    WRITE    reduce using rule 27 (iterStmt)
    WRITELN  reduce using rule 27 (iterStmt)
    INTEGER  reduce using rule 27 (iterStmt)
    FLOAT    reduce using rule 27 (iterStmt)
    EMPTY    reduce using rule 27 (iterStmt)
    ';'      reduce using rule 27 (iterStmt)
    '}'      reduce using rule 27 (iterStmt)
    '('      reduce using rule 27 (iterStmt)
