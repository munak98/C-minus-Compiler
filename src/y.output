Grammar

    0 $accept: program $end

    1 program: program declaration
    2        | declaration

    3 declaration: varDecl
    4            | funcDecl

    5 varDecl: TYPE varList ';'

    6 varList: varList ',' ID
    7        | ID

    8 funcDecl: TYPE ID '(' arguments ')' '{' funcBody '}'

    9 arguments: %empty
   10          | argsList

   11 argsList: argsList ',' TYPE ID
   12         | TYPE ID

   13 funcBody: %empty
   14         | funcBody varDecl
   15         | funcBody funcDecl
   16         | funcBody stmt

   17 stmt: exprStmt
   18     | returnStmt
   19     | iterStmt
   20     | condStmt

   21 iterStmt: FOR '(' exprStmt exprStmt ')' body
   22         | FOR '(' exprStmt exprStmt expression ')' body
   23         | FORALL '(' elem IN set ')' body

   24 body: '{' funcBody '}'
   25     | stmt
   26     | varDecl
   27     | funcDecl

   28 condStmt: IF '(' expression ')' body
   29         | IF '(' expression ')' body ELSE body

   30 returnStmt: RETURN exprStmt

   31 exprStmt: expression ';'
   32         | ';'
   33         | error ';'

   34 expression: assign
   35           | inExpr
   36           | outExpr
   37           | simpleExpr
   38           | setExpr

   39 assign: ID '=' simpleExpr

   40 inExpr: READ '(' ID ')'

   41 outExpr: WRITE '(' output ')'
   42        | WRITELN '(' output ')'

   43 output: ID
   44       | CHAR
   45       | STRING

   46 simpleExpr: simpleExpr DISJ disjExpr
   47           | disjExpr

   48 disjExpr: disjExpr CONJ negExpr
   49         | negExpr

   50 negExpr: '!' negExpr
   51        | relExpr

   52 relExpr: relExpr RELOP artExpr1
   53        | artExpr1

   54 artExpr1: artExpr1 artop1 artExpr2
   55         | artExpr2

   56 artop1: '+'
   57       | '-'

   58 artExpr2: artExpr2 artop2 factor
   59         | factor

   60 artop2: '*'
   61       | '/'

   62 factor: ID
   63       | '(' simpleExpr ')'
   64       | constant
   65       | call
   66       | IS_SET '(' ID ')'
   67       | elem IN set

   68 constant: INTEGER
   69         | FLOAT
   70         | EMPTY

   71 call: ID '(' params ')'

   72 params: %empty
   73       | paramList

   74 paramList: paramList ',' simpleExpr
   75          | simpleExpr

   76 setExpr: setOp '(' elem IN set ')'
   77        | EXISTS '(' elem IN set ')'

   78 setOp: REMOVE
   79      | ADD

   80 elem: ID
   81     | '(' EXISTS '(' elem IN set ')' ')'
   82     | call
   83     | '(' simpleExpr ')'
   84     | constant

   85 set: ID
   86    | setOp '(' elem IN set ')'


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 50
    '(' (40) 8 21 22 23 28 29 40 41 42 63 66 71 76 77 81 83 86
    ')' (41) 8 21 22 23 28 29 40 41 42 63 66 71 76 77 81 83 86
    '*' (42) 60
    '+' (43) 56
    ',' (44) 6 11 74
    '-' (45) 57
    '/' (47) 61
    ';' (59) 5 31 32 33
    '=' (61) 39
    '{' (123) 8 24
    '}' (125) 8 24
    error (256) 33
    TYPE <ival> (258) 5 8 11 12
    ID <yyref> (259) 6 7 8 11 12 39 40 43 62 66 71 80 85
    RELOP <ival> (260) 52
    IF (261) 28 29
    ELSE (262) 29
    FOR (263) 21 22
    RETURN (264) 30
    FORALL (265) 23
    IN (266) 23 67 76 77 81 86
    IS_SET (267) 66
    ADD (268) 79
    REMOVE (269) 78
    EXISTS (270) 77 81
    READ (271) 40
    WRITE (272) 41
    WRITELN (273) 42
    INTEGER <ival> (274) 68
    FLOAT <fval> (275) 69
    CHAR <cval> (276) 44
    STRING <sval> (277) 45
    EMPTY (278) 70
    DISJ (279) 46
    CONJ (280) 48
    THEN (281)


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    program <tval> (40)
        on left: 1 2
        on right: 0 1
    declaration <tval> (41)
        on left: 3 4
        on right: 1 2
    varDecl <tval> (42)
        on left: 5
        on right: 3 14 26
    varList (43)
        on left: 6 7
        on right: 5 6
    funcDecl <tval> (44)
        on left: 8
        on right: 4 15 27
    arguments (45)
        on left: 9 10
        on right: 8
    argsList (46)
        on left: 11 12
        on right: 10 11
    funcBody (47)
        on left: 13 14 15 16
        on right: 8 14 15 16 24
    stmt (48)
        on left: 17 18 19 20
        on right: 16 25
    iterStmt (49)
        on left: 21 22 23
        on right: 19
    body (50)
        on left: 24 25 26 27
        on right: 21 22 23 28 29
    condStmt (51)
        on left: 28 29
        on right: 20
    returnStmt (52)
        on left: 30
        on right: 18
    exprStmt (53)
        on left: 31 32 33
        on right: 17 21 22 30
    expression (54)
        on left: 34 35 36 37 38
        on right: 22 28 29 31
    assign (55)
        on left: 39
        on right: 34
    inExpr (56)
        on left: 40
        on right: 35
    outExpr (57)
        on left: 41 42
        on right: 36
    output (58)
        on left: 43 44 45
        on right: 41 42
    simpleExpr (59)
        on left: 46 47
        on right: 37 39 46 63 74 75 83
    disjExpr (60)
        on left: 48 49
        on right: 46 47 48
    negExpr (61)
        on left: 50 51
        on right: 48 49 50
    relExpr (62)
        on left: 52 53
        on right: 51 52
    artExpr1 (63)
        on left: 54 55
        on right: 52 53 54
    artop1 (64)
        on left: 56 57
        on right: 54
    artExpr2 (65)
        on left: 58 59
        on right: 54 55 58
    artop2 (66)
        on left: 60 61
        on right: 58
    factor (67)
        on left: 62 63 64 65 66 67
        on right: 58 59
    constant (68)
        on left: 68 69 70
        on right: 64 84
    call (69)
        on left: 71
        on right: 65 82
    params (70)
        on left: 72 73
        on right: 71
    paramList (71)
        on left: 74 75
        on right: 73 74
    setExpr (72)
        on left: 76 77
        on right: 38
    setOp (73)
        on left: 78 79
        on right: 76 86
    elem (74)
        on left: 80 81 82 83 84
        on right: 23 67 76 77 81 86
    set (75)
        on left: 85 86
        on right: 23 67 76 77 81 86


State 0

    0 $accept: . program $end

    TYPE  shift, and go to state 1

    program      go to state 2
    declaration  go to state 3
    varDecl      go to state 4
    funcDecl     go to state 5


State 1

    5 varDecl: TYPE . varList ';'
    8 funcDecl: TYPE . ID '(' arguments ')' '{' funcBody '}'

    ID  shift, and go to state 6

    varList  go to state 7


State 2

    0 $accept: program . $end
    1 program: program . declaration

    $end  shift, and go to state 8
    TYPE  shift, and go to state 1

    declaration  go to state 9
    varDecl      go to state 4
    funcDecl     go to state 5


State 3

    2 program: declaration .

    $default  reduce using rule 2 (program)


State 4

    3 declaration: varDecl .

    $default  reduce using rule 3 (declaration)


State 5

    4 declaration: funcDecl .

    $default  reduce using rule 4 (declaration)


State 6

    7 varList: ID .
    8 funcDecl: TYPE ID . '(' arguments ')' '{' funcBody '}'

    '('  shift, and go to state 10

    $default  reduce using rule 7 (varList)


State 7

    5 varDecl: TYPE varList . ';'
    6 varList: varList . ',' ID

    ';'  shift, and go to state 11
    ','  shift, and go to state 12


State 8

    0 $accept: program $end .

    $default  accept


State 9

    1 program: program declaration .

    $default  reduce using rule 1 (program)


State 10

    8 funcDecl: TYPE ID '(' . arguments ')' '{' funcBody '}'

    TYPE  shift, and go to state 13

    $default  reduce using rule 9 (arguments)

    arguments  go to state 14
    argsList   go to state 15


State 11

    5 varDecl: TYPE varList ';' .

    $default  reduce using rule 5 (varDecl)


State 12

    6 varList: varList ',' . ID

    ID  shift, and go to state 16


State 13

   12 argsList: TYPE . ID

    ID  shift, and go to state 17


State 14

    8 funcDecl: TYPE ID '(' arguments . ')' '{' funcBody '}'

    ')'  shift, and go to state 18


State 15

   10 arguments: argsList .
   11 argsList: argsList . ',' TYPE ID

    ','  shift, and go to state 19

    $default  reduce using rule 10 (arguments)


State 16

    6 varList: varList ',' ID .

    $default  reduce using rule 6 (varList)


State 17

   12 argsList: TYPE ID .

    $default  reduce using rule 12 (argsList)


State 18

    8 funcDecl: TYPE ID '(' arguments ')' . '{' funcBody '}'

    '{'  shift, and go to state 20


State 19

   11 argsList: argsList ',' . TYPE ID

    TYPE  shift, and go to state 21


State 20

    8 funcDecl: TYPE ID '(' arguments ')' '{' . funcBody '}'

    $default  reduce using rule 13 (funcBody)

    funcBody  go to state 22


State 21

   11 argsList: argsList ',' TYPE . ID

    ID  shift, and go to state 23


State 22

    8 funcDecl: TYPE ID '(' arguments ')' '{' funcBody . '}'
   14 funcBody: funcBody . varDecl
   15         | funcBody . funcDecl
   16         | funcBody . stmt

    error    shift, and go to state 24
    TYPE     shift, and go to state 1
    ID       shift, and go to state 25
    IF       shift, and go to state 26
    FOR      shift, and go to state 27
    RETURN   shift, and go to state 28
    FORALL   shift, and go to state 29
    IS_SET   shift, and go to state 30
    ADD      shift, and go to state 31
    REMOVE   shift, and go to state 32
    EXISTS   shift, and go to state 33
    READ     shift, and go to state 34
    WRITE    shift, and go to state 35
    WRITELN  shift, and go to state 36
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    ';'      shift, and go to state 40
    '('      shift, and go to state 41
    '}'      shift, and go to state 42
    '!'      shift, and go to state 43

    varDecl     go to state 44
    funcDecl    go to state 45
    stmt        go to state 46
    iterStmt    go to state 47
    condStmt    go to state 48
    returnStmt  go to state 49
    exprStmt    go to state 50
    expression  go to state 51
    assign      go to state 52
    inExpr      go to state 53
    outExpr     go to state 54
    simpleExpr  go to state 55
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    setExpr     go to state 64
    setOp       go to state 65
    elem        go to state 66


State 23

   11 argsList: argsList ',' TYPE ID .

    $default  reduce using rule 11 (argsList)


State 24

   33 exprStmt: error . ';'

    ';'  shift, and go to state 67


State 25

   39 assign: ID . '=' simpleExpr
   62 factor: ID .
   71 call: ID . '(' params ')'
   80 elem: ID .

    '('  shift, and go to state 68
    '='  shift, and go to state 69

    IN        reduce using rule 80 (elem)
    $default  reduce using rule 62 (factor)


State 26

   28 condStmt: IF . '(' expression ')' body
   29         | IF . '(' expression ')' body ELSE body

    '('  shift, and go to state 70


State 27

   21 iterStmt: FOR . '(' exprStmt exprStmt ')' body
   22         | FOR . '(' exprStmt exprStmt expression ')' body

    '('  shift, and go to state 71


State 28

   30 returnStmt: RETURN . exprStmt

    error    shift, and go to state 24
    ID       shift, and go to state 25
    IS_SET   shift, and go to state 30
    ADD      shift, and go to state 31
    REMOVE   shift, and go to state 32
    EXISTS   shift, and go to state 33
    READ     shift, and go to state 34
    WRITE    shift, and go to state 35
    WRITELN  shift, and go to state 36
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    ';'      shift, and go to state 40
    '('      shift, and go to state 41
    '!'      shift, and go to state 43

    exprStmt    go to state 72
    expression  go to state 51
    assign      go to state 52
    inExpr      go to state 53
    outExpr     go to state 54
    simpleExpr  go to state 55
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    setExpr     go to state 64
    setOp       go to state 65
    elem        go to state 66


State 29

   23 iterStmt: FORALL . '(' elem IN set ')' body

    '('  shift, and go to state 73


State 30

   66 factor: IS_SET . '(' ID ')'

    '('  shift, and go to state 74


State 31

   79 setOp: ADD .

    $default  reduce using rule 79 (setOp)


State 32

   78 setOp: REMOVE .

    $default  reduce using rule 78 (setOp)


State 33

   77 setExpr: EXISTS . '(' elem IN set ')'

    '('  shift, and go to state 75


State 34

   40 inExpr: READ . '(' ID ')'

    '('  shift, and go to state 76


State 35

   41 outExpr: WRITE . '(' output ')'

    '('  shift, and go to state 77


State 36

   42 outExpr: WRITELN . '(' output ')'

    '('  shift, and go to state 78


State 37

   68 constant: INTEGER .

    $default  reduce using rule 68 (constant)


State 38

   69 constant: FLOAT .

    $default  reduce using rule 69 (constant)


State 39

   70 constant: EMPTY .

    $default  reduce using rule 70 (constant)


State 40

   32 exprStmt: ';' .

    $default  reduce using rule 32 (exprStmt)


State 41

   63 factor: '(' . simpleExpr ')'
   81 elem: '(' . EXISTS '(' elem IN set ')' ')'
   83     | '(' . simpleExpr ')'

    ID       shift, and go to state 79
    IS_SET   shift, and go to state 30
    EXISTS   shift, and go to state 80
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 41
    '!'      shift, and go to state 43

    simpleExpr  go to state 81
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    elem        go to state 66


State 42

    8 funcDecl: TYPE ID '(' arguments ')' '{' funcBody '}' .

    $default  reduce using rule 8 (funcDecl)


State 43

   50 negExpr: '!' . negExpr

    ID       shift, and go to state 79
    IS_SET   shift, and go to state 30
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 41
    '!'      shift, and go to state 43

    negExpr   go to state 82
    relExpr   go to state 58
    artExpr1  go to state 59
    artExpr2  go to state 60
    factor    go to state 61
    constant  go to state 62
    call      go to state 63
    elem      go to state 66


State 44

   14 funcBody: funcBody varDecl .

    $default  reduce using rule 14 (funcBody)


State 45

   15 funcBody: funcBody funcDecl .

    $default  reduce using rule 15 (funcBody)


State 46

   16 funcBody: funcBody stmt .

    $default  reduce using rule 16 (funcBody)


State 47

   19 stmt: iterStmt .

    $default  reduce using rule 19 (stmt)


State 48

   20 stmt: condStmt .

    $default  reduce using rule 20 (stmt)


State 49

   18 stmt: returnStmt .

    $default  reduce using rule 18 (stmt)


State 50

   17 stmt: exprStmt .

    $default  reduce using rule 17 (stmt)


State 51

   31 exprStmt: expression . ';'

    ';'  shift, and go to state 83


State 52

   34 expression: assign .

    $default  reduce using rule 34 (expression)


State 53

   35 expression: inExpr .

    $default  reduce using rule 35 (expression)


State 54

   36 expression: outExpr .

    $default  reduce using rule 36 (expression)


State 55

   37 expression: simpleExpr .
   46 simpleExpr: simpleExpr . DISJ disjExpr

    DISJ  shift, and go to state 84

    $default  reduce using rule 37 (expression)


State 56

   47 simpleExpr: disjExpr .
   48 disjExpr: disjExpr . CONJ negExpr

    CONJ  shift, and go to state 85

    $default  reduce using rule 47 (simpleExpr)


State 57

   49 disjExpr: negExpr .

    $default  reduce using rule 49 (disjExpr)


State 58

   51 negExpr: relExpr .
   52 relExpr: relExpr . RELOP artExpr1

    RELOP  shift, and go to state 86

    $default  reduce using rule 51 (negExpr)


State 59

   53 relExpr: artExpr1 .
   54 artExpr1: artExpr1 . artop1 artExpr2

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88

    $default  reduce using rule 53 (relExpr)

    artop1  go to state 89


State 60

   55 artExpr1: artExpr2 .
   58 artExpr2: artExpr2 . artop2 factor

    '*'  shift, and go to state 90
    '/'  shift, and go to state 91

    $default  reduce using rule 55 (artExpr1)

    artop2  go to state 92


State 61

   59 artExpr2: factor .

    $default  reduce using rule 59 (artExpr2)


State 62

   64 factor: constant .
   84 elem: constant .

    IN        reduce using rule 84 (elem)
    $default  reduce using rule 64 (factor)


State 63

   65 factor: call .
   82 elem: call .

    IN        reduce using rule 82 (elem)
    $default  reduce using rule 65 (factor)


State 64

   38 expression: setExpr .

    $default  reduce using rule 38 (expression)


State 65

   76 setExpr: setOp . '(' elem IN set ')'

    '('  shift, and go to state 93


State 66

   67 factor: elem . IN set

    IN  shift, and go to state 94


State 67

   33 exprStmt: error ';' .

    $default  reduce using rule 33 (exprStmt)


State 68

   71 call: ID '(' . params ')'

    ID       shift, and go to state 79
    IS_SET   shift, and go to state 30
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 41
    '!'      shift, and go to state 43

    $default  reduce using rule 72 (params)

    simpleExpr  go to state 95
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    params      go to state 96
    paramList   go to state 97
    elem        go to state 66


State 69

   39 assign: ID '=' . simpleExpr

    ID       shift, and go to state 79
    IS_SET   shift, and go to state 30
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 41
    '!'      shift, and go to state 43

    simpleExpr  go to state 98
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    elem        go to state 66


State 70

   28 condStmt: IF '(' . expression ')' body
   29         | IF '(' . expression ')' body ELSE body

    ID       shift, and go to state 25
    IS_SET   shift, and go to state 30
    ADD      shift, and go to state 31
    REMOVE   shift, and go to state 32
    EXISTS   shift, and go to state 33
    READ     shift, and go to state 34
    WRITE    shift, and go to state 35
    WRITELN  shift, and go to state 36
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 41
    '!'      shift, and go to state 43

    expression  go to state 99
    assign      go to state 52
    inExpr      go to state 53
    outExpr     go to state 54
    simpleExpr  go to state 55
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    setExpr     go to state 64
    setOp       go to state 65
    elem        go to state 66


State 71

   21 iterStmt: FOR '(' . exprStmt exprStmt ')' body
   22         | FOR '(' . exprStmt exprStmt expression ')' body

    error    shift, and go to state 24
    ID       shift, and go to state 25
    IS_SET   shift, and go to state 30
    ADD      shift, and go to state 31
    REMOVE   shift, and go to state 32
    EXISTS   shift, and go to state 33
    READ     shift, and go to state 34
    WRITE    shift, and go to state 35
    WRITELN  shift, and go to state 36
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    ';'      shift, and go to state 40
    '('      shift, and go to state 41
    '!'      shift, and go to state 43

    exprStmt    go to state 100
    expression  go to state 51
    assign      go to state 52
    inExpr      go to state 53
    outExpr     go to state 54
    simpleExpr  go to state 55
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    setExpr     go to state 64
    setOp       go to state 65
    elem        go to state 66


State 72

   30 returnStmt: RETURN exprStmt .

    $default  reduce using rule 30 (returnStmt)


State 73

   23 iterStmt: FORALL '(' . elem IN set ')' body

    ID       shift, and go to state 101
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 102

    constant  go to state 103
    call      go to state 104
    elem      go to state 105


State 74

   66 factor: IS_SET '(' . ID ')'

    ID  shift, and go to state 106


State 75

   77 setExpr: EXISTS '(' . elem IN set ')'

    ID       shift, and go to state 101
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 102

    constant  go to state 103
    call      go to state 104
    elem      go to state 107


State 76

   40 inExpr: READ '(' . ID ')'

    ID  shift, and go to state 108


State 77

   41 outExpr: WRITE '(' . output ')'

    ID      shift, and go to state 109
    CHAR    shift, and go to state 110
    STRING  shift, and go to state 111

    output  go to state 112


State 78

   42 outExpr: WRITELN '(' . output ')'

    ID      shift, and go to state 109
    CHAR    shift, and go to state 110
    STRING  shift, and go to state 111

    output  go to state 113


State 79

   62 factor: ID .
   71 call: ID . '(' params ')'
   80 elem: ID .

    '('  shift, and go to state 68

    IN        reduce using rule 80 (elem)
    $default  reduce using rule 62 (factor)


State 80

   81 elem: '(' EXISTS . '(' elem IN set ')' ')'

    '('  shift, and go to state 114


State 81

   46 simpleExpr: simpleExpr . DISJ disjExpr
   63 factor: '(' simpleExpr . ')'
   83 elem: '(' simpleExpr . ')'

    DISJ  shift, and go to state 84
    ')'   shift, and go to state 115


State 82

   50 negExpr: '!' negExpr .

    $default  reduce using rule 50 (negExpr)


State 83

   31 exprStmt: expression ';' .

    $default  reduce using rule 31 (exprStmt)


State 84

   46 simpleExpr: simpleExpr DISJ . disjExpr

    ID       shift, and go to state 79
    IS_SET   shift, and go to state 30
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 41
    '!'      shift, and go to state 43

    disjExpr  go to state 116
    negExpr   go to state 57
    relExpr   go to state 58
    artExpr1  go to state 59
    artExpr2  go to state 60
    factor    go to state 61
    constant  go to state 62
    call      go to state 63
    elem      go to state 66


State 85

   48 disjExpr: disjExpr CONJ . negExpr

    ID       shift, and go to state 79
    IS_SET   shift, and go to state 30
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 41
    '!'      shift, and go to state 43

    negExpr   go to state 117
    relExpr   go to state 58
    artExpr1  go to state 59
    artExpr2  go to state 60
    factor    go to state 61
    constant  go to state 62
    call      go to state 63
    elem      go to state 66


State 86

   52 relExpr: relExpr RELOP . artExpr1

    ID       shift, and go to state 79
    IS_SET   shift, and go to state 30
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 41

    artExpr1  go to state 118
    artExpr2  go to state 60
    factor    go to state 61
    constant  go to state 62
    call      go to state 63
    elem      go to state 66


State 87

   56 artop1: '+' .

    $default  reduce using rule 56 (artop1)


State 88

   57 artop1: '-' .

    $default  reduce using rule 57 (artop1)


State 89

   54 artExpr1: artExpr1 artop1 . artExpr2

    ID       shift, and go to state 79
    IS_SET   shift, and go to state 30
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 41

    artExpr2  go to state 119
    factor    go to state 61
    constant  go to state 62
    call      go to state 63
    elem      go to state 66


State 90

   60 artop2: '*' .

    $default  reduce using rule 60 (artop2)


State 91

   61 artop2: '/' .

    $default  reduce using rule 61 (artop2)


State 92

   58 artExpr2: artExpr2 artop2 . factor

    ID       shift, and go to state 79
    IS_SET   shift, and go to state 30
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 41

    factor    go to state 120
    constant  go to state 62
    call      go to state 63
    elem      go to state 66


State 93

   76 setExpr: setOp '(' . elem IN set ')'

    ID       shift, and go to state 101
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 102

    constant  go to state 103
    call      go to state 104
    elem      go to state 121


State 94

   67 factor: elem IN . set

    ID      shift, and go to state 122
    ADD     shift, and go to state 31
    REMOVE  shift, and go to state 32

    setOp  go to state 123
    set    go to state 124


State 95

   46 simpleExpr: simpleExpr . DISJ disjExpr
   75 paramList: simpleExpr .

    DISJ  shift, and go to state 84

    $default  reduce using rule 75 (paramList)


State 96

   71 call: ID '(' params . ')'

    ')'  shift, and go to state 125


State 97

   73 params: paramList .
   74 paramList: paramList . ',' simpleExpr

    ','  shift, and go to state 126

    $default  reduce using rule 73 (params)


State 98

   39 assign: ID '=' simpleExpr .
   46 simpleExpr: simpleExpr . DISJ disjExpr

    DISJ  shift, and go to state 84

    $default  reduce using rule 39 (assign)


State 99

   28 condStmt: IF '(' expression . ')' body
   29         | IF '(' expression . ')' body ELSE body

    ')'  shift, and go to state 127


State 100

   21 iterStmt: FOR '(' exprStmt . exprStmt ')' body
   22         | FOR '(' exprStmt . exprStmt expression ')' body

    error    shift, and go to state 24
    ID       shift, and go to state 25
    IS_SET   shift, and go to state 30
    ADD      shift, and go to state 31
    REMOVE   shift, and go to state 32
    EXISTS   shift, and go to state 33
    READ     shift, and go to state 34
    WRITE    shift, and go to state 35
    WRITELN  shift, and go to state 36
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    ';'      shift, and go to state 40
    '('      shift, and go to state 41
    '!'      shift, and go to state 43

    exprStmt    go to state 128
    expression  go to state 51
    assign      go to state 52
    inExpr      go to state 53
    outExpr     go to state 54
    simpleExpr  go to state 55
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    setExpr     go to state 64
    setOp       go to state 65
    elem        go to state 66


State 101

   71 call: ID . '(' params ')'
   80 elem: ID .

    '('  shift, and go to state 68

    $default  reduce using rule 80 (elem)


State 102

   81 elem: '(' . EXISTS '(' elem IN set ')' ')'
   83     | '(' . simpleExpr ')'

    ID       shift, and go to state 79
    IS_SET   shift, and go to state 30
    EXISTS   shift, and go to state 80
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 41
    '!'      shift, and go to state 43

    simpleExpr  go to state 129
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    elem        go to state 66


State 103

   84 elem: constant .

    $default  reduce using rule 84 (elem)


State 104

   82 elem: call .

    $default  reduce using rule 82 (elem)


State 105

   23 iterStmt: FORALL '(' elem . IN set ')' body

    IN  shift, and go to state 130


State 106

   66 factor: IS_SET '(' ID . ')'

    ')'  shift, and go to state 131


State 107

   77 setExpr: EXISTS '(' elem . IN set ')'

    IN  shift, and go to state 132


State 108

   40 inExpr: READ '(' ID . ')'

    ')'  shift, and go to state 133


State 109

   43 output: ID .

    $default  reduce using rule 43 (output)


State 110

   44 output: CHAR .

    $default  reduce using rule 44 (output)


State 111

   45 output: STRING .

    $default  reduce using rule 45 (output)


State 112

   41 outExpr: WRITE '(' output . ')'

    ')'  shift, and go to state 134


State 113

   42 outExpr: WRITELN '(' output . ')'

    ')'  shift, and go to state 135


State 114

   81 elem: '(' EXISTS '(' . elem IN set ')' ')'

    ID       shift, and go to state 101
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 102

    constant  go to state 103
    call      go to state 104
    elem      go to state 136


State 115

   63 factor: '(' simpleExpr ')' .
   83 elem: '(' simpleExpr ')' .

    IN        reduce using rule 83 (elem)
    $default  reduce using rule 63 (factor)


State 116

   46 simpleExpr: simpleExpr DISJ disjExpr .
   48 disjExpr: disjExpr . CONJ negExpr

    CONJ  shift, and go to state 85

    $default  reduce using rule 46 (simpleExpr)


State 117

   48 disjExpr: disjExpr CONJ negExpr .

    $default  reduce using rule 48 (disjExpr)


State 118

   52 relExpr: relExpr RELOP artExpr1 .
   54 artExpr1: artExpr1 . artop1 artExpr2

    '+'  shift, and go to state 87
    '-'  shift, and go to state 88

    $default  reduce using rule 52 (relExpr)

    artop1  go to state 89


State 119

   54 artExpr1: artExpr1 artop1 artExpr2 .
   58 artExpr2: artExpr2 . artop2 factor

    '*'  shift, and go to state 90
    '/'  shift, and go to state 91

    $default  reduce using rule 54 (artExpr1)

    artop2  go to state 92


State 120

   58 artExpr2: artExpr2 artop2 factor .

    $default  reduce using rule 58 (artExpr2)


State 121

   76 setExpr: setOp '(' elem . IN set ')'

    IN  shift, and go to state 137


State 122

   85 set: ID .

    $default  reduce using rule 85 (set)


State 123

   86 set: setOp . '(' elem IN set ')'

    '('  shift, and go to state 138


State 124

   67 factor: elem IN set .

    $default  reduce using rule 67 (factor)


State 125

   71 call: ID '(' params ')' .

    $default  reduce using rule 71 (call)


State 126

   74 paramList: paramList ',' . simpleExpr

    ID       shift, and go to state 79
    IS_SET   shift, and go to state 30
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 41
    '!'      shift, and go to state 43

    simpleExpr  go to state 139
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    elem        go to state 66


State 127

   28 condStmt: IF '(' expression ')' . body
   29         | IF '(' expression ')' . body ELSE body

    error    shift, and go to state 24
    TYPE     shift, and go to state 1
    ID       shift, and go to state 25
    IF       shift, and go to state 26
    FOR      shift, and go to state 27
    RETURN   shift, and go to state 28
    FORALL   shift, and go to state 29
    IS_SET   shift, and go to state 30
    ADD      shift, and go to state 31
    REMOVE   shift, and go to state 32
    EXISTS   shift, and go to state 33
    READ     shift, and go to state 34
    WRITE    shift, and go to state 35
    WRITELN  shift, and go to state 36
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    ';'      shift, and go to state 40
    '('      shift, and go to state 41
    '{'      shift, and go to state 140
    '!'      shift, and go to state 43

    varDecl     go to state 141
    funcDecl    go to state 142
    stmt        go to state 143
    iterStmt    go to state 47
    body        go to state 144
    condStmt    go to state 48
    returnStmt  go to state 49
    exprStmt    go to state 50
    expression  go to state 51
    assign      go to state 52
    inExpr      go to state 53
    outExpr     go to state 54
    simpleExpr  go to state 55
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    setExpr     go to state 64
    setOp       go to state 65
    elem        go to state 66


State 128

   21 iterStmt: FOR '(' exprStmt exprStmt . ')' body
   22         | FOR '(' exprStmt exprStmt . expression ')' body

    ID       shift, and go to state 25
    IS_SET   shift, and go to state 30
    ADD      shift, and go to state 31
    REMOVE   shift, and go to state 32
    EXISTS   shift, and go to state 33
    READ     shift, and go to state 34
    WRITE    shift, and go to state 35
    WRITELN  shift, and go to state 36
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 41
    ')'      shift, and go to state 145
    '!'      shift, and go to state 43

    expression  go to state 146
    assign      go to state 52
    inExpr      go to state 53
    outExpr     go to state 54
    simpleExpr  go to state 55
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    setExpr     go to state 64
    setOp       go to state 65
    elem        go to state 66


State 129

   46 simpleExpr: simpleExpr . DISJ disjExpr
   83 elem: '(' simpleExpr . ')'

    DISJ  shift, and go to state 84
    ')'   shift, and go to state 147


State 130

   23 iterStmt: FORALL '(' elem IN . set ')' body

    ID      shift, and go to state 122
    ADD     shift, and go to state 31
    REMOVE  shift, and go to state 32

    setOp  go to state 123
    set    go to state 148


State 131

   66 factor: IS_SET '(' ID ')' .

    $default  reduce using rule 66 (factor)


State 132

   77 setExpr: EXISTS '(' elem IN . set ')'

    ID      shift, and go to state 122
    ADD     shift, and go to state 31
    REMOVE  shift, and go to state 32

    setOp  go to state 123
    set    go to state 149


State 133

   40 inExpr: READ '(' ID ')' .

    $default  reduce using rule 40 (inExpr)


State 134

   41 outExpr: WRITE '(' output ')' .

    $default  reduce using rule 41 (outExpr)


State 135

   42 outExpr: WRITELN '(' output ')' .

    $default  reduce using rule 42 (outExpr)


State 136

   81 elem: '(' EXISTS '(' elem . IN set ')' ')'

    IN  shift, and go to state 150


State 137

   76 setExpr: setOp '(' elem IN . set ')'

    ID      shift, and go to state 122
    ADD     shift, and go to state 31
    REMOVE  shift, and go to state 32

    setOp  go to state 123
    set    go to state 151


State 138

   86 set: setOp '(' . elem IN set ')'

    ID       shift, and go to state 101
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    '('      shift, and go to state 102

    constant  go to state 103
    call      go to state 104
    elem      go to state 152


State 139

   46 simpleExpr: simpleExpr . DISJ disjExpr
   74 paramList: paramList ',' simpleExpr .

    DISJ  shift, and go to state 84

    $default  reduce using rule 74 (paramList)


State 140

   24 body: '{' . funcBody '}'

    $default  reduce using rule 13 (funcBody)

    funcBody  go to state 153


State 141

   26 body: varDecl .

    $default  reduce using rule 26 (body)


State 142

   27 body: funcDecl .

    $default  reduce using rule 27 (body)


State 143

   25 body: stmt .

    $default  reduce using rule 25 (body)


State 144

   28 condStmt: IF '(' expression ')' body .
   29         | IF '(' expression ')' body . ELSE body

    ELSE  shift, and go to state 154

    $default  reduce using rule 28 (condStmt)


State 145

   21 iterStmt: FOR '(' exprStmt exprStmt ')' . body

    error    shift, and go to state 24
    TYPE     shift, and go to state 1
    ID       shift, and go to state 25
    IF       shift, and go to state 26
    FOR      shift, and go to state 27
    RETURN   shift, and go to state 28
    FORALL   shift, and go to state 29
    IS_SET   shift, and go to state 30
    ADD      shift, and go to state 31
    REMOVE   shift, and go to state 32
    EXISTS   shift, and go to state 33
    READ     shift, and go to state 34
    WRITE    shift, and go to state 35
    WRITELN  shift, and go to state 36
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    ';'      shift, and go to state 40
    '('      shift, and go to state 41
    '{'      shift, and go to state 140
    '!'      shift, and go to state 43

    varDecl     go to state 141
    funcDecl    go to state 142
    stmt        go to state 143
    iterStmt    go to state 47
    body        go to state 155
    condStmt    go to state 48
    returnStmt  go to state 49
    exprStmt    go to state 50
    expression  go to state 51
    assign      go to state 52
    inExpr      go to state 53
    outExpr     go to state 54
    simpleExpr  go to state 55
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    setExpr     go to state 64
    setOp       go to state 65
    elem        go to state 66


State 146

   22 iterStmt: FOR '(' exprStmt exprStmt expression . ')' body

    ')'  shift, and go to state 156


State 147

   83 elem: '(' simpleExpr ')' .

    $default  reduce using rule 83 (elem)


State 148

   23 iterStmt: FORALL '(' elem IN set . ')' body

    ')'  shift, and go to state 157


State 149

   77 setExpr: EXISTS '(' elem IN set . ')'

    ')'  shift, and go to state 158


State 150

   81 elem: '(' EXISTS '(' elem IN . set ')' ')'

    ID      shift, and go to state 122
    ADD     shift, and go to state 31
    REMOVE  shift, and go to state 32

    setOp  go to state 123
    set    go to state 159


State 151

   76 setExpr: setOp '(' elem IN set . ')'

    ')'  shift, and go to state 160


State 152

   86 set: setOp '(' elem . IN set ')'

    IN  shift, and go to state 161


State 153

   14 funcBody: funcBody . varDecl
   15         | funcBody . funcDecl
   16         | funcBody . stmt
   24 body: '{' funcBody . '}'

    error    shift, and go to state 24
    TYPE     shift, and go to state 1
    ID       shift, and go to state 25
    IF       shift, and go to state 26
    FOR      shift, and go to state 27
    RETURN   shift, and go to state 28
    FORALL   shift, and go to state 29
    IS_SET   shift, and go to state 30
    ADD      shift, and go to state 31
    REMOVE   shift, and go to state 32
    EXISTS   shift, and go to state 33
    READ     shift, and go to state 34
    WRITE    shift, and go to state 35
    WRITELN  shift, and go to state 36
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    ';'      shift, and go to state 40
    '('      shift, and go to state 41
    '}'      shift, and go to state 162
    '!'      shift, and go to state 43

    varDecl     go to state 44
    funcDecl    go to state 45
    stmt        go to state 46
    iterStmt    go to state 47
    condStmt    go to state 48
    returnStmt  go to state 49
    exprStmt    go to state 50
    expression  go to state 51
    assign      go to state 52
    inExpr      go to state 53
    outExpr     go to state 54
    simpleExpr  go to state 55
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    setExpr     go to state 64
    setOp       go to state 65
    elem        go to state 66


State 154

   29 condStmt: IF '(' expression ')' body ELSE . body

    error    shift, and go to state 24
    TYPE     shift, and go to state 1
    ID       shift, and go to state 25
    IF       shift, and go to state 26
    FOR      shift, and go to state 27
    RETURN   shift, and go to state 28
    FORALL   shift, and go to state 29
    IS_SET   shift, and go to state 30
    ADD      shift, and go to state 31
    REMOVE   shift, and go to state 32
    EXISTS   shift, and go to state 33
    READ     shift, and go to state 34
    WRITE    shift, and go to state 35
    WRITELN  shift, and go to state 36
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    ';'      shift, and go to state 40
    '('      shift, and go to state 41
    '{'      shift, and go to state 140
    '!'      shift, and go to state 43

    varDecl     go to state 141
    funcDecl    go to state 142
    stmt        go to state 143
    iterStmt    go to state 47
    body        go to state 163
    condStmt    go to state 48
    returnStmt  go to state 49
    exprStmt    go to state 50
    expression  go to state 51
    assign      go to state 52
    inExpr      go to state 53
    outExpr     go to state 54
    simpleExpr  go to state 55
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    setExpr     go to state 64
    setOp       go to state 65
    elem        go to state 66


State 155

   21 iterStmt: FOR '(' exprStmt exprStmt ')' body .

    $default  reduce using rule 21 (iterStmt)


State 156

   22 iterStmt: FOR '(' exprStmt exprStmt expression ')' . body

    error    shift, and go to state 24
    TYPE     shift, and go to state 1
    ID       shift, and go to state 25
    IF       shift, and go to state 26
    FOR      shift, and go to state 27
    RETURN   shift, and go to state 28
    FORALL   shift, and go to state 29
    IS_SET   shift, and go to state 30
    ADD      shift, and go to state 31
    REMOVE   shift, and go to state 32
    EXISTS   shift, and go to state 33
    READ     shift, and go to state 34
    WRITE    shift, and go to state 35
    WRITELN  shift, and go to state 36
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    ';'      shift, and go to state 40
    '('      shift, and go to state 41
    '{'      shift, and go to state 140
    '!'      shift, and go to state 43

    varDecl     go to state 141
    funcDecl    go to state 142
    stmt        go to state 143
    iterStmt    go to state 47
    body        go to state 164
    condStmt    go to state 48
    returnStmt  go to state 49
    exprStmt    go to state 50
    expression  go to state 51
    assign      go to state 52
    inExpr      go to state 53
    outExpr     go to state 54
    simpleExpr  go to state 55
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    setExpr     go to state 64
    setOp       go to state 65
    elem        go to state 66


State 157

   23 iterStmt: FORALL '(' elem IN set ')' . body

    error    shift, and go to state 24
    TYPE     shift, and go to state 1
    ID       shift, and go to state 25
    IF       shift, and go to state 26
    FOR      shift, and go to state 27
    RETURN   shift, and go to state 28
    FORALL   shift, and go to state 29
    IS_SET   shift, and go to state 30
    ADD      shift, and go to state 31
    REMOVE   shift, and go to state 32
    EXISTS   shift, and go to state 33
    READ     shift, and go to state 34
    WRITE    shift, and go to state 35
    WRITELN  shift, and go to state 36
    INTEGER  shift, and go to state 37
    FLOAT    shift, and go to state 38
    EMPTY    shift, and go to state 39
    ';'      shift, and go to state 40
    '('      shift, and go to state 41
    '{'      shift, and go to state 140
    '!'      shift, and go to state 43

    varDecl     go to state 141
    funcDecl    go to state 142
    stmt        go to state 143
    iterStmt    go to state 47
    body        go to state 165
    condStmt    go to state 48
    returnStmt  go to state 49
    exprStmt    go to state 50
    expression  go to state 51
    assign      go to state 52
    inExpr      go to state 53
    outExpr     go to state 54
    simpleExpr  go to state 55
    disjExpr    go to state 56
    negExpr     go to state 57
    relExpr     go to state 58
    artExpr1    go to state 59
    artExpr2    go to state 60
    factor      go to state 61
    constant    go to state 62
    call        go to state 63
    setExpr     go to state 64
    setOp       go to state 65
    elem        go to state 66


State 158

   77 setExpr: EXISTS '(' elem IN set ')' .

    $default  reduce using rule 77 (setExpr)


State 159

   81 elem: '(' EXISTS '(' elem IN set . ')' ')'

    ')'  shift, and go to state 166


State 160

   76 setExpr: setOp '(' elem IN set ')' .

    $default  reduce using rule 76 (setExpr)


State 161

   86 set: setOp '(' elem IN . set ')'

    ID      shift, and go to state 122
    ADD     shift, and go to state 31
    REMOVE  shift, and go to state 32

    setOp  go to state 123
    set    go to state 167


State 162

   24 body: '{' funcBody '}' .

    $default  reduce using rule 24 (body)


State 163

   29 condStmt: IF '(' expression ')' body ELSE body .

    $default  reduce using rule 29 (condStmt)


State 164

   22 iterStmt: FOR '(' exprStmt exprStmt expression ')' body .

    $default  reduce using rule 22 (iterStmt)


State 165

   23 iterStmt: FORALL '(' elem IN set ')' body .

    $default  reduce using rule 23 (iterStmt)


State 166

   81 elem: '(' EXISTS '(' elem IN set ')' . ')'

    ')'  shift, and go to state 168


State 167

   86 set: setOp '(' elem IN set . ')'

    ')'  shift, and go to state 169


State 168

   81 elem: '(' EXISTS '(' elem IN set ')' ')' .

    $default  reduce using rule 81 (elem)


State 169

   86 set: setOp '(' elem IN set ')' .

    $default  reduce using rule 86 (set)
