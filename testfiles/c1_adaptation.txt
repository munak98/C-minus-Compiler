set intersect(set first, set second) {
  set result;
  elem x;
  result = EMPTY;
  float count;
  count = 0;
  forall(x in count){
    if (x in second){
      count = count + 1;
      add(x in result);
    }
  }
  result = count;
  if (count > 0){
    write(count);
    writeln("intersections");
  }
  return result;
}

int size(set s){
  elem x;
  int count;
  count = 0;
  forall(x in s) count = count + 1;
  return count;
}

int main(){
  set A;
  set B;
  set C;
  A = EMPTY;
  B = EMPTY;
  int b, c, d;
  float k;
  read(a); read(b); read(c); read(d);
  add((a * b / c - d) in A);
  add((b - d / c) in A);
  add((d + b - c * d) in B);
  add((a * a / b + c) in B);

  C = intersect(A, B);
  k = size(C);

  if (k == 0) write("No intersection.\n");
  else {
    if (size(B) < size(A) && size(B) == k) writeln("B is a proper subset of A");
    if (size(A) < size(B) && size(A) == k) writeln("A is a proper subset of B");
    if (size(B) == k && size(A) == size(B)) writeln("A equal B");
  }
  return 0;
}
